

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Aug 13 19:31:27 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001448                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _ARR_LcdLineNumAddress_U8
    43  001448  80                 	db	128
    44  001449  C0                 	db	192
    45  00144A  90                 	db	144
    46  00144B  D0                 	db	208
    47  0000                     _LATA	set	3977
    48  0000                     _LATB	set	3978
    49  0000                     _LATC	set	3979
    50  0000                     _LATD	set	3980
    51  0000                     _LATE	set	3981
    52  0000                     _PORTA	set	3968
    53  0000                     _PORTB	set	3969
    54  0000                     _PORTC	set	3970
    55  0000                     _PORTD	set	3971
    56  0000                     _PORTE	set	3972
    57  0000                     _TRISA	set	3986
    58  0000                     _TRISB	set	3987
    59  0000                     _TRISC	set	3988
    60  0000                     _TRISD	set	3989
    61  0000                     _TRISE	set	3990
    62                           
    63                           	psect	smallconst
    64  000600                     __psmallconst:
    65                           	opt stack 0
    66  000600  00                 	db	0
    67  000601                     STR_2:
    68  000601  43                 	db	67	;'C'
    69  000602  6F                 	db	111	;'o'
    70  000603  75                 	db	117	;'u'
    71  000604  6E                 	db	110	;'n'
    72  000605  74                 	db	116	;'t'
    73  000606  3D                 	db	61	;'='
    74  000607  25                 	db	37
    75  000608  34                 	db	52	;'4'
    76  000609  64                 	db	100	;'d'
    77  00060A  00                 	db	0
    78  00060B                     STR_1:
    79  00060B  44                 	db	68	;'D'
    80  00060C  65                 	db	101	;'e'
    81  00060D  63                 	db	99	;'c'
    82  00060E  69                 	db	105	;'i'
    83  00060F  6D                 	db	109	;'m'
    84  000610  61                 	db	97	;'a'
    85  000611  6C                 	db	108	;'l'
    86  000612  00                 	db	0
    87                           
    88                           ; #config settings
    89  000613  00                 	db	0	; dummy byte at the end
    90  0000                     
    91                           	psect	cinit
    92  001260                     __pcinit:
    93                           	opt stack 0
    94  001260                     start_initialization:
    95                           	opt stack 0
    96  001260                     __initialization:
    97                           	opt stack 0
    98                           
    99                           ; Clear objects allocated to COMRAM (16 bytes)
   100  001260  EE00  F046         	lfsr	0,__pbssCOMRAM
   101  001264  0E10               	movlw	16
   102  001266                     clear_0:
   103  001266  6AEE               	clrf	postinc0,c
   104  001268  06E8               	decf	wreg,f,c
   105  00126A  E1FD               	bnz	clear_0
   106                           
   107                           ; Initialize objects allocated to COMRAM (4 bytes)
   108                           ; load TBLPTR registers with __pidataCOMRAM
   109  00126C  0E48               	movlw	low __pidataCOMRAM
   110  00126E  6EF6               	movwf	tblptrl,c
   111  001270  0E14               	movlw	high __pidataCOMRAM
   112  001272  6EF7               	movwf	tblptrh,c
   113  001274  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   114  001276  6EF8               	movwf	tblptru,c
   115  001278  EE00  F056         	lfsr	0,__pdataCOMRAM
   116  00127C  EE10 F004          	lfsr	1,4
   117  001280                     copy_data0:
   118  001280  0009               	tblrd		*+
   119  001282  CFF5 FFEE          	movff	tablat,postinc0
   120  001286  50E5               	movf	postdec1,w,c
   121  001288  50E1               	movf	fsr1l,w,c
   122  00128A  E1FA               	bnz	copy_data0
   123  00128C                     end_of_initialization:
   124                           	opt stack 0
   125  00128C                     __end_of__initialization:
   126                           	opt stack 0
   127  00128C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   128  00128E  6EF8               	movwf	tblptru,c
   129  001290  0100               	movlb	0
   130  001292  EF4E  F008         	goto	_main	;jump to C main() function
   131                           tblptru	equ	0xFF8
   132                           tblptrh	equ	0xFF7
   133                           tblptrl	equ	0xFF6
   134                           tablat	equ	0xFF5
   135                           postinc0	equ	0xFEE
   136                           wreg	equ	0xFE8
   137                           postdec1	equ	0xFE5
   138                           fsr1l	equ	0xFE1
   139                           
   140                           	psect	bssCOMRAM
   141  000046                     __pbssCOMRAM:
   142                           	opt stack 0
   143  000046                     _LCDConfig:
   144                           	opt stack 0
   145  000046                     	ds	14
   146  000054                     _v_LcdTrackCursorPos_U8:
   147                           	opt stack 0
   148  000054                     	ds	1
   149  000055                     _v_LcdTrackLineNum_U8:
   150                           	opt stack 0
   151  000055                     	ds	1
   152                           tblptru	equ	0xFF8
   153                           tblptrh	equ	0xFF7
   154                           tblptrl	equ	0xFF6
   155                           tablat	equ	0xFF5
   156                           postinc0	equ	0xFEE
   157                           wreg	equ	0xFE8
   158                           postdec1	equ	0xFE5
   159                           fsr1l	equ	0xFE1
   160                           
   161                           	psect	dataCOMRAM
   162  000056                     __pdataCOMRAM:
   163                           	opt stack 0
   164  000056                     _ARR_LcdLineNumAddress_U8:
   165                           	opt stack 0
   166  000056                     	ds	4
   167                           tblptru	equ	0xFF8
   168                           tblptrh	equ	0xFF7
   169                           tblptrl	equ	0xFF6
   170                           tablat	equ	0xFF5
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           postdec1	equ	0xFE5
   174                           fsr1l	equ	0xFE1
   175                           
   176                           	psect	cstackCOMRAM
   177  000001                     __pcstackCOMRAM:
   178                           	opt stack 0
   179  000001                     ??_GPIO_PinRead:
   180  000001                     ?___lldiv:
   181                           	opt stack 0
   182  000001                     GPIO_PinDirection@var_pinDirn_u8:
   183                           	opt stack 0
   184  000001                     GPIO_PinWrite@var_pinValue_u8:
   185                           	opt stack 0
   186  000001                     DELAY_us@us_count:
   187                           	opt stack 0
   188  000001                     ___lldiv@dividend:
   189                           	opt stack 0
   190                           
   191                           ; 4 bytes @ 0x0
   192  000001                     	ds	1
   193  000002                     ??_GPIO_PinDirection:
   194  000002                     ??_GPIO_PinWrite:
   195                           
   196                           ; 1 bytes @ 0x1
   197  000002                     	ds	1
   198  000003                     GPIO_PinRead@var_portNumber_u8:
   199                           	opt stack 0
   200  000003                     DELAY_ms@ms_count:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x2
   204  000003                     	ds	1
   205  000004                     GPIO_PinDirection@var_portNumber_u8:
   206                           	opt stack 0
   207  000004                     GPIO_PinWrite@var_portNumber_u8:
   208                           	opt stack 0
   209  000004                     GPIO_PinRead@returnStatus:
   210                           	opt stack 0
   211                           
   212                           ; 1 bytes @ 0x3
   213  000004                     	ds	1
   214  000005                     GPIO_PinDirection@enm_pinNumber:
   215                           	opt stack 0
   216  000005                     GPIO_PinWrite@enm_pinNumber:
   217                           	opt stack 0
   218  000005                     GPIO_PinRead@enm_pinNumber:
   219                           	opt stack 0
   220  000005                     ___lldiv@divisor:
   221                           	opt stack 0
   222                           
   223                           ; 4 bytes @ 0x4
   224  000005                     	ds	1
   225  000006                     LCD_SetUp@RW:
   226                           	opt stack 0
   227  000006                     lcd_BusyCheck@busyflag:
   228                           	opt stack 0
   229  000006                     lcd_SendHigherNibble@dataByte:
   230                           	opt stack 0
   231  000006                     lcd_SendLowerNibble@dataByte:
   232                           	opt stack 0
   233                           
   234                           ; 1 bytes @ 0x5
   235  000006                     	ds	1
   236  000007                     LCD_SetUp@EN:
   237                           	opt stack 0
   238  000007                     LCD_CmdWrite@v_lcdCmd_u8:
   239                           	opt stack 0
   240  000007                     lcd_DataWrite@dataByte:
   241                           	opt stack 0
   242                           
   243                           ; 1 bytes @ 0x6
   244  000007                     	ds	1
   245  000008                     LCD_SetUp@D0:
   246                           	opt stack 0
   247  000008                     LCD_GoToLine@v_lineNumber_u8:
   248                           	opt stack 0
   249  000008                     LCD_DisplayChar@v_lcdData_u8:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x7
   253  000008                     	ds	1
   254  000009                     LCD_SetUp@D1:
   255                           	opt stack 0
   256  000009                     LCD_Init@v_MaxCharsPerLine_u8:
   257                           	opt stack 0
   258  000009                     LCD_DisplayString@ptr_stringPointer_u8:
   259                           	opt stack 0
   260  000009                     ___lldiv@quotient:
   261                           	opt stack 0
   262                           
   263                           ; 4 bytes @ 0x8
   264  000009                     	ds	1
   265  00000A                     LCD_SetUp@D2:
   266                           	opt stack 0
   267  00000A                     LCD_Init@v_lcdNoOfLines_u8:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x9
   271  00000A                     	ds	1
   272  00000B                     LCD_SetUp@D3:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0xA
   276  00000B                     	ds	1
   277  00000C                     LCD_SetUp@D4:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0xB
   281  00000C                     	ds	1
   282  00000D                     LCD_SetUp@D5:
   283                           	opt stack 0
   284  00000D                     ___lldiv@counter:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0xC
   288  00000D                     	ds	1
   289  00000E                     LCD_SetUp@D6:
   290                           	opt stack 0
   291  00000E                     LCD_DisplayNumber@v_number_u32:
   292                           	opt stack 0
   293                           
   294                           ; 4 bytes @ 0xD
   295  00000E                     	ds	1
   296  00000F                     LCD_SetUp@D7:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0xE
   300  00000F                     	ds	1
   301  000010                     LCD_SetUp@RS:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0xF
   305  000010                     	ds	2
   306  000012                     LCD_DisplayNumber@v_numOfDigitsToDisplay_u8:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x11
   310  000012                     	ds	1
   311  000013                     ??_LCD_DisplayNumber:
   312                           
   313                           ; 1 bytes @ 0x12
   314  000013                     	ds	11
   315  00001E                     LCD_DisplayNumber@a:
   316                           	opt stack 0
   317                           
   318                           ; 10 bytes @ 0x1D
   319  00001E                     	ds	10
   320  000028                     _LCD_DisplayNumber$266:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x27
   324  000028                     	ds	2
   325  00002A                     LCD_DisplayNumber@v_numericSystem_u8:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0x29
   329  00002A                     	ds	1
   330  00002B                     LCD_DisplayNumber@i:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x2A
   334  00002B                     	ds	1
   335  00002C                     ?_LCD_Printf:
   336                           	opt stack 0
   337  00002C                     LCD_Printf@argList:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x2B
   341  00002C                     	ds	4
   342  000030                     LCD_Printf@str:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2F
   346  000030                     	ds	2
   347  000032                     LCD_Printf@v_num_s32:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x31
   351  000032                     	ds	4
   352  000036                     LCD_Printf@v_num_s16:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x35
   356  000036                     	ds	2
   357  000038                     LCD_Printf@v_num_u32:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0x37
   361  000038                     	ds	4
   362  00003C                     LCD_Printf@v_num_u16:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x3B
   366  00003C                     	ds	2
   367  00003E                     LCD_Printf@ptr:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x3D
   371  00003E                     	ds	2
   372  000040                     LCD_Printf@ch:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x3F
   376  000040                     	ds	1
   377  000041                     LCD_Printf@v_numOfDigitsToDisp_u8:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x40
   381  000041                     	ds	1
   382  000042                     LCD_Printf@argp:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x41
   386  000042                     	ds	2
   387  000044                     main@count:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x43
   391  000044                     	ds	2
   392                           tblptru	equ	0xFF8
   393                           tblptrh	equ	0xFF7
   394                           tblptrl	equ	0xFF6
   395                           tablat	equ	0xFF5
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           postdec1	equ	0xFE5
   399                           fsr1l	equ	0xFE1
   400                           
   401 ;;
   402 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   403 ;;
   404 ;; *************** function _main *****************
   405 ;; Defined at:
   406 ;;		line 39 in file "main.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;		None
   409 ;; Auto vars:     Size  Location     Type
   410 ;;  count           2   67[COMRAM] int 
   411 ;; Return value:  Size  Location     Type
   412 ;;                  2  307[None  ] int 
   413 ;; Registers used:
   414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   415 ;; Tracked objects:
   416 ;;		On entry : 0/0
   417 ;;		On exit  : 0/0
   418 ;;		Unchanged: 0/0
   419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   420 ;;      Params:         0       0       0       0       0       0       0
   421 ;;      Locals:         2       0       0       0       0       0       0
   422 ;;      Temps:          0       0       0       0       0       0       0
   423 ;;      Totals:         2       0       0       0       0       0       0
   424 ;;Total ram usage:        2 bytes
   425 ;; Hardware stack levels required when called:    8
   426 ;; This function calls:
   427 ;;		_DELAY_ms
   428 ;;		_LCD_DisplayString
   429 ;;		_LCD_GoToLine
   430 ;;		_LCD_Init
   431 ;;		_LCD_Printf
   432 ;;		_LCD_SetUp
   433 ;; This function is called by:
   434 ;;		Startup code after reset
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           	psect	text0
   439  00109C                     __ptext0:
   440                           	opt stack 0
   441  00109C                     _main:
   442                           	opt stack 23
   443                           
   444                           ;main.c: 41: int count = 0;
   445                           
   446                           ;incstack = 0
   447  00109C  0E00               	movlw	0
   448  00109E  6E45               	movwf	main@count+1,c
   449  0010A0  0E00               	movlw	0
   450  0010A2  6E44               	movwf	main@count,c
   451                           
   452                           ;main.c: 43: LCD_SetUp(PB_0,PB_1,PB_2,P_NC,P_NC,P_NC,P_NC,PB_4,PB_5,PB_6,PB_7);
   453  0010A4  0E09               	movlw	9
   454  0010A6  6E06               	movwf	LCD_SetUp@RW,c
   455  0010A8  0E0A               	movlw	10
   456  0010AA  6E07               	movwf	LCD_SetUp@EN,c
   457  0010AC  0EFF               	movlw	255
   458  0010AE  6E08               	movwf	LCD_SetUp@D0,c
   459  0010B0  0EFF               	movlw	255
   460  0010B2  6E09               	movwf	LCD_SetUp@D1,c
   461  0010B4  0EFF               	movlw	255
   462  0010B6  6E0A               	movwf	LCD_SetUp@D2,c
   463  0010B8  0EFF               	movlw	255
   464  0010BA  6E0B               	movwf	LCD_SetUp@D3,c
   465  0010BC  0E0C               	movlw	12
   466  0010BE  6E0C               	movwf	LCD_SetUp@D4,c
   467  0010C0  0E0D               	movlw	13
   468  0010C2  6E0D               	movwf	LCD_SetUp@D5,c
   469  0010C4  0E0E               	movlw	14
   470  0010C6  6E0E               	movwf	LCD_SetUp@D6,c
   471  0010C8  0E0F               	movlw	15
   472  0010CA  6E0F               	movwf	LCD_SetUp@D7,c
   473  0010CC  0E08               	movlw	8
   474  0010CE  EC57  F007         	call	_LCD_SetUp
   475                           
   476                           ;main.c: 44: LCD_Init(2,16);
   477  0010D2  0E10               	movlw	16
   478  0010D4  6E09               	movwf	LCD_Init@v_MaxCharsPerLine_u8,c
   479  0010D6  0E02               	movlw	2
   480  0010D8  EC8A  F008         	call	_LCD_Init
   481                           
   482                           ;main.c: 46: LCD_DisplayString("Decimal");
   483  0010DC  0E0B               	movlw	low STR_1
   484  0010DE  6E09               	movwf	LCD_DisplayString@ptr_stringPointer_u8,c
   485  0010E0  0E06               	movlw	high STR_1
   486  0010E2  6E0A               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1,c
   487  0010E4  ECB3  F009         	call	_LCD_DisplayString	;wreg free
   488  0010E8                     l1905:
   489                           
   490                           ;main.c: 49: {
   491                           ;main.c: 50: LCD_GoToLine(1);
   492  0010E8  0E01               	movlw	1
   493  0010EA  ECDD  F009         	call	_LCD_GoToLine
   494                           
   495                           ;main.c: 51: LCD_Printf("Count=%4d",count);
   496  0010EE  0E01               	movlw	low STR_2
   497  0010F0  6E2C               	movwf	LCD_Printf@argList,c
   498  0010F2  0E06               	movlw	high STR_2
   499  0010F4  6E2D               	movwf	LCD_Printf@argList+1,c
   500  0010F6  C044  F02E         	movff	main@count,?_LCD_Printf+2
   501  0010FA  C045  F02F         	movff	main@count+1,?_LCD_Printf+3
   502  0010FE  EC0A  F003         	call	_LCD_Printf	;wreg free
   503                           
   504                           ;main.c: 52: DELAY_ms(500);
   505  001102  0E01               	movlw	1
   506  001104  6E04               	movwf	DELAY_ms@ms_count+1,c
   507  001106  0EF4               	movlw	244
   508  001108  6E03               	movwf	DELAY_ms@ms_count,c
   509  00110A  EC05  F00A         	call	_DELAY_ms	;wreg free
   510                           
   511                           ;main.c: 53: count++;
   512  00110E  4A44               	infsnz	main@count,f,c
   513  001110  2A45               	incf	main@count+1,f,c
   514  001112  D7EA               	goto	l1905
   515  001114                     __end_of_main:
   516                           	opt stack 0
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526 ;; *************** function _LCD_SetUp *****************
   527 ;; Defined at:
   528 ;;		line 135 in file "../00-libfiles/lcd.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;  RS              1    wreg     enum E3222
   531 ;;  RW              1    5[COMRAM] enum E3222
   532 ;;  EN              1    6[COMRAM] enum E3222
   533 ;;  D0              1    7[COMRAM] enum E3222
   534 ;;  D1              1    8[COMRAM] enum E3222
   535 ;;  D2              1    9[COMRAM] enum E3222
   536 ;;  D3              1   10[COMRAM] enum E3222
   537 ;;  D4              1   11[COMRAM] enum E3222
   538 ;;  D5              1   12[COMRAM] enum E3222
   539 ;;  D6              1   13[COMRAM] enum E3222
   540 ;;  D7              1   14[COMRAM] enum E3222
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  RS              1   15[COMRAM] enum E3222
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0, cstack
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   552 ;;      Params:        10       0       0       0       0       0       0
   553 ;;      Locals:         1       0       0       0       0       0       0
   554 ;;      Temps:          0       0       0       0       0       0       0
   555 ;;      Totals:        11       0       0       0       0       0       0
   556 ;;Total ram usage:       11 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; Hardware stack levels required when called:    1
   559 ;; This function calls:
   560 ;;		_GPIO_PinDirection
   561 ;; This function is called by:
   562 ;;		_main
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           	psect	text1
   567  000EAE                     __ptext1:
   568                           	opt stack 0
   569  000EAE                     _LCD_SetUp:
   570                           	opt stack 29
   571                           
   572                           ;incstack = 0
   573                           ;LCD_SetUp@RS stored from wreg
   574  000EAE  6E10               	movwf	LCD_SetUp@RS,c
   575                           
   576                           ;lcd.c: 148: LCDConfig.RS = RS;
   577  000EB0  C010  F049         	movff	LCD_SetUp@RS,_LCDConfig+3
   578                           
   579                           ;lcd.c: 149: LCDConfig.RW = RW;
   580  000EB4  C006  F04A         	movff	LCD_SetUp@RW,_LCDConfig+4
   581                           
   582                           ;lcd.c: 150: LCDConfig.EN = EN;
   583  000EB8  C007  F04B         	movff	LCD_SetUp@EN,_LCDConfig+5
   584                           
   585                           ;lcd.c: 152: LCDConfig.D0 = D0;
   586  000EBC  C008  F04C         	movff	LCD_SetUp@D0,_LCDConfig+6
   587                           
   588                           ;lcd.c: 153: LCDConfig.D1 = D1;
   589  000EC0  C009  F04D         	movff	LCD_SetUp@D1,_LCDConfig+7
   590                           
   591                           ;lcd.c: 154: LCDConfig.D2 = D2;
   592  000EC4  C00A  F04E         	movff	LCD_SetUp@D2,_LCDConfig+8
   593                           
   594                           ;lcd.c: 155: LCDConfig.D3 = D3;
   595  000EC8  C00B  F04F         	movff	LCD_SetUp@D3,_LCDConfig+9
   596                           
   597                           ;lcd.c: 156: LCDConfig.D4 = D4;
   598  000ECC  C00C  F050         	movff	LCD_SetUp@D4,_LCDConfig+10
   599                           
   600                           ;lcd.c: 157: LCDConfig.D5 = D5;
   601  000ED0  C00D  F051         	movff	LCD_SetUp@D5,_LCDConfig+11
   602                           
   603                           ;lcd.c: 158: LCDConfig.D6 = D6;
   604  000ED4  C00E  F052         	movff	LCD_SetUp@D6,_LCDConfig+12
   605                           
   606                           ;lcd.c: 159: LCDConfig.D7 = D7;
   607  000ED8  C00F  F053         	movff	LCD_SetUp@D7,_LCDConfig+13
   608                           
   609                           ;lcd.c: 162: if((D0 == P_NC) || (D1 == P_NC) || (D2 == P_NC) || (D3 == P_NC))
   610  000EDC  2808               	incf	LCD_SetUp@D0,w,c
   611  000EDE  B4D8               	btfsc	status,2,c
   612  000EE0  D009               	goto	l1725
   613  000EE2  2809               	incf	LCD_SetUp@D1,w,c
   614  000EE4  B4D8               	btfsc	status,2,c
   615  000EE6  D006               	goto	l1725
   616  000EE8  280A               	incf	LCD_SetUp@D2,w,c
   617  000EEA  B4D8               	btfsc	status,2,c
   618  000EEC  D003               	goto	l1725
   619  000EEE  280B               	incf	LCD_SetUp@D3,w,c
   620  000EF0  A4D8               	btfss	status,2,c
   621  000EF2  D003               	goto	l1727
   622  000EF4                     l1725:
   623                           
   624                           ;lcd.c: 163: {
   625                           ;lcd.c: 164: LCDConfig.v_LcdMode_U8 = 4;
   626  000EF4  0E04               	movlw	4
   627  000EF6  6E48               	movwf	_LCDConfig+2,c
   628                           
   629                           ;lcd.c: 165: }
   630  000EF8  D016               	goto	l1737
   631  000EFA                     l1727:
   632                           
   633                           ;lcd.c: 166: else
   634                           ;lcd.c: 167: {
   635                           ;lcd.c: 168: LCDConfig.v_LcdMode_U8 = 8;
   636  000EFA  0E08               	movlw	8
   637  000EFC  6E48               	movwf	_LCDConfig+2,c
   638                           
   639                           ;lcd.c: 169: GPIO_PinDirection(D0,0x00u);
   640  000EFE  0E00               	movlw	0
   641  000F00  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   642  000F02  5008               	movf	LCD_SetUp@D0,w,c
   643  000F04  EC3E  F006         	call	_GPIO_PinDirection
   644                           
   645                           ;lcd.c: 170: GPIO_PinDirection(D1,0x00u);
   646  000F08  0E00               	movlw	0
   647  000F0A  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   648  000F0C  5009               	movf	LCD_SetUp@D1,w,c
   649  000F0E  EC3E  F006         	call	_GPIO_PinDirection
   650                           
   651                           ;lcd.c: 171: GPIO_PinDirection(D2,0x00u);
   652  000F12  0E00               	movlw	0
   653  000F14  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   654  000F16  500A               	movf	LCD_SetUp@D2,w,c
   655  000F18  EC3E  F006         	call	_GPIO_PinDirection
   656                           
   657                           ;lcd.c: 172: GPIO_PinDirection(D3,0x00u);
   658  000F1C  0E00               	movlw	0
   659  000F1E  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   660  000F20  500B               	movf	LCD_SetUp@D3,w,c
   661  000F22  EC3E  F006         	call	_GPIO_PinDirection
   662  000F26                     l1737:
   663                           
   664                           ;lcd.c: 173: }
   665                           ;lcd.c: 176: GPIO_PinDirection(RS,0x00u);
   666  000F26  0E00               	movlw	0
   667  000F28  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   668  000F2A  5010               	movf	LCD_SetUp@RS,w,c
   669  000F2C  EC3E  F006         	call	_GPIO_PinDirection
   670                           
   671                           ;lcd.c: 177: GPIO_PinDirection(RW,0x00u);
   672  000F30  0E00               	movlw	0
   673  000F32  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   674  000F34  5006               	movf	LCD_SetUp@RW,w,c
   675  000F36  EC3E  F006         	call	_GPIO_PinDirection
   676                           
   677                           ;lcd.c: 178: GPIO_PinDirection(EN,0x00u);
   678  000F3A  0E00               	movlw	0
   679  000F3C  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   680  000F3E  5007               	movf	LCD_SetUp@EN,w,c
   681  000F40  EC3E  F006         	call	_GPIO_PinDirection
   682                           
   683                           ;lcd.c: 180: GPIO_PinDirection(D4,0x00u);
   684  000F44  0E00               	movlw	0
   685  000F46  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   686  000F48  500C               	movf	LCD_SetUp@D4,w,c
   687  000F4A  EC3E  F006         	call	_GPIO_PinDirection
   688                           
   689                           ;lcd.c: 181: GPIO_PinDirection(D5,0x00u);
   690  000F4E  0E00               	movlw	0
   691  000F50  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   692  000F52  500D               	movf	LCD_SetUp@D5,w,c
   693  000F54  EC3E  F006         	call	_GPIO_PinDirection
   694                           
   695                           ;lcd.c: 182: GPIO_PinDirection(D6,0x00u);
   696  000F58  0E00               	movlw	0
   697  000F5A  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   698  000F5C  500E               	movf	LCD_SetUp@D6,w,c
   699  000F5E  EC3E  F006         	call	_GPIO_PinDirection
   700                           
   701                           ;lcd.c: 183: GPIO_PinDirection(D7,0x00u);
   702  000F62  0E00               	movlw	0
   703  000F64  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   704  000F66  500F               	movf	LCD_SetUp@D7,w,c
   705  000F68  EC3E  F006         	call	_GPIO_PinDirection
   706  000F6C  0012               	return		;funcret
   707  000F6E                     __end_of_LCD_SetUp:
   708                           	opt stack 0
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           postdec1	equ	0xFE5
   716                           fsr1l	equ	0xFE1
   717                           status	equ	0xFD8
   718                           
   719 ;; *************** function _LCD_Printf *****************
   720 ;; Defined at:
   721 ;;		line 676 in file "../00-libfiles/lcd.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;  argList         2   43[COMRAM] PTR const unsigned char 
   724 ;;		 -> STR_2(10), 
   725 ;; Auto vars:     Size  Location     Type
   726 ;;  v_num_u32       4   55[COMRAM] unsigned long 
   727 ;;  v_num_s32       4   49[COMRAM] long 
   728 ;;  argp            2   65[COMRAM] PTR void [1]
   729 ;;		 -> ?_LCD_Printf(1), 
   730 ;;  ptr             2   61[COMRAM] PTR const unsigned char 
   731 ;;		 -> STR_2(10), 
   732 ;;  v_num_u16       2   59[COMRAM] unsigned int 
   733 ;;  v_num_s16       2   53[COMRAM] int 
   734 ;;  str             2   47[COMRAM] PTR unsigned char 
   735 ;;  v_numOfDigit    1   64[COMRAM] unsigned char 
   736 ;;  ch              1   63[COMRAM] unsigned char 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      void 
   739 ;; Registers used:
   740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   746 ;;      Params:         4       0       0       0       0       0       0
   747 ;;      Locals:        20       0       0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0       0       0
   749 ;;      Totals:        24       0       0       0       0       0       0
   750 ;;Total ram usage:       24 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    7
   753 ;; This function calls:
   754 ;;		_LCD_DisplayChar
   755 ;;		_LCD_DisplayNumber
   756 ;;		_LCD_DisplayString
   757 ;; This function is called by:
   758 ;;		_main
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text2
   763  000614                     __ptext2:
   764                           	opt stack 0
   765  000614                     _LCD_Printf:
   766                           	opt stack 23
   767                           
   768                           ;lcd.c: 678: const char *ptr;
   769                           ;lcd.c: 679: va_list argp;
   770                           ;lcd.c: 680: sint16_t v_num_s16;
   771                           ;lcd.c: 681: sint32_t v_num_s32;
   772                           ;lcd.c: 682: uint16_t v_num_u16;
   773                           ;lcd.c: 683: uint32_t v_num_u32;
   774                           ;lcd.c: 684: char *str;
   775                           ;lcd.c: 685: char ch;
   776                           ;lcd.c: 686: uint8_t v_numOfDigitsToDisp_u8;
   777                           ;lcd.c: 691: *argp = __va_start();
   778                           
   779                           ;incstack = 0
   780  000614  0E2E               	movlw	low (?_LCD_Printf+2)
   781  000616  6E42               	movwf	LCD_Printf@argp,c
   782  000618  0E00               	movlw	high (?_LCD_Printf+2)
   783  00061A  6E43               	movwf	LCD_Printf@argp+1,c
   784                           
   785                           ;lcd.c: 694: for(ptr = argList; *ptr != '\0'; ptr++)
   786  00061C  C02C  F03E         	movff	LCD_Printf@argList,LCD_Printf@ptr
   787  000620  C02D  F03F         	movff	LCD_Printf@argList+1,LCD_Printf@ptr+1
   788  000624  D189               	goto	l1887
   789  000626                     l1773:
   790                           
   791                           ;lcd.c: 695: {
   792                           ;lcd.c: 697: ch= *ptr;
   793  000626  C03E  FFF6         	movff	LCD_Printf@ptr,tblptrl
   794  00062A  C03F  FFF7         	movff	LCD_Printf@ptr+1,tblptrh
   795  00062E                     	if	0	;tblptru may be non-zero
   796  00062E                     	endif
   797  00062E                     	if	0	;tblptru may be non-zero
   798  00062E                     	endif
   799  00062E  0008               	tblrd		*
   800  000630  CFF5 F040          	movff	tablat,LCD_Printf@ch
   801                           
   802                           ;lcd.c: 698: if(ch == '%')
   803  000634  0E25               	movlw	37
   804  000636  1840               	xorwf	LCD_Printf@ch,w,c
   805  000638  A4D8               	btfss	status,2,c
   806  00063A  D179               	goto	l1883
   807                           
   808                           ;lcd.c: 699: {
   809                           ;lcd.c: 700: ptr++;
   810  00063C  4A3E               	infsnz	LCD_Printf@ptr,f,c
   811  00063E  2A3F               	incf	LCD_Printf@ptr+1,f,c
   812                           
   813                           ;lcd.c: 701: ch = *ptr;
   814  000640  C03E  FFF6         	movff	LCD_Printf@ptr,tblptrl
   815  000644  C03F  FFF7         	movff	LCD_Printf@ptr+1,tblptrh
   816  000648                     	if	0	;tblptru may be non-zero
   817  000648                     	endif
   818  000648                     	if	0	;tblptru may be non-zero
   819  000648                     	endif
   820  000648  0008               	tblrd		*
   821  00064A  CFF5 F040          	movff	tablat,LCD_Printf@ch
   822                           
   823                           ;lcd.c: 702: if((ch>=0x30) && (ch<=0x39))
   824  00064E  0E2F               	movlw	47
   825  000650  6440               	cpfsgt	LCD_Printf@ch,c
   826  000652  D01C               	goto	l235
   827  000654  0E3A               	movlw	58
   828  000656  6040               	cpfslt	LCD_Printf@ch,c
   829  000658  D019               	goto	l235
   830                           
   831                           ;lcd.c: 703: {
   832                           ;lcd.c: 704: v_numOfDigitsToDisp_u8 = 0;
   833  00065A  0E00               	movlw	0
   834  00065C  6E41               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8,c
   835                           
   836                           ;lcd.c: 705: while((ch>=0x30) && (ch<=0x39))
   837  00065E  D00F               	goto	l1793
   838  000660                     l1787:
   839                           
   840                           ;lcd.c: 706: {
   841                           ;lcd.c: 707: v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
   842  000660  5041               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w,c
   843  000662  0D0A               	mullw	10
   844  000664  50F3               	movf	prodl,w,c
   845  000666  2440               	addwf	LCD_Printf@ch,w,c
   846  000668  0FD0               	addlw	208
   847  00066A  6E41               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8,c
   848                           
   849                           ;lcd.c: 708: ptr++;
   850  00066C  4A3E               	infsnz	LCD_Printf@ptr,f,c
   851  00066E  2A3F               	incf	LCD_Printf@ptr+1,f,c
   852                           
   853                           ;lcd.c: 709: ch = *ptr;
   854  000670  C03E  FFF6         	movff	LCD_Printf@ptr,tblptrl
   855  000674  C03F  FFF7         	movff	LCD_Printf@ptr+1,tblptrh
   856  000678                     	if	0	;tblptru may be non-zero
   857  000678                     	endif
   858  000678                     	if	0	;tblptru may be non-zero
   859  000678                     	endif
   860  000678  0008               	tblrd		*
   861  00067A  CFF5 F040          	movff	tablat,LCD_Printf@ch
   862  00067E                     l1793:
   863  00067E  0E2F               	movlw	47
   864  000680  6440               	cpfsgt	LCD_Printf@ch,c
   865  000682  D126               	goto	l1881
   866  000684  0E39               	movlw	57
   867  000686  6440               	cpfsgt	LCD_Printf@ch,c
   868  000688  D7EB               	goto	l1787
   869  00068A  D122               	goto	l1881
   870  00068C                     l235:
   871                           
   872                           ;lcd.c: 712: else
   873                           ;lcd.c: 713: {
   874                           ;lcd.c: 714: v_numOfDigitsToDisp_u8 = 0xffu;
   875  00068C  6841               	setf	LCD_Printf@v_numOfDigitsToDisp_u8,c
   876                           
   877                           ;lcd.c: 715: }
   878                           ;lcd.c: 718: switch(ch)
   879  00068E  D120               	goto	l1881
   880  000690                     l1797:
   881                           
   882                           ;lcd.c: 721: case 'c':
   883                           ;lcd.c: 722: ch = (*(int *)__va_arg((*(int **)argp), (int)0));
   884  000690  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
   885  000694  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
   886  000698  50DF               	movf	indf2,w,c
   887  00069A  6E40               	movwf	LCD_Printf@ch,c
   888  00069C  0E02               	movlw	2
   889  00069E  2642               	addwf	LCD_Printf@argp,f,c
   890  0006A0  0E00               	movlw	0
   891  0006A2  2243               	addwfc	LCD_Printf@argp+1,f,c
   892                           
   893                           ;lcd.c: 723: LCD_DisplayChar(ch);
   894  0006A4  5040               	movf	LCD_Printf@ch,w,c
   895  0006A6  ECF2  F009         	call	_LCD_DisplayChar
   896                           
   897                           ;lcd.c: 724: break;
   898  0006AA  D144               	goto	l1885
   899  0006AC                     l1803:
   900                           
   901                           ;lcd.c: 727: v_num_s16 = (*(int *)__va_arg((*(int **)argp), (int)0));
   902  0006AC  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
   903  0006B0  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
   904  0006B4  CFDE F036          	movff	postinc2,LCD_Printf@v_num_s16
   905  0006B8  CFDD F037          	movff	postdec2,LCD_Printf@v_num_s16+1
   906  0006BC  0E02               	movlw	2
   907  0006BE  2642               	addwf	LCD_Printf@argp,f,c
   908  0006C0  0E00               	movlw	0
   909  0006C2  2243               	addwfc	LCD_Printf@argp+1,f,c
   910                           
   911                           ;lcd.c: 728: if(v_num_s16<0)
   912  0006C4  AE37               	btfss	LCD_Printf@v_num_s16+1,7,c
   913  0006C6  D007               	goto	l1813
   914                           
   915                           ;lcd.c: 729: {
   916                           ;lcd.c: 730: v_num_s16 = -v_num_s16;
   917  0006C8  6C36               	negf	LCD_Printf@v_num_s16,c
   918  0006CA  1E37               	comf	LCD_Printf@v_num_s16+1,f,c
   919  0006CC  B0D8               	btfsc	status,0,c
   920  0006CE  2A37               	incf	LCD_Printf@v_num_s16+1,f,c
   921                           
   922                           ;lcd.c: 731: LCD_DisplayChar('-');
   923  0006D0  0E2D               	movlw	45
   924  0006D2  ECF2  F009         	call	_LCD_DisplayChar
   925  0006D6                     l1813:
   926                           
   927                           ;lcd.c: 732: }
   928                           ;lcd.c: 733: LCD_DisplayNumber(10u,v_num_s16,v_numOfDigitsToDisp_u8);
   929  0006D6  C036  F00E         	movff	LCD_Printf@v_num_s16,LCD_DisplayNumber@v_number_u32
   930  0006DA  C037  F00F         	movff	LCD_Printf@v_num_s16+1,LCD_DisplayNumber@v_number_u32+1
   931  0006DE  0E00               	movlw	0
   932  0006E0  BE0F               	btfsc	LCD_DisplayNumber@v_number_u32+1,7,c
   933  0006E2  0EFF               	movlw	-1
   934  0006E4  6E10               	movwf	LCD_DisplayNumber@v_number_u32+2,c
   935  0006E6  6E11               	movwf	LCD_DisplayNumber@v_number_u32+3,c
   936  0006E8  C041  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
   937  0006EC  0E0A               	movlw	10
   938  0006EE  ECA6  F004         	call	_LCD_DisplayNumber
   939                           
   940                           ;lcd.c: 734: break;
   941  0006F2  D120               	goto	l1885
   942  0006F4                     l1815:
   943                           
   944                           ;lcd.c: 737: v_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
   945  0006F4  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
   946  0006F8  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
   947  0006FC  CFDE F032          	movff	postinc2,LCD_Printf@v_num_s32
   948  000700  CFDE F033          	movff	postinc2,LCD_Printf@v_num_s32+1
   949  000704  CFDE F034          	movff	postinc2,LCD_Printf@v_num_s32+2
   950  000708  CFDE F035          	movff	postinc2,LCD_Printf@v_num_s32+3
   951  00070C  0E04               	movlw	4
   952  00070E  2642               	addwf	LCD_Printf@argp,f,c
   953  000710  0E00               	movlw	0
   954  000712  2243               	addwfc	LCD_Printf@argp+1,f,c
   955                           
   956                           ;lcd.c: 738: if(v_num_s32<0)
   957  000714  AE35               	btfss	LCD_Printf@v_num_s32+3,7,c
   958  000716  D00B               	goto	l1825
   959                           
   960                           ;lcd.c: 739: {
   961                           ;lcd.c: 740: v_num_s32 = -v_num_s32;
   962  000718  1E35               	comf	LCD_Printf@v_num_s32+3,f,c
   963  00071A  1E34               	comf	LCD_Printf@v_num_s32+2,f,c
   964  00071C  1E33               	comf	LCD_Printf@v_num_s32+1,f,c
   965  00071E  6C32               	negf	LCD_Printf@v_num_s32,c
   966  000720  0E00               	movlw	0
   967  000722  2233               	addwfc	LCD_Printf@v_num_s32+1,f,c
   968  000724  2234               	addwfc	LCD_Printf@v_num_s32+2,f,c
   969  000726  2235               	addwfc	LCD_Printf@v_num_s32+3,f,c
   970                           
   971                           ;lcd.c: 741: LCD_DisplayChar('-');
   972  000728  0E2D               	movlw	45
   973  00072A  ECF2  F009         	call	_LCD_DisplayChar
   974  00072E                     l1825:
   975                           
   976                           ;lcd.c: 742: }
   977                           ;lcd.c: 743: LCD_DisplayNumber(10u,v_num_s32,v_numOfDigitsToDisp_u8);
   978  00072E  C032  F00E         	movff	LCD_Printf@v_num_s32,LCD_DisplayNumber@v_number_u32
   979  000732  C033  F00F         	movff	LCD_Printf@v_num_s32+1,LCD_DisplayNumber@v_number_u32+1
   980  000736  C034  F010         	movff	LCD_Printf@v_num_s32+2,LCD_DisplayNumber@v_number_u32+2
   981  00073A  C035  F011         	movff	LCD_Printf@v_num_s32+3,LCD_DisplayNumber@v_number_u32+3
   982  00073E  C041  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
   983  000742  0E0A               	movlw	10
   984  000744  ECA6  F004         	call	_LCD_DisplayNumber
   985                           
   986                           ;lcd.c: 744: break;
   987  000748  D0F5               	goto	l1885
   988  00074A                     l1827:
   989                           
   990                           ;lcd.c: 747: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
   991  00074A  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
   992  00074E  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
   993  000752  CFDE F03C          	movff	postinc2,LCD_Printf@v_num_u16
   994  000756  CFDD F03D          	movff	postdec2,LCD_Printf@v_num_u16+1
   995  00075A  0E02               	movlw	2
   996  00075C  2642               	addwf	LCD_Printf@argp,f,c
   997  00075E  0E00               	movlw	0
   998  000760  2243               	addwfc	LCD_Printf@argp+1,f,c
   999                           
  1000                           ;lcd.c: 748: LCD_DisplayNumber(10u,v_num_u16,v_numOfDigitsToDisp_u8);
  1001  000762  C03C  F00E         	movff	LCD_Printf@v_num_u16,LCD_DisplayNumber@v_number_u32
  1002  000766  C03D  F00F         	movff	LCD_Printf@v_num_u16+1,LCD_DisplayNumber@v_number_u32+1
  1003  00076A  6A10               	clrf	LCD_DisplayNumber@v_number_u32+2,c
  1004  00076C  6A11               	clrf	LCD_DisplayNumber@v_number_u32+3,c
  1005  00076E  C041  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  1006  000772  0E0A               	movlw	10
  1007  000774  ECA6  F004         	call	_LCD_DisplayNumber
  1008                           
  1009                           ;lcd.c: 749: break;
  1010  000778  D0DD               	goto	l1885
  1011  00077A                     l1833:
  1012                           
  1013                           ;lcd.c: 752: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1014  00077A  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
  1015  00077E  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  1016  000782  CFDE F038          	movff	postinc2,LCD_Printf@v_num_u32
  1017  000786  CFDE F039          	movff	postinc2,LCD_Printf@v_num_u32+1
  1018  00078A  CFDE F03A          	movff	postinc2,LCD_Printf@v_num_u32+2
  1019  00078E  CFDE F03B          	movff	postinc2,LCD_Printf@v_num_u32+3
  1020  000792  0E04               	movlw	4
  1021  000794  2642               	addwf	LCD_Printf@argp,f,c
  1022  000796  0E00               	movlw	0
  1023  000798  2243               	addwfc	LCD_Printf@argp+1,f,c
  1024                           
  1025                           ;lcd.c: 753: LCD_DisplayNumber(10u,v_num_u32,v_numOfDigitsToDisp_u8);
  1026  00079A  C038  F00E         	movff	LCD_Printf@v_num_u32,LCD_DisplayNumber@v_number_u32
  1027  00079E  C039  F00F         	movff	LCD_Printf@v_num_u32+1,LCD_DisplayNumber@v_number_u32+1
  1028  0007A2  C03A  F010         	movff	LCD_Printf@v_num_u32+2,LCD_DisplayNumber@v_number_u32+2
  1029  0007A6  C03B  F011         	movff	LCD_Printf@v_num_u32+3,LCD_DisplayNumber@v_number_u32+3
  1030  0007AA  C041  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  1031  0007AE  0E0A               	movlw	10
  1032  0007B0  ECA6  F004         	call	_LCD_DisplayNumber
  1033                           
  1034                           ;lcd.c: 754: break;
  1035  0007B4  D0BF               	goto	l1885
  1036  0007B6                     l1839:
  1037                           
  1038                           ;lcd.c: 757: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  1039  0007B6  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
  1040  0007BA  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  1041  0007BE  CFDE F03C          	movff	postinc2,LCD_Printf@v_num_u16
  1042  0007C2  CFDD F03D          	movff	postdec2,LCD_Printf@v_num_u16+1
  1043  0007C6  0E02               	movlw	2
  1044  0007C8  2642               	addwf	LCD_Printf@argp,f,c
  1045  0007CA  0E00               	movlw	0
  1046  0007CC  2243               	addwfc	LCD_Printf@argp+1,f,c
  1047                           
  1048                           ;lcd.c: 758: LCD_DisplayNumber(16u,v_num_u16,v_numOfDigitsToDisp_u8);
  1049  0007CE  C03C  F00E         	movff	LCD_Printf@v_num_u16,LCD_DisplayNumber@v_number_u32
  1050  0007D2  C03D  F00F         	movff	LCD_Printf@v_num_u16+1,LCD_DisplayNumber@v_number_u32+1
  1051  0007D6  6A10               	clrf	LCD_DisplayNumber@v_number_u32+2,c
  1052  0007D8  6A11               	clrf	LCD_DisplayNumber@v_number_u32+3,c
  1053  0007DA  C041  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  1054  0007DE  0E10               	movlw	16
  1055  0007E0  ECA6  F004         	call	_LCD_DisplayNumber
  1056                           
  1057                           ;lcd.c: 759: break;
  1058  0007E4  D0A7               	goto	l1885
  1059  0007E6                     l1845:
  1060                           
  1061                           ;lcd.c: 762: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1062  0007E6  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
  1063  0007EA  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  1064  0007EE  CFDE F038          	movff	postinc2,LCD_Printf@v_num_u32
  1065  0007F2  CFDE F039          	movff	postinc2,LCD_Printf@v_num_u32+1
  1066  0007F6  CFDE F03A          	movff	postinc2,LCD_Printf@v_num_u32+2
  1067  0007FA  CFDE F03B          	movff	postinc2,LCD_Printf@v_num_u32+3
  1068  0007FE  0E04               	movlw	4
  1069  000800  2642               	addwf	LCD_Printf@argp,f,c
  1070  000802  0E00               	movlw	0
  1071  000804  2243               	addwfc	LCD_Printf@argp+1,f,c
  1072                           
  1073                           ;lcd.c: 763: LCD_DisplayNumber(16u,v_num_u32,v_numOfDigitsToDisp_u8);
  1074  000806  C038  F00E         	movff	LCD_Printf@v_num_u32,LCD_DisplayNumber@v_number_u32
  1075  00080A  C039  F00F         	movff	LCD_Printf@v_num_u32+1,LCD_DisplayNumber@v_number_u32+1
  1076  00080E  C03A  F010         	movff	LCD_Printf@v_num_u32+2,LCD_DisplayNumber@v_number_u32+2
  1077  000812  C03B  F011         	movff	LCD_Printf@v_num_u32+3,LCD_DisplayNumber@v_number_u32+3
  1078  000816  C041  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  1079  00081A  0E10               	movlw	16
  1080  00081C  ECA6  F004         	call	_LCD_DisplayNumber
  1081                           
  1082                           ;lcd.c: 764: break;
  1083  000820  D089               	goto	l1885
  1084  000822                     l1851:
  1085                           
  1086                           ;lcd.c: 768: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  1087  000822  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
  1088  000826  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  1089  00082A  CFDE F03C          	movff	postinc2,LCD_Printf@v_num_u16
  1090  00082E  CFDD F03D          	movff	postdec2,LCD_Printf@v_num_u16+1
  1091  000832  0E02               	movlw	2
  1092  000834  2642               	addwf	LCD_Printf@argp,f,c
  1093  000836  0E00               	movlw	0
  1094  000838  2243               	addwfc	LCD_Printf@argp+1,f,c
  1095                           
  1096                           ;lcd.c: 769: if(v_numOfDigitsToDisp_u8 == 0xffu)
  1097  00083A  2841               	incf	LCD_Printf@v_numOfDigitsToDisp_u8,w,c
  1098  00083C  A4D8               	btfss	status,2,c
  1099  00083E  D002               	goto	l1859
  1100                           
  1101                           ;lcd.c: 770: v_numOfDigitsToDisp_u8 = 16;
  1102  000840  0E10               	movlw	16
  1103  000842  6E41               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8,c
  1104  000844                     l1859:
  1105                           
  1106                           ;lcd.c: 771: LCD_DisplayNumber(2u,v_num_u16,v_numOfDigitsToDisp_u8);
  1107  000844  C03C  F00E         	movff	LCD_Printf@v_num_u16,LCD_DisplayNumber@v_number_u32
  1108  000848  C03D  F00F         	movff	LCD_Printf@v_num_u16+1,LCD_DisplayNumber@v_number_u32+1
  1109  00084C  6A10               	clrf	LCD_DisplayNumber@v_number_u32+2,c
  1110  00084E  6A11               	clrf	LCD_DisplayNumber@v_number_u32+3,c
  1111  000850  C041  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  1112  000854  0E02               	movlw	2
  1113  000856  ECA6  F004         	call	_LCD_DisplayNumber
  1114                           
  1115                           ;lcd.c: 772: break;
  1116  00085A  D06C               	goto	l1885
  1117  00085C                     l1861:
  1118                           
  1119                           ;lcd.c: 775: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1120  00085C  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
  1121  000860  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  1122  000864  CFDE F038          	movff	postinc2,LCD_Printf@v_num_u32
  1123  000868  CFDE F039          	movff	postinc2,LCD_Printf@v_num_u32+1
  1124  00086C  CFDE F03A          	movff	postinc2,LCD_Printf@v_num_u32+2
  1125  000870  CFDE F03B          	movff	postinc2,LCD_Printf@v_num_u32+3
  1126  000874  0E04               	movlw	4
  1127  000876  2642               	addwf	LCD_Printf@argp,f,c
  1128  000878  0E00               	movlw	0
  1129  00087A  2243               	addwfc	LCD_Printf@argp+1,f,c
  1130                           
  1131                           ;lcd.c: 776: if(v_numOfDigitsToDisp_u8 == 0xffu)
  1132  00087C  2841               	incf	LCD_Printf@v_numOfDigitsToDisp_u8,w,c
  1133  00087E  A4D8               	btfss	status,2,c
  1134  000880  D002               	goto	l1869
  1135                           
  1136                           ;lcd.c: 777: v_numOfDigitsToDisp_u8 = 16;
  1137  000882  0E10               	movlw	16
  1138  000884  6E41               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8,c
  1139  000886                     l1869:
  1140                           
  1141                           ;lcd.c: 778: LCD_DisplayNumber(2u,v_num_u32,v_numOfDigitsToDisp_u8);
  1142  000886  C038  F00E         	movff	LCD_Printf@v_num_u32,LCD_DisplayNumber@v_number_u32
  1143  00088A  C039  F00F         	movff	LCD_Printf@v_num_u32+1,LCD_DisplayNumber@v_number_u32+1
  1144  00088E  C03A  F010         	movff	LCD_Printf@v_num_u32+2,LCD_DisplayNumber@v_number_u32+2
  1145  000892  C03B  F011         	movff	LCD_Printf@v_num_u32+3,LCD_DisplayNumber@v_number_u32+3
  1146  000896  C041  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  1147  00089A  0E02               	movlw	2
  1148  00089C  ECA6  F004         	call	_LCD_DisplayNumber
  1149                           
  1150                           ;lcd.c: 783: case 'f':
  1151                           ;lcd.c: 788: break;
  1152                           
  1153                           ;lcd.c: 782: case 'F':
  1154                           
  1155                           ;lcd.c: 779: break;
  1156  0008A0  D049               	goto	l1885
  1157  0008A2                     l1871:
  1158                           
  1159                           ;lcd.c: 792: case 's':
  1160                           ;lcd.c: 793: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  1161  0008A2  C042  FFD9         	movff	LCD_Printf@argp,fsr2l
  1162  0008A6  C043  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  1163  0008AA  CFDE F030          	movff	postinc2,LCD_Printf@str
  1164  0008AE  CFDD F031          	movff	postdec2,LCD_Printf@str+1
  1165  0008B2  0E02               	movlw	2
  1166  0008B4  2642               	addwf	LCD_Printf@argp,f,c
  1167  0008B6  0E00               	movlw	0
  1168  0008B8  2243               	addwfc	LCD_Printf@argp+1,f,c
  1169                           
  1170                           ;lcd.c: 794: LCD_DisplayString(str);
  1171  0008BA  C030  F009         	movff	LCD_Printf@str,LCD_DisplayString@ptr_stringPointer_u8
  1172  0008BE  C031  F00A         	movff	LCD_Printf@str+1,LCD_DisplayString@ptr_stringPointer_u8+1
  1173  0008C2  ECB3  F009         	call	_LCD_DisplayString	;wreg free
  1174                           
  1175                           ;lcd.c: 795: break;
  1176  0008C6  D036               	goto	l1885
  1177  0008C8                     l1877:
  1178                           
  1179                           ;lcd.c: 798: LCD_DisplayChar('%');
  1180  0008C8  0E25               	movlw	37
  1181  0008CA  ECF2  F009         	call	_LCD_DisplayChar
  1182                           
  1183                           ;lcd.c: 800: }
  1184                           
  1185                           ;lcd.c: 799: break;
  1186  0008CE  D032               	goto	l1885
  1187  0008D0                     l1881:
  1188  0008D0  5040               	movf	LCD_Printf@ch,w,c
  1189                           
  1190                           ; Switch size 1, requested type "space"
  1191                           ; Number of cases is 15, Range of values is 37 to 120
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte           46    24 (average)
  1195                           ;	Chosen strategy is simple_byte
  1196  0008D2  0A25               	xorlw	37	; case 37
  1197  0008D4  B4D8               	btfsc	status,2,c
  1198  0008D6  D7F8               	goto	l1877
  1199  0008D8  0A67               	xorlw	103	; case 66
  1200  0008DA  B4D8               	btfsc	status,2,c
  1201  0008DC  D7BF               	goto	l1861
  1202  0008DE  0A01               	xorlw	1	; case 67
  1203  0008E0  B4D8               	btfsc	status,2,c
  1204  0008E2  D6D6               	goto	l1797
  1205  0008E4  0A07               	xorlw	7	; case 68
  1206  0008E6  B4D8               	btfsc	status,2,c
  1207  0008E8  D705               	goto	l1815
  1208  0008EA  0A02               	xorlw	2	; case 70
  1209  0008EC  B4D8               	btfsc	status,2,c
  1210  0008EE  D022               	goto	l1885
  1211  0008F0  0A15               	xorlw	21	; case 83
  1212  0008F2  B4D8               	btfsc	status,2,c
  1213  0008F4  D7D6               	goto	l1871
  1214  0008F6  0A06               	xorlw	6	; case 85
  1215  0008F8  B4D8               	btfsc	status,2,c
  1216  0008FA  D73F               	goto	l1833
  1217  0008FC  0A0D               	xorlw	13	; case 88
  1218  0008FE  B4D8               	btfsc	status,2,c
  1219  000900  D772               	goto	l1845
  1220  000902  0A3A               	xorlw	58	; case 98
  1221  000904  B4D8               	btfsc	status,2,c
  1222  000906  D78D               	goto	l1851
  1223  000908  0A01               	xorlw	1	; case 99
  1224  00090A  B4D8               	btfsc	status,2,c
  1225  00090C  D6C1               	goto	l1797
  1226  00090E  0A07               	xorlw	7	; case 100
  1227  000910  B4D8               	btfsc	status,2,c
  1228  000912  D6CC               	goto	l1803
  1229  000914  0A02               	xorlw	2	; case 102
  1230  000916  B4D8               	btfsc	status,2,c
  1231  000918  D00D               	goto	l1885
  1232  00091A  0A15               	xorlw	21	; case 115
  1233  00091C  B4D8               	btfsc	status,2,c
  1234  00091E  D7C1               	goto	l1871
  1235  000920  0A06               	xorlw	6	; case 117
  1236  000922  B4D8               	btfsc	status,2,c
  1237  000924  D712               	goto	l1827
  1238  000926  0A0D               	xorlw	13	; case 120
  1239  000928  B4D8               	btfsc	status,2,c
  1240  00092A  D745               	goto	l1839
  1241                           
  1242                           ;lcd.c: 801: }
  1243  00092C  D003               	goto	l1885
  1244  00092E                     l1883:
  1245                           
  1246                           ;lcd.c: 802: else
  1247                           ;lcd.c: 803: {
  1248                           ;lcd.c: 805: LCD_DisplayChar(ch);
  1249  00092E  5040               	movf	LCD_Printf@ch,w,c
  1250  000930  ECF2  F009         	call	_LCD_DisplayChar
  1251  000934                     l1885:
  1252  000934  4A3E               	infsnz	LCD_Printf@ptr,f,c
  1253  000936  2A3F               	incf	LCD_Printf@ptr+1,f,c
  1254  000938                     l1887:
  1255  000938  C03E  FFF6         	movff	LCD_Printf@ptr,tblptrl
  1256  00093C  C03F  FFF7         	movff	LCD_Printf@ptr+1,tblptrh
  1257  000940                     	if	0	;tblptru may be non-zero
  1258  000940                     	endif
  1259  000940                     	if	0	;tblptru may be non-zero
  1260  000940                     	endif
  1261  000940  0008               	tblrd		*
  1262  000942  50F5               	movf	tablat,w,c
  1263  000944  0900               	iorlw	0
  1264  000946  B4D8               	btfsc	status,2,c
  1265  000948  0012               	return	
  1266  00094A  D66D               	goto	l1773
  1267  00094C                     __end_of_LCD_Printf:
  1268                           	opt stack 0
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           prodl	equ	0xFF3
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           fsr1l	equ	0xFE1
  1278                           indf2	equ	0xFDF
  1279                           postinc2	equ	0xFDE
  1280                           postdec2	equ	0xFDD
  1281                           fsr2h	equ	0xFDA
  1282                           fsr2l	equ	0xFD9
  1283                           status	equ	0xFD8
  1284                           
  1285 ;; *************** function _LCD_DisplayString *****************
  1286 ;; Defined at:
  1287 ;;		line 427 in file "../00-libfiles/lcd.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  ptr_stringPo    2    8[COMRAM] PTR const unsigned char 
  1290 ;;		 -> STR_1(8), 
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;		None
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1302 ;;      Params:         2       0       0       0       0       0       0
  1303 ;;      Locals:         0       0       0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0       0       0
  1305 ;;      Totals:         2       0       0       0       0       0       0
  1306 ;;Total ram usage:        2 bytes
  1307 ;; Hardware stack levels used:    1
  1308 ;; Hardware stack levels required when called:    6
  1309 ;; This function calls:
  1310 ;;		_LCD_DisplayChar
  1311 ;; This function is called by:
  1312 ;;		_LCD_Printf
  1313 ;;		_main
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           	psect	text3
  1318  001366                     __ptext3:
  1319                           	opt stack 0
  1320  001366                     _LCD_DisplayString:
  1321                           	opt stack 23
  1322                           
  1323                           ;lcd.c: 429: while((*ptr_stringPointer_u8)!=0)
  1324                           
  1325                           ;incstack = 0
  1326  001366  D00A               	goto	l1643
  1327  001368                     l1639:
  1328                           
  1329                           ;lcd.c: 430: LCD_DisplayChar(*ptr_stringPointer_u8++);
  1330  001368  C009  FFF6         	movff	LCD_DisplayString@ptr_stringPointer_u8,tblptrl
  1331  00136C  C00A  FFF7         	movff	LCD_DisplayString@ptr_stringPointer_u8+1,tblptrh
  1332  001370                     	if	0	;tblptru may be non-zero
  1333  001370                     	endif
  1334  001370                     	if	0	;tblptru may be non-zero
  1335  001370                     	endif
  1336  001370  0008               	tblrd		*
  1337  001372  50F5               	movf	tablat,w,c
  1338  001374  ECF2  F009         	call	_LCD_DisplayChar
  1339  001378  4A09               	infsnz	LCD_DisplayString@ptr_stringPointer_u8,f,c
  1340  00137A  2A0A               	incf	LCD_DisplayString@ptr_stringPointer_u8+1,f,c
  1341  00137C                     l1643:
  1342  00137C  C009  FFF6         	movff	LCD_DisplayString@ptr_stringPointer_u8,tblptrl
  1343  001380  C00A  FFF7         	movff	LCD_DisplayString@ptr_stringPointer_u8+1,tblptrh
  1344  001384                     	if	0	;tblptru may be non-zero
  1345  001384                     	endif
  1346  001384                     	if	0	;tblptru may be non-zero
  1347  001384                     	endif
  1348  001384  0008               	tblrd		*
  1349  001386  50F5               	movf	tablat,w,c
  1350  001388  0900               	iorlw	0
  1351  00138A  B4D8               	btfsc	status,2,c
  1352  00138C  0012               	return	
  1353  00138E  D7EC               	goto	l1639
  1354  001390                     __end_of_LCD_DisplayString:
  1355                           	opt stack 0
  1356                           tblptru	equ	0xFF8
  1357                           tblptrh	equ	0xFF7
  1358                           tblptrl	equ	0xFF6
  1359                           tablat	equ	0xFF5
  1360                           prodl	equ	0xFF3
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           postdec1	equ	0xFE5
  1364                           fsr1l	equ	0xFE1
  1365                           indf2	equ	0xFDF
  1366                           postinc2	equ	0xFDE
  1367                           postdec2	equ	0xFDD
  1368                           fsr2h	equ	0xFDA
  1369                           fsr2l	equ	0xFD9
  1370                           status	equ	0xFD8
  1371                           
  1372 ;; *************** function _LCD_DisplayNumber *****************
  1373 ;; Defined at:
  1374 ;;		line 529 in file "../00-libfiles/lcd.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;  v_numericSys    1    wreg     unsigned char 
  1377 ;;  v_number_u32    4   13[COMRAM] unsigned long 
  1378 ;;  v_numOfDigit    1   17[COMRAM] unsigned char 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  v_numericSys    1   41[COMRAM] unsigned char 
  1381 ;;  a              10   29[COMRAM] unsigned char [10]
  1382 ;;  i               1   42[COMRAM] unsigned char 
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1392 ;;      Params:         5       0       0       0       0       0       0
  1393 ;;      Locals:        14       0       0       0       0       0       0
  1394 ;;      Temps:         11       0       0       0       0       0       0
  1395 ;;      Totals:        30       0       0       0       0       0       0
  1396 ;;Total ram usage:       30 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    6
  1399 ;; This function calls:
  1400 ;;		_LCD_DisplayChar
  1401 ;;		___lldiv
  1402 ;; This function is called by:
  1403 ;;		_LCD_Printf
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text4
  1408  00094C                     __ptext4:
  1409                           	opt stack 0
  1410  00094C                     _LCD_DisplayNumber:
  1411                           	opt stack 23
  1412                           
  1413                           ;incstack = 0
  1414                           ;LCD_DisplayNumber@v_numericSystem_u8 stored from wreg
  1415  00094C  6E2A               	movwf	LCD_DisplayNumber@v_numericSystem_u8,c
  1416                           
  1417                           ;lcd.c: 531: uint8_t i=0,a[10];
  1418  00094E  0E00               	movlw	0
  1419  000950  6E2B               	movwf	LCD_DisplayNumber@i,c
  1420                           
  1421                           ;lcd.c: 533: if(2u == v_numericSystem_u8)
  1422  000952  0E02               	movlw	2
  1423  000954  182A               	xorwf	LCD_DisplayNumber@v_numericSystem_u8,w,c
  1424  000956  B4D8               	btfsc	status,2,c
  1425  000958  D034               	goto	l1657
  1426  00095A  D037               	goto	l1659
  1427  00095C                     l1651:
  1428                           
  1429                           ;lcd.c: 536: {
  1430                           ;lcd.c: 539: i = (((v_number_u32)&(((uint8_t)1<<((v_numOfDigitsToDisplay_u8-1)))))!=0u);
  1431  00095C  C012  F013         	movff	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,??_LCD_DisplayNumber
  1432  000960  0EFF               	movlw	-1
  1433  000962  2613               	addwf	??_LCD_DisplayNumber,f,c
  1434  000964  0E01               	movlw	1
  1435  000966  6E14               	movwf	(??_LCD_DisplayNumber+1)& (0+255),c
  1436  000968  0E00               	movlw	0
  1437  00096A  6E15               	movwf	(??_LCD_DisplayNumber+2)& (0+255),c
  1438  00096C  2A13               	incf	??_LCD_DisplayNumber,f,c
  1439  00096E  D003               	goto	u1864
  1440  000970                     u1865:
  1441  000970  90D8               	bcf	status,0,c
  1442  000972  3614               	rlcf	??_LCD_DisplayNumber+1,f,c
  1443  000974  3615               	rlcf	??_LCD_DisplayNumber+2,f,c
  1444  000976                     u1864:
  1445  000976  2E13               	decfsz	??_LCD_DisplayNumber,f,c
  1446  000978  D7FB               	goto	u1865
  1447  00097A  C014  F016         	movff	??_LCD_DisplayNumber+1,??_LCD_DisplayNumber+3
  1448  00097E  C015  F017         	movff	??_LCD_DisplayNumber+2,??_LCD_DisplayNumber+4
  1449  000982  0E00               	movlw	0
  1450  000984  BE17               	btfsc	(??_LCD_DisplayNumber+4)& (0+255),7,c
  1451  000986  0EFF               	movlw	255
  1452  000988  6E18               	movwf	(??_LCD_DisplayNumber+5)& (0+255),c
  1453  00098A  6E19               	movwf	(??_LCD_DisplayNumber+6)& (0+255),c
  1454  00098C  500E               	movf	LCD_DisplayNumber@v_number_u32,w,c
  1455  00098E  1416               	andwf	??_LCD_DisplayNumber+3,w,c
  1456  000990  6E1A               	movwf	(??_LCD_DisplayNumber+7)& (0+255),c
  1457  000992  500F               	movf	LCD_DisplayNumber@v_number_u32+1,w,c
  1458  000994  1417               	andwf	??_LCD_DisplayNumber+4,w,c
  1459  000996  6E1B               	movwf	(??_LCD_DisplayNumber+8)& (0+255),c
  1460  000998  5010               	movf	LCD_DisplayNumber@v_number_u32+2,w,c
  1461  00099A  1418               	andwf	??_LCD_DisplayNumber+5,w,c
  1462  00099C  6E1C               	movwf	(??_LCD_DisplayNumber+9)& (0+255),c
  1463  00099E  5011               	movf	LCD_DisplayNumber@v_number_u32+3,w,c
  1464  0009A0  1419               	andwf	??_LCD_DisplayNumber+6,w,c
  1465  0009A2  6E1D               	movwf	(??_LCD_DisplayNumber+10)& (0+255),c
  1466  0009A4  501A               	movf	??_LCD_DisplayNumber+7,w,c
  1467  0009A6  101B               	iorwf	??_LCD_DisplayNumber+8,w,c
  1468  0009A8  101C               	iorwf	??_LCD_DisplayNumber+9,w,c
  1469  0009AA  101D               	iorwf	??_LCD_DisplayNumber+10,w,c
  1470  0009AC  B4D8               	btfsc	status,2,c
  1471  0009AE  D002               	goto	u1870
  1472  0009B0  0E01               	movlw	1
  1473  0009B2  D001               	goto	u1880
  1474  0009B4                     u1870:
  1475  0009B4  0E00               	movlw	0
  1476  0009B6                     u1880:
  1477  0009B6  6E2B               	movwf	LCD_DisplayNumber@i,c
  1478                           
  1479                           ;lcd.c: 540: LCD_DisplayChar(((i)+0x30));
  1480  0009B8  502B               	movf	LCD_DisplayNumber@i,w,c
  1481  0009BA  0F30               	addlw	48
  1482  0009BC  ECF2  F009         	call	_LCD_DisplayChar
  1483                           
  1484                           ;lcd.c: 541: v_numOfDigitsToDisplay_u8--;
  1485  0009C0  0612               	decf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,f,c
  1486  0009C2                     l1657:
  1487  0009C2  5012               	movf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w,c
  1488  0009C4  B4D8               	btfsc	status,2,c
  1489  0009C6  0012               	return	
  1490  0009C8  D7C9               	goto	l1651
  1491  0009CA                     l1659:
  1492                           
  1493                           ;lcd.c: 544: else if(v_number_u32==0)
  1494  0009CA  500E               	movf	LCD_DisplayNumber@v_number_u32,w,c
  1495  0009CC  100F               	iorwf	LCD_DisplayNumber@v_number_u32+1,w,c
  1496  0009CE  1010               	iorwf	LCD_DisplayNumber@v_number_u32+2,w,c
  1497  0009D0  1011               	iorwf	LCD_DisplayNumber@v_number_u32+3,w,c
  1498  0009D2  A4D8               	btfss	status,2,c
  1499  0009D4  D004               	goto	l1663
  1500                           
  1501                           ;lcd.c: 545: {
  1502                           ;lcd.c: 549: LCD_DisplayChar('0');
  1503  0009D6  0E30               	movlw	48
  1504  0009D8  ECF2  F009         	call	_LCD_DisplayChar
  1505                           
  1506                           ;lcd.c: 550: }
  1507  0009DC  0012               	return	
  1508  0009DE                     l1663:
  1509                           
  1510                           ;lcd.c: 551: else
  1511                           ;lcd.c: 552: {
  1512                           ;lcd.c: 553: for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
  1513  0009DE  0E00               	movlw	0
  1514  0009E0  6E2B               	movwf	LCD_DisplayNumber@i,c
  1515  0009E2  D04D               	goto	l1681
  1516  0009E4                     l1665:
  1517                           
  1518                           ;lcd.c: 554: {
  1519                           ;lcd.c: 557: if(v_number_u32!=0)
  1520  0009E4  500E               	movf	LCD_DisplayNumber@v_number_u32,w,c
  1521  0009E6  100F               	iorwf	LCD_DisplayNumber@v_number_u32+1,w,c
  1522  0009E8  1010               	iorwf	LCD_DisplayNumber@v_number_u32+2,w,c
  1523  0009EA  1011               	iorwf	LCD_DisplayNumber@v_number_u32+3,w,c
  1524  0009EC  B4D8               	btfsc	status,2,c
  1525  0009EE  D035               	goto	l1671
  1526                           
  1527                           ;lcd.c: 558: {
  1528                           ;lcd.c: 565: a[i]=(uint32_t)(v_number_u32 - (v_numericSystem_u8 * (uint32_t)(v_number_u3
      +                          2/v_numericSystem_u8)));
  1529  0009F0  502B               	movf	LCD_DisplayNumber@i,w,c
  1530  0009F2  0D01               	mullw	1
  1531  0009F4  0E1E               	movlw	low LCD_DisplayNumber@a
  1532  0009F6  24F3               	addwf	prodl,w,c
  1533  0009F8  6ED9               	movwf	fsr2l,c
  1534  0009FA  0E00               	movlw	high LCD_DisplayNumber@a
  1535  0009FC  20F4               	addwfc	prodh,w,c
  1536  0009FE  6EDA               	movwf	fsr2h,c
  1537  000A00  C00E  F001         	movff	LCD_DisplayNumber@v_number_u32,___lldiv@dividend
  1538  000A04  C00F  F002         	movff	LCD_DisplayNumber@v_number_u32+1,___lldiv@dividend+1
  1539  000A08  C010  F003         	movff	LCD_DisplayNumber@v_number_u32+2,___lldiv@dividend+2
  1540  000A0C  C011  F004         	movff	LCD_DisplayNumber@v_number_u32+3,___lldiv@dividend+3
  1541  000A10  502A               	movf	LCD_DisplayNumber@v_numericSystem_u8,w,c
  1542  000A12  6E05               	movwf	___lldiv@divisor,c
  1543  000A14  6A06               	clrf	___lldiv@divisor+1,c
  1544  000A16  6A07               	clrf	___lldiv@divisor+2,c
  1545  000A18  6A08               	clrf	___lldiv@divisor+3,c
  1546  000A1A  EC0D  F008         	call	___lldiv	;wreg free
  1547  000A1E  5001               	movf	?___lldiv,w,c
  1548  000A20  022A               	mulwf	LCD_DisplayNumber@v_numericSystem_u8,c
  1549  000A22  50F3               	movf	prodl,w,c
  1550  000A24  0800               	sublw	0
  1551  000A26  240E               	addwf	LCD_DisplayNumber@v_number_u32,w,c
  1552  000A28  6EDF               	movwf	indf2,c
  1553                           
  1554                           ;lcd.c: 566: v_number_u32=v_number_u32/v_numericSystem_u8;
  1555  000A2A  C00E  F001         	movff	LCD_DisplayNumber@v_number_u32,___lldiv@dividend
  1556  000A2E  C00F  F002         	movff	LCD_DisplayNumber@v_number_u32+1,___lldiv@dividend+1
  1557  000A32  C010  F003         	movff	LCD_DisplayNumber@v_number_u32+2,___lldiv@dividend+2
  1558  000A36  C011  F004         	movff	LCD_DisplayNumber@v_number_u32+3,___lldiv@dividend+3
  1559  000A3A  502A               	movf	LCD_DisplayNumber@v_numericSystem_u8,w,c
  1560  000A3C  6E05               	movwf	___lldiv@divisor,c
  1561  000A3E  6A06               	clrf	___lldiv@divisor+1,c
  1562  000A40  6A07               	clrf	___lldiv@divisor+2,c
  1563  000A42  6A08               	clrf	___lldiv@divisor+3,c
  1564  000A44  EC0D  F008         	call	___lldiv	;wreg free
  1565  000A48  C001  F00E         	movff	?___lldiv,LCD_DisplayNumber@v_number_u32
  1566  000A4C  C002  F00F         	movff	?___lldiv+1,LCD_DisplayNumber@v_number_u32+1
  1567  000A50  C003  F010         	movff	?___lldiv+2,LCD_DisplayNumber@v_number_u32+2
  1568  000A54  C004  F011         	movff	?___lldiv+3,LCD_DisplayNumber@v_number_u32+3
  1569                           
  1570                           ;lcd.c: 567: }
  1571  000A58  D011               	goto	l1679
  1572  000A5A                     l1671:
  1573                           
  1574                           ;lcd.c: 568: else if( (v_numOfDigitsToDisplay_u8 == 0xffu) ||
  1575                           ;lcd.c: 569: (v_numOfDigitsToDisplay_u8 > 10u))
  1576  000A5A  2812               	incf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w,c
  1577  000A5C  B4D8               	btfsc	status,2,c
  1578  000A5E  D05A               	goto	l1693
  1579  000A60  0E0A               	movlw	10
  1580  000A62  6412               	cpfsgt	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,c
  1581  000A64  D001               	goto	l1677
  1582  000A66  D056               	goto	l1693
  1583  000A68                     l1677:
  1584                           
  1585                           ;lcd.c: 575: else
  1586                           ;lcd.c: 576: {
  1587                           ;lcd.c: 580: a[i]=0;
  1588  000A68  502B               	movf	LCD_DisplayNumber@i,w,c
  1589  000A6A  0D01               	mullw	1
  1590  000A6C  0E1E               	movlw	low LCD_DisplayNumber@a
  1591  000A6E  24F3               	addwf	prodl,w,c
  1592  000A70  6ED9               	movwf	fsr2l,c
  1593  000A72  0E00               	movlw	high LCD_DisplayNumber@a
  1594  000A74  20F4               	addwfc	prodh,w,c
  1595  000A76  6EDA               	movwf	fsr2h,c
  1596  000A78  0E00               	movlw	0
  1597  000A7A  6EDF               	movwf	indf2,c
  1598  000A7C                     l1679:
  1599  000A7C  2A2B               	incf	LCD_DisplayNumber@i,f,c
  1600  000A7E                     l1681:
  1601  000A7E  5012               	movf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w,c
  1602  000A80  5C2B               	subwf	LCD_DisplayNumber@i,w,c
  1603  000A82  B0D8               	btfsc	status,0,c
  1604  000A84  D047               	goto	l1693
  1605  000A86  D7AE               	goto	l1665
  1606  000A88                     l1683:
  1607                           
  1608                           ;lcd.c: 585: {
  1609                           ;lcd.c: 587: LCD_DisplayChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  1610  000A88  0EFF               	movlw	255
  1611  000A8A  6E13               	movwf	??_LCD_DisplayNumber& (0+255),c
  1612  000A8C  0EFF               	movlw	255
  1613  000A8E  6E14               	movwf	(??_LCD_DisplayNumber+1)& (0+255),c
  1614  000A90  502B               	movf	LCD_DisplayNumber@i,w,c
  1615  000A92  6E15               	movwf	(??_LCD_DisplayNumber+2)& (0+255),c
  1616  000A94  6A16               	clrf	(??_LCD_DisplayNumber+3)& (0+255),c
  1617  000A96  5013               	movf	??_LCD_DisplayNumber,w,c
  1618  000A98  2615               	addwf	??_LCD_DisplayNumber+2,f,c
  1619  000A9A  5014               	movf	??_LCD_DisplayNumber+1,w,c
  1620  000A9C  2216               	addwfc	??_LCD_DisplayNumber+3,f,c
  1621  000A9E  0E1E               	movlw	low LCD_DisplayNumber@a
  1622  000AA0  2415               	addwf	??_LCD_DisplayNumber+2,w,c
  1623  000AA2  6ED9               	movwf	fsr2l,c
  1624  000AA4  0E00               	movlw	high LCD_DisplayNumber@a
  1625  000AA6  2016               	addwfc	??_LCD_DisplayNumber+3,w,c
  1626  000AA8  6EDA               	movwf	fsr2h,c
  1627  000AAA  0E0A               	movlw	10
  1628  000AAC  60DF               	cpfslt	indf2,c
  1629  000AAE  D015               	goto	l1687
  1630  000AB0  0EFF               	movlw	255
  1631  000AB2  6E13               	movwf	??_LCD_DisplayNumber& (0+255),c
  1632  000AB4  0EFF               	movlw	255
  1633  000AB6  6E14               	movwf	(??_LCD_DisplayNumber+1)& (0+255),c
  1634  000AB8  502B               	movf	LCD_DisplayNumber@i,w,c
  1635  000ABA  6E15               	movwf	(??_LCD_DisplayNumber+2)& (0+255),c
  1636  000ABC  6A16               	clrf	(??_LCD_DisplayNumber+3)& (0+255),c
  1637  000ABE  5013               	movf	??_LCD_DisplayNumber,w,c
  1638  000AC0  2615               	addwf	??_LCD_DisplayNumber+2,f,c
  1639  000AC2  5014               	movf	??_LCD_DisplayNumber+1,w,c
  1640  000AC4  2216               	addwfc	??_LCD_DisplayNumber+3,f,c
  1641  000AC6  0E1E               	movlw	low LCD_DisplayNumber@a
  1642  000AC8  2415               	addwf	??_LCD_DisplayNumber+2,w,c
  1643  000ACA  6ED9               	movwf	fsr2l,c
  1644  000ACC  0E00               	movlw	high LCD_DisplayNumber@a
  1645  000ACE  2016               	addwfc	??_LCD_DisplayNumber+3,w,c
  1646  000AD0  6EDA               	movwf	fsr2h,c
  1647  000AD2  50DF               	movf	indf2,w,c
  1648  000AD4  6E17               	movwf	(??_LCD_DisplayNumber+4)& (0+255),c
  1649  000AD6  0E30               	movlw	48
  1650  000AD8  D014               	goto	L1
  1651  000ADA                     l1687:
  1652  000ADA  0EFF               	movlw	255
  1653  000ADC  6E13               	movwf	??_LCD_DisplayNumber& (0+255),c
  1654  000ADE  0EFF               	movlw	255
  1655  000AE0  6E14               	movwf	(??_LCD_DisplayNumber+1)& (0+255),c
  1656  000AE2  502B               	movf	LCD_DisplayNumber@i,w,c
  1657  000AE4  6E15               	movwf	(??_LCD_DisplayNumber+2)& (0+255),c
  1658  000AE6  6A16               	clrf	(??_LCD_DisplayNumber+3)& (0+255),c
  1659  000AE8  5013               	movf	??_LCD_DisplayNumber,w,c
  1660  000AEA  2615               	addwf	??_LCD_DisplayNumber+2,f,c
  1661  000AEC  5014               	movf	??_LCD_DisplayNumber+1,w,c
  1662  000AEE  2216               	addwfc	??_LCD_DisplayNumber+3,f,c
  1663  000AF0  0E1E               	movlw	low LCD_DisplayNumber@a
  1664  000AF2  2415               	addwf	??_LCD_DisplayNumber+2,w,c
  1665  000AF4  6ED9               	movwf	fsr2l,c
  1666  000AF6  0E00               	movlw	high LCD_DisplayNumber@a
  1667  000AF8  2016               	addwfc	??_LCD_DisplayNumber+3,w,c
  1668  000AFA  6EDA               	movwf	fsr2h,c
  1669  000AFC  50DF               	movf	indf2,w,c
  1670  000AFE  6E17               	movwf	(??_LCD_DisplayNumber+4)& (0+255),c
  1671  000B00  0E37               	movlw	55
  1672  000B02                     L1:
  1673  000B02  2417               	addwf	??_LCD_DisplayNumber+4,w,c
  1674  000B04  6E28               	movwf	_LCD_DisplayNumber$266,c
  1675  000B06  6A29               	clrf	_LCD_DisplayNumber$266+1,c
  1676  000B08  0E00               	movlw	0
  1677  000B0A  2229               	addwfc	_LCD_DisplayNumber$266+1,f,c
  1678  000B0C  5028               	movf	_LCD_DisplayNumber$266,w,c
  1679  000B0E  ECF2  F009         	call	_LCD_DisplayChar
  1680                           
  1681                           ;lcd.c: 588: i--;
  1682  000B12  062B               	decf	LCD_DisplayNumber@i,f,c
  1683  000B14                     l1693:
  1684  000B14  502B               	movf	LCD_DisplayNumber@i,w,c
  1685  000B16  B4D8               	btfsc	status,2,c
  1686  000B18  0012               	return	
  1687  000B1A  D7B6               	goto	l1683
  1688  000B1C                     __end_of_LCD_DisplayNumber:
  1689                           	opt stack 0
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           prodh	equ	0xFF4
  1695                           prodl	equ	0xFF3
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           indf2	equ	0xFDF
  1701                           postinc2	equ	0xFDE
  1702                           postdec2	equ	0xFDD
  1703                           fsr2h	equ	0xFDA
  1704                           fsr2l	equ	0xFD9
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function ___lldiv *****************
  1708 ;; Defined at:
  1709 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.36\sources\common\lldiv.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  dividend        4    0[COMRAM] unsigned long 
  1712 ;;  divisor         4    4[COMRAM] unsigned long 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  quotient        4    8[COMRAM] unsigned long 
  1715 ;;  counter         1   12[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  4    0[COMRAM] unsigned long 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1725 ;;      Params:         8       0       0       0       0       0       0
  1726 ;;      Locals:         5       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0
  1728 ;;      Totals:        13       0       0       0       0       0       0
  1729 ;;Total ram usage:       13 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_LCD_DisplayNumber
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text5
  1739  00101A                     __ptext5:
  1740                           	opt stack 0
  1741  00101A                     ___lldiv:
  1742                           	opt stack 28
  1743                           
  1744                           ;incstack = 0
  1745  00101A  0E00               	movlw	0
  1746  00101C  6E09               	movwf	___lldiv@quotient,c
  1747  00101E  0E00               	movlw	0
  1748  001020  6E0A               	movwf	___lldiv@quotient+1,c
  1749  001022  0E00               	movlw	0
  1750  001024  6E0B               	movwf	___lldiv@quotient+2,c
  1751  001026  0E00               	movlw	0
  1752  001028  6E0C               	movwf	___lldiv@quotient+3,c
  1753  00102A  5005               	movf	___lldiv@divisor,w,c
  1754  00102C  1006               	iorwf	___lldiv@divisor+1,w,c
  1755  00102E  1007               	iorwf	___lldiv@divisor+2,w,c
  1756  001030  1008               	iorwf	___lldiv@divisor+3,w,c
  1757  001032  B4D8               	btfsc	status,2,c
  1758  001034  D02A               	goto	l661
  1759  001036  0E01               	movlw	1
  1760  001038  6E0D               	movwf	___lldiv@counter,c
  1761  00103A  D006               	goto	l1617
  1762  00103C                     l1615:
  1763  00103C  90D8               	bcf	status,0,c
  1764  00103E  3605               	rlcf	___lldiv@divisor,f,c
  1765  001040  3606               	rlcf	___lldiv@divisor+1,f,c
  1766  001042  3607               	rlcf	___lldiv@divisor+2,f,c
  1767  001044  3608               	rlcf	___lldiv@divisor+3,f,c
  1768  001046  2A0D               	incf	___lldiv@counter,f,c
  1769  001048                     l1617:
  1770  001048  AE08               	btfss	___lldiv@divisor+3,7,c
  1771  00104A  D7F8               	goto	l1615
  1772  00104C                     l1619:
  1773  00104C  90D8               	bcf	status,0,c
  1774  00104E  3609               	rlcf	___lldiv@quotient,f,c
  1775  001050  360A               	rlcf	___lldiv@quotient+1,f,c
  1776  001052  360B               	rlcf	___lldiv@quotient+2,f,c
  1777  001054  360C               	rlcf	___lldiv@quotient+3,f,c
  1778  001056  5005               	movf	___lldiv@divisor,w,c
  1779  001058  5C01               	subwf	___lldiv@dividend,w,c
  1780  00105A  5006               	movf	___lldiv@divisor+1,w,c
  1781  00105C  5802               	subwfb	___lldiv@dividend+1,w,c
  1782  00105E  5007               	movf	___lldiv@divisor+2,w,c
  1783  001060  5803               	subwfb	___lldiv@dividend+2,w,c
  1784  001062  5008               	movf	___lldiv@divisor+3,w,c
  1785  001064  5804               	subwfb	___lldiv@dividend+3,w,c
  1786  001066  A0D8               	btfss	status,0,c
  1787  001068  D009               	goto	l1627
  1788  00106A  5005               	movf	___lldiv@divisor,w,c
  1789  00106C  5E01               	subwf	___lldiv@dividend,f,c
  1790  00106E  5006               	movf	___lldiv@divisor+1,w,c
  1791  001070  5A02               	subwfb	___lldiv@dividend+1,f,c
  1792  001072  5007               	movf	___lldiv@divisor+2,w,c
  1793  001074  5A03               	subwfb	___lldiv@dividend+2,f,c
  1794  001076  5008               	movf	___lldiv@divisor+3,w,c
  1795  001078  5A04               	subwfb	___lldiv@dividend+3,f,c
  1796  00107A  8009               	bsf	___lldiv@quotient,0,c
  1797  00107C                     l1627:
  1798  00107C  90D8               	bcf	status,0,c
  1799  00107E  3208               	rrcf	___lldiv@divisor+3,f,c
  1800  001080  3207               	rrcf	___lldiv@divisor+2,f,c
  1801  001082  3206               	rrcf	___lldiv@divisor+1,f,c
  1802  001084  3205               	rrcf	___lldiv@divisor,f,c
  1803  001086  2E0D               	decfsz	___lldiv@counter,f,c
  1804  001088  D7E1               	goto	l1619
  1805  00108A                     l661:
  1806  00108A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1807  00108E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1808  001092  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1809  001096  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1810  00109A  0012               	return		;funcret
  1811  00109C                     __end_of___lldiv:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           prodh	equ	0xFF4
  1818                           prodl	equ	0xFF3
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           postdec1	equ	0xFE5
  1822                           fsr1l	equ	0xFE1
  1823                           indf2	equ	0xFDF
  1824                           postinc2	equ	0xFDE
  1825                           postdec2	equ	0xFDD
  1826                           fsr2h	equ	0xFDA
  1827                           fsr2l	equ	0xFD9
  1828                           status	equ	0xFD8
  1829                           
  1830 ;; *************** function _LCD_DisplayChar *****************
  1831 ;; Defined at:
  1832 ;;		line 392 in file "../00-libfiles/lcd.c"
  1833 ;; Parameters:    Size  Location     Type
  1834 ;;  v_lcdData_u8    1    wreg     unsigned char 
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;  v_lcdData_u8    1    7[COMRAM] unsigned char 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  1    wreg      void 
  1839 ;; Registers used:
  1840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1846 ;;      Params:         0       0       0       0       0       0       0
  1847 ;;      Locals:         1       0       0       0       0       0       0
  1848 ;;      Temps:          0       0       0       0       0       0       0
  1849 ;;      Totals:         1       0       0       0       0       0       0
  1850 ;;Total ram usage:        1 bytes
  1851 ;; Hardware stack levels used:    1
  1852 ;; Hardware stack levels required when called:    5
  1853 ;; This function calls:
  1854 ;;		_LCD_GoToNextLine
  1855 ;;		_lcd_DataWrite
  1856 ;; This function is called by:
  1857 ;;		_LCD_DisplayString
  1858 ;;		_LCD_DisplayNumber
  1859 ;;		_LCD_Printf
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           	psect	text6
  1864  0013E4                     __ptext6:
  1865                           	opt stack 0
  1866  0013E4                     _LCD_DisplayChar:
  1867                           	opt stack 23
  1868                           
  1869                           ;incstack = 0
  1870                           ;LCD_DisplayChar@v_lcdData_u8 stored from wreg
  1871  0013E4  6E08               	movwf	LCD_DisplayChar@v_lcdData_u8,c
  1872                           
  1873                           ;lcd.c: 394: if((v_LcdTrackCursorPos_U8>=LCDConfig.v_MaxSupportedChars_U8) || (v_lcdData
      +                          _u8=='\n'))
  1874  0013E6  5047               	movf	_LCDConfig+1,w,c
  1875  0013E8  5C54               	subwf	_v_LcdTrackCursorPos_U8,w,c
  1876  0013EA  B0D8               	btfsc	status,0,c
  1877  0013EC  D003               	goto	l1601
  1878  0013EE  0E0A               	movlw	10
  1879  0013F0  1808               	xorwf	LCD_DisplayChar@v_lcdData_u8,w,c
  1880  0013F2  B4D8               	btfsc	status,2,c
  1881  0013F4                     l1601:
  1882                           
  1883                           ;lcd.c: 395: {
  1884                           ;lcd.c: 398: LCD_GoToNextLine();
  1885  0013F4  ECC8  F009         	call	_LCD_GoToNextLine	;wreg free
  1886                           
  1887                           ;lcd.c: 399: }
  1888                           ;lcd.c: 400: if(v_lcdData_u8!='\n')
  1889  0013F8  0E0A               	movlw	10
  1890  0013FA  1808               	xorwf	LCD_DisplayChar@v_lcdData_u8,w,c
  1891  0013FC  B4D8               	btfsc	status,2,c
  1892  0013FE  0012               	return	
  1893                           
  1894                           ;lcd.c: 401: {
  1895                           ;lcd.c: 403: lcd_DataWrite(v_lcdData_u8);
  1896  001400  5008               	movf	LCD_DisplayChar@v_lcdData_u8,w,c
  1897  001402  EC81  F009         	call	_lcd_DataWrite
  1898                           
  1899                           ;lcd.c: 404: v_LcdTrackCursorPos_U8++;
  1900  001406  2A54               	incf	_v_LcdTrackCursorPos_U8,f,c
  1901  001408  0012               	return	
  1902  00140A                     __end_of_LCD_DisplayChar:
  1903                           	opt stack 0
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           prodh	equ	0xFF4
  1909                           prodl	equ	0xFF3
  1910                           postinc0	equ	0xFEE
  1911                           wreg	equ	0xFE8
  1912                           postdec1	equ	0xFE5
  1913                           fsr1l	equ	0xFE1
  1914                           indf2	equ	0xFDF
  1915                           postinc2	equ	0xFDE
  1916                           postdec2	equ	0xFDD
  1917                           fsr2h	equ	0xFDA
  1918                           fsr2l	equ	0xFD9
  1919                           status	equ	0xFD8
  1920                           
  1921 ;; *************** function _lcd_DataWrite *****************
  1922 ;; Defined at:
  1923 ;;		line 826 in file "../00-libfiles/lcd.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  dataByte        1    wreg     unsigned char 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  dataByte        1    6[COMRAM] unsigned char 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, status,2, status,0, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1937 ;;      Params:         0       0       0       0       0       0       0
  1938 ;;      Locals:         1       0       0       0       0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0
  1940 ;;      Totals:         1       0       0       0       0       0       0
  1941 ;;Total ram usage:        1 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; Hardware stack levels required when called:    3
  1944 ;; This function calls:
  1945 ;;		_lcd_BusyCheck
  1946 ;;		_lcd_SendDataSignals
  1947 ;;		_lcd_SendHigherNibble
  1948 ;;		_lcd_SendLowerNibble
  1949 ;; This function is called by:
  1950 ;;		_LCD_DisplayChar
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text7
  1955  001302                     __ptext7:
  1956                           	opt stack 0
  1957  001302                     _lcd_DataWrite:
  1958                           	opt stack 24
  1959                           
  1960                           ;incstack = 0
  1961                           ;lcd_DataWrite@dataByte stored from wreg
  1962  001302  6E07               	movwf	lcd_DataWrite@dataByte,c
  1963                           
  1964                           ;lcd.c: 828: lcd_BusyCheck();
  1965  001304  ECB7  F007         	call	_lcd_BusyCheck	;wreg free
  1966                           
  1967                           ;lcd.c: 829: if(LCDConfig.v_LcdMode_U8 == 8u)
  1968  001308  0E08               	movlw	8
  1969  00130A  1848               	xorwf	_LCDConfig+2,w,c
  1970  00130C  A4D8               	btfss	status,2,c
  1971  00130E  D004               	goto	l1581
  1972                           
  1973                           ;lcd.c: 830: {
  1974                           ;lcd.c: 831: lcd_SendLowerNibble(dataByte);
  1975  001310  5007               	movf	lcd_DataWrite@dataByte,w,c
  1976  001312  ECE4  F008         	call	_lcd_SendLowerNibble
  1977                           
  1978                           ;lcd.c: 832: }
  1979  001316  D008               	goto	l1585
  1980  001318                     l1581:
  1981                           
  1982                           ;lcd.c: 833: else
  1983                           ;lcd.c: 834: {
  1984                           ;lcd.c: 835: lcd_SendHigherNibble(dataByte);
  1985  001318  5007               	movf	lcd_DataWrite@dataByte,w,c
  1986  00131A  EC0A  F009         	call	_lcd_SendHigherNibble
  1987                           
  1988                           ;lcd.c: 836: lcd_SendDataSignals();
  1989  00131E  EC4B  F009         	call	_lcd_SendDataSignals	;wreg free
  1990                           
  1991                           ;lcd.c: 837: dataByte = dataByte << 4;
  1992  001322  3807               	swapf	lcd_DataWrite@dataByte,w,c
  1993  001324  0BF0               	andlw	240
  1994  001326  6E07               	movwf	lcd_DataWrite@dataByte,c
  1995  001328                     l1585:
  1996                           
  1997                           ;lcd.c: 838: }
  1998                           ;lcd.c: 840: lcd_SendHigherNibble(dataByte);
  1999  001328  5007               	movf	lcd_DataWrite@dataByte,w,c
  2000  00132A  EC0A  F009         	call	_lcd_SendHigherNibble
  2001                           
  2002                           ;lcd.c: 841: lcd_SendDataSignals();
  2003  00132E  EC4B  F009         	call	_lcd_SendDataSignals	;wreg free
  2004  001332  0012               	return		;funcret
  2005  001334                     __end_of_lcd_DataWrite:
  2006                           	opt stack 0
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           prodh	equ	0xFF4
  2012                           prodl	equ	0xFF3
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           indf2	equ	0xFDF
  2018                           postinc2	equ	0xFDE
  2019                           postdec2	equ	0xFDD
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _lcd_SendDataSignals *****************
  2025 ;; Defined at:
  2026 ;;		line 1002 in file "../00-libfiles/lcd.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, status,2, status,0, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2040 ;;      Params:         0       0       0       0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0
  2043 ;;      Totals:         0       0       0       0       0       0       0
  2044 ;;Total ram usage:        0 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    1
  2047 ;; This function calls:
  2048 ;;		_DELAY_us
  2049 ;;		_GPIO_PinWrite
  2050 ;; This function is called by:
  2051 ;;		_lcd_DataWrite
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text8
  2056  001296                     __ptext8:
  2057                           	opt stack 0
  2058  001296                     _lcd_SendDataSignals:
  2059                           	opt stack 25
  2060                           
  2061                           ;lcd.c: 1004: GPIO_PinWrite(LCDConfig.RS,1);
  2062                           
  2063                           ;incstack = 0
  2064  001296  0E01               	movlw	1
  2065  001298  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2066  00129A  5049               	movf	_LCDConfig+3,w,c
  2067  00129C  EC8E  F005         	call	_GPIO_PinWrite
  2068                           
  2069                           ;lcd.c: 1005: GPIO_PinWrite(LCDConfig.RW,0);
  2070  0012A0  0E00               	movlw	0
  2071  0012A2  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2072  0012A4  504A               	movf	_LCDConfig+4,w,c
  2073  0012A6  EC8E  F005         	call	_GPIO_PinWrite
  2074                           
  2075                           ;lcd.c: 1006: GPIO_PinWrite(LCDConfig.EN,1);
  2076  0012AA  0E01               	movlw	1
  2077  0012AC  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2078  0012AE  504B               	movf	_LCDConfig+5,w,c
  2079  0012B0  EC8E  F005         	call	_GPIO_PinWrite
  2080                           
  2081                           ;lcd.c: 1007: DELAY_us(10);
  2082  0012B4  0E00               	movlw	0
  2083  0012B6  6E02               	movwf	DELAY_us@us_count+1,c
  2084  0012B8  0E0A               	movlw	10
  2085  0012BA  6E01               	movwf	DELAY_us@us_count,c
  2086  0012BC  EC14  F00A         	call	_DELAY_us	;wreg free
  2087                           
  2088                           ;lcd.c: 1008: GPIO_PinWrite(LCDConfig.EN,0);
  2089  0012C0  0E00               	movlw	0
  2090  0012C2  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2091  0012C4  504B               	movf	_LCDConfig+5,w,c
  2092  0012C6  EC8E  F005         	call	_GPIO_PinWrite
  2093  0012CA  0012               	return		;funcret
  2094  0012CC                     __end_of_lcd_SendDataSignals:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           prodh	equ	0xFF4
  2101                           prodl	equ	0xFF3
  2102                           postinc0	equ	0xFEE
  2103                           wreg	equ	0xFE8
  2104                           postdec1	equ	0xFE5
  2105                           fsr1l	equ	0xFE1
  2106                           indf2	equ	0xFDF
  2107                           postinc2	equ	0xFDE
  2108                           postdec2	equ	0xFDD
  2109                           fsr2h	equ	0xFDA
  2110                           fsr2l	equ	0xFD9
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function _LCD_GoToNextLine *****************
  2114 ;; Defined at:
  2115 ;;		line 292 in file "../00-libfiles/lcd.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;		None
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;		None
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2129 ;;      Params:         0       0       0       0       0       0       0
  2130 ;;      Locals:         0       0       0       0       0       0       0
  2131 ;;      Temps:          0       0       0       0       0       0       0
  2132 ;;      Totals:         0       0       0       0       0       0       0
  2133 ;;Total ram usage:        0 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    4
  2136 ;; This function calls:
  2137 ;;		_LCD_CmdWrite
  2138 ;; This function is called by:
  2139 ;;		_LCD_DisplayChar
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text9
  2144  001390                     __ptext9:
  2145                           	opt stack 0
  2146  001390                     _LCD_GoToNextLine:
  2147                           	opt stack 23
  2148                           
  2149                           ;lcd.c: 296: v_LcdTrackLineNum_U8++;
  2150                           
  2151                           ;incstack = 0
  2152  001390  2A55               	incf	_v_LcdTrackLineNum_U8,f,c
  2153                           
  2154                           ;lcd.c: 297: v_LcdTrackCursorPos_U8 = 0x00;
  2155  001392  0E00               	movlw	0
  2156  001394  6E54               	movwf	_v_LcdTrackCursorPos_U8,c
  2157                           
  2158                           ;lcd.c: 298: if(v_LcdTrackLineNum_U8 >= LCDConfig.v_MaxSupportedLines_U8)
  2159  001396  5046               	movf	_LCDConfig,w,c
  2160  001398  5C55               	subwf	_v_LcdTrackLineNum_U8,w,c
  2161  00139A  A0D8               	btfss	status,0,c
  2162  00139C  D002               	goto	l1573
  2163                           
  2164                           ;lcd.c: 299: v_LcdTrackLineNum_U8 = 0x00;
  2165  00139E  0E00               	movlw	0
  2166  0013A0  6E55               	movwf	_v_LcdTrackLineNum_U8,c
  2167  0013A2                     l1573:
  2168                           
  2169                           ;lcd.c: 300: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_LcdTrackLineNum_U8]);
  2170  0013A2  5055               	movf	_v_LcdTrackLineNum_U8,w,c
  2171  0013A4  0D01               	mullw	1
  2172  0013A6  0E56               	movlw	low _ARR_LcdLineNumAddress_U8
  2173  0013A8  24F3               	addwf	prodl,w,c
  2174  0013AA  6ED9               	movwf	fsr2l,c
  2175  0013AC  0E00               	movlw	high _ARR_LcdLineNumAddress_U8
  2176  0013AE  20F4               	addwfc	prodh,w,c
  2177  0013B0  6EDA               	movwf	fsr2h,c
  2178  0013B2  50DF               	movf	indf2,w,c
  2179  0013B4  EC9A  F009         	call	_LCD_CmdWrite
  2180  0013B8  0012               	return		;funcret
  2181  0013BA                     __end_of_LCD_GoToNextLine:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           prodh	equ	0xFF4
  2188                           prodl	equ	0xFF3
  2189                           postinc0	equ	0xFEE
  2190                           wreg	equ	0xFE8
  2191                           postdec1	equ	0xFE5
  2192                           fsr1l	equ	0xFE1
  2193                           indf2	equ	0xFDF
  2194                           postinc2	equ	0xFDE
  2195                           postdec2	equ	0xFDD
  2196                           fsr2h	equ	0xFDA
  2197                           fsr2l	equ	0xFD9
  2198                           status	equ	0xFD8
  2199                           
  2200 ;; *************** function _LCD_Init *****************
  2201 ;; Defined at:
  2202 ;;		line 198 in file "../00-libfiles/lcd.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  v_lcdNoOfLin    1    wreg     unsigned char 
  2205 ;;  v_MaxCharsPe    1    8[COMRAM] unsigned char 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  v_lcdNoOfLin    1    9[COMRAM] unsigned char 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2217 ;;      Params:         1       0       0       0       0       0       0
  2218 ;;      Locals:         1       0       0       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0       0       0
  2220 ;;      Totals:         2       0       0       0       0       0       0
  2221 ;;Total ram usage:        2 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    6
  2224 ;; This function calls:
  2225 ;;		_DELAY_ms
  2226 ;;		_LCD_Clear
  2227 ;;		_LCD_CmdWrite
  2228 ;;		_lcd_Reset
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text10
  2235  001114                     __ptext10:
  2236                           	opt stack 0
  2237  001114                     _LCD_Init:
  2238                           	opt stack 24
  2239                           
  2240                           ;incstack = 0
  2241                           ;LCD_Init@v_lcdNoOfLines_u8 stored from wreg
  2242  001114  6E0A               	movwf	LCD_Init@v_lcdNoOfLines_u8,c
  2243                           
  2244                           ;lcd.c: 202: LCDConfig.v_MaxSupportedChars_U8 = v_MaxCharsPerLine_u8;
  2245  001116  C009  F047         	movff	LCD_Init@v_MaxCharsPerLine_u8,_LCDConfig+1
  2246                           
  2247                           ;lcd.c: 203: LCDConfig.v_MaxSupportedLines_U8 = v_lcdNoOfLines_u8;
  2248  00111A  C00A  F046         	movff	LCD_Init@v_lcdNoOfLines_u8,_LCDConfig
  2249                           
  2250                           ;lcd.c: 204: if(v_lcdNoOfLines_u8 > 0x02)
  2251  00111E  0E02               	movlw	2
  2252  001120  640A               	cpfsgt	LCD_Init@v_lcdNoOfLines_u8,c
  2253  001122  D008               	goto	l1759
  2254                           
  2255                           ;lcd.c: 205: {
  2256                           ;lcd.c: 206: ARR_LcdLineNumAddress_U8[0x02] = 0x90 + (v_MaxCharsPerLine_u8 & 0x0fu);
  2257  001124  5009               	movf	LCD_Init@v_MaxCharsPerLine_u8,w,c
  2258  001126  0B0F               	andlw	15
  2259  001128  0F90               	addlw	144
  2260  00112A  6E58               	movwf	_ARR_LcdLineNumAddress_U8+2,c
  2261                           
  2262                           ;lcd.c: 207: ARR_LcdLineNumAddress_U8[0x03] = 0xd0 + (v_MaxCharsPerLine_u8 & 0x0fu);
  2263  00112C  5009               	movf	LCD_Init@v_MaxCharsPerLine_u8,w,c
  2264  00112E  0B0F               	andlw	15
  2265  001130  0FD0               	addlw	208
  2266  001132  6E59               	movwf	_ARR_LcdLineNumAddress_U8+3,c
  2267  001134                     l1759:
  2268                           
  2269                           ;lcd.c: 208: }
  2270                           ;lcd.c: 210: DELAY_ms(100);
  2271  001134  0E00               	movlw	0
  2272  001136  6E04               	movwf	DELAY_ms@ms_count+1,c
  2273  001138  0E64               	movlw	100
  2274  00113A  6E03               	movwf	DELAY_ms@ms_count,c
  2275  00113C  EC05  F00A         	call	_DELAY_ms	;wreg free
  2276                           
  2277                           ;lcd.c: 212: if(LCDConfig.v_LcdMode_U8 == 8u)
  2278  001140  0E08               	movlw	8
  2279  001142  1848               	xorwf	_LCDConfig+2,w,c
  2280  001144  A4D8               	btfss	status,2,c
  2281  001146  D004               	goto	l1765
  2282                           
  2283                           ;lcd.c: 213: {
  2284                           ;lcd.c: 214: LCD_CmdWrite(0x38u);
  2285  001148  0E38               	movlw	56
  2286  00114A  EC9A  F009         	call	_LCD_CmdWrite
  2287                           
  2288                           ;lcd.c: 215: }
  2289  00114E  D009               	goto	l172
  2290  001150                     l1765:
  2291                           
  2292                           ;lcd.c: 216: else if(LCDConfig.v_LcdMode_U8 == 4u)
  2293  001150  0E04               	movlw	4
  2294  001152  1848               	xorwf	_LCDConfig+2,w,c
  2295  001154  A4D8               	btfss	status,2,c
  2296  001156  D005               	goto	l172
  2297                           
  2298                           ;lcd.c: 217: {
  2299                           ;lcd.c: 218: lcd_Reset();
  2300  001158  ECB7  F008         	call	_lcd_Reset	;wreg free
  2301                           
  2302                           ;lcd.c: 219: LCD_CmdWrite(0x28u);
  2303  00115C  0E28               	movlw	40
  2304  00115E  EC9A  F009         	call	_LCD_CmdWrite
  2305  001162                     l172:
  2306                           
  2307                           ;lcd.c: 220: }
  2308                           ;lcd.c: 222: LCD_CmdWrite(0x0Eu);
  2309  001162  0E0E               	movlw	14
  2310  001164  EC9A  F009         	call	_LCD_CmdWrite
  2311                           
  2312                           ;lcd.c: 223: LCD_Clear();
  2313  001168  EC1D  F00A         	call	_LCD_Clear	;wreg free
  2314  00116C  0012               	return		;funcret
  2315  00116E                     __end_of_LCD_Init:
  2316                           	opt stack 0
  2317                           tblptru	equ	0xFF8
  2318                           tblptrh	equ	0xFF7
  2319                           tblptrl	equ	0xFF6
  2320                           tablat	equ	0xFF5
  2321                           prodh	equ	0xFF4
  2322                           prodl	equ	0xFF3
  2323                           postinc0	equ	0xFEE
  2324                           wreg	equ	0xFE8
  2325                           postdec1	equ	0xFE5
  2326                           fsr1l	equ	0xFE1
  2327                           indf2	equ	0xFDF
  2328                           postinc2	equ	0xFDE
  2329                           postdec2	equ	0xFDD
  2330                           fsr2h	equ	0xFDA
  2331                           fsr2l	equ	0xFD9
  2332                           status	equ	0xFD8
  2333                           
  2334 ;; *************** function _lcd_Reset *****************
  2335 ;; Defined at:
  2336 ;;		line 913 in file "../00-libfiles/lcd.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;		None
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;		None
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      void 
  2343 ;; Registers used:
  2344 ;;		wreg, status,2, status,0, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2350 ;;      Params:         0       0       0       0       0       0       0
  2351 ;;      Locals:         0       0       0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0
  2353 ;;      Totals:         0       0       0       0       0       0       0
  2354 ;;Total ram usage:        0 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    2
  2357 ;; This function calls:
  2358 ;;		_DELAY_ms
  2359 ;;		_DELAY_us
  2360 ;;		_lcd_SendCmdSignals
  2361 ;;		_lcd_SendHigherNibble
  2362 ;; This function is called by:
  2363 ;;		_LCD_Init
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text11
  2368  00116E                     __ptext11:
  2369                           	opt stack 0
  2370  00116E                     _lcd_Reset:
  2371                           	opt stack 27
  2372                           
  2373                           ;lcd.c: 916: lcd_SendHigherNibble(0x30);
  2374                           
  2375                           ;incstack = 0
  2376  00116E  0E30               	movlw	48
  2377  001170  EC0A  F009         	call	_lcd_SendHigherNibble
  2378                           
  2379                           ;lcd.c: 917: lcd_SendCmdSignals();
  2380  001174  EC66  F009         	call	_lcd_SendCmdSignals	;wreg free
  2381                           
  2382                           ;lcd.c: 918: DELAY_ms(100);
  2383  001178  0E00               	movlw	0
  2384  00117A  6E04               	movwf	DELAY_ms@ms_count+1,c
  2385  00117C  0E64               	movlw	100
  2386  00117E  6E03               	movwf	DELAY_ms@ms_count,c
  2387  001180  EC05  F00A         	call	_DELAY_ms	;wreg free
  2388                           
  2389                           ;lcd.c: 919: lcd_SendHigherNibble(0x30);
  2390  001184  0E30               	movlw	48
  2391  001186  EC0A  F009         	call	_lcd_SendHigherNibble
  2392                           
  2393                           ;lcd.c: 920: lcd_SendCmdSignals();
  2394  00118A  EC66  F009         	call	_lcd_SendCmdSignals	;wreg free
  2395                           
  2396                           ;lcd.c: 921: DELAY_us(200);
  2397  00118E  0E00               	movlw	0
  2398  001190  6E02               	movwf	DELAY_us@us_count+1,c
  2399  001192  0EC8               	movlw	200
  2400  001194  6E01               	movwf	DELAY_us@us_count,c
  2401  001196  EC14  F00A         	call	_DELAY_us	;wreg free
  2402                           
  2403                           ;lcd.c: 922: lcd_SendHigherNibble(0x30);
  2404  00119A  0E30               	movlw	48
  2405  00119C  EC0A  F009         	call	_lcd_SendHigherNibble
  2406                           
  2407                           ;lcd.c: 923: lcd_SendCmdSignals();
  2408  0011A0  EC66  F009         	call	_lcd_SendCmdSignals	;wreg free
  2409                           
  2410                           ;lcd.c: 924: DELAY_us(200);
  2411  0011A4  0E00               	movlw	0
  2412  0011A6  6E02               	movwf	DELAY_us@us_count+1,c
  2413  0011A8  0EC8               	movlw	200
  2414  0011AA  6E01               	movwf	DELAY_us@us_count,c
  2415  0011AC  EC14  F00A         	call	_DELAY_us	;wreg free
  2416                           
  2417                           ;lcd.c: 925: lcd_SendHigherNibble(0x20);
  2418  0011B0  0E20               	movlw	32
  2419  0011B2  EC0A  F009         	call	_lcd_SendHigherNibble
  2420                           
  2421                           ;lcd.c: 926: lcd_SendCmdSignals();
  2422  0011B6  EC66  F009         	call	_lcd_SendCmdSignals	;wreg free
  2423                           
  2424                           ;lcd.c: 927: DELAY_us(200);
  2425  0011BA  0E00               	movlw	0
  2426  0011BC  6E02               	movwf	DELAY_us@us_count+1,c
  2427  0011BE  0EC8               	movlw	200
  2428  0011C0  6E01               	movwf	DELAY_us@us_count,c
  2429  0011C2  EC14  F00A         	call	_DELAY_us	;wreg free
  2430  0011C6  0012               	return		;funcret
  2431  0011C8                     __end_of_lcd_Reset:
  2432                           	opt stack 0
  2433                           tblptru	equ	0xFF8
  2434                           tblptrh	equ	0xFF7
  2435                           tblptrl	equ	0xFF6
  2436                           tablat	equ	0xFF5
  2437                           prodh	equ	0xFF4
  2438                           prodl	equ	0xFF3
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           postdec1	equ	0xFE5
  2442                           fsr1l	equ	0xFE1
  2443                           indf2	equ	0xFDF
  2444                           postinc2	equ	0xFDE
  2445                           postdec2	equ	0xFDD
  2446                           fsr2h	equ	0xFDA
  2447                           fsr2l	equ	0xFD9
  2448                           status	equ	0xFD8
  2449                           
  2450 ;; *************** function _LCD_Clear *****************
  2451 ;; Defined at:
  2452 ;;		line 237 in file "../00-libfiles/lcd.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2466 ;;      Params:         0       0       0       0       0       0       0
  2467 ;;      Locals:         0       0       0       0       0       0       0
  2468 ;;      Temps:          0       0       0       0       0       0       0
  2469 ;;      Totals:         0       0       0       0       0       0       0
  2470 ;;Total ram usage:        0 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    5
  2473 ;; This function calls:
  2474 ;;		_LCD_CmdWrite
  2475 ;;		_LCD_GoToLine
  2476 ;; This function is called by:
  2477 ;;		_LCD_Init
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text12
  2482  00143A                     __ptext12:
  2483                           	opt stack 0
  2484  00143A                     _LCD_Clear:
  2485                           	opt stack 24
  2486                           
  2487                           ;lcd.c: 239: LCD_CmdWrite(0x01u);
  2488                           
  2489                           ;incstack = 0
  2490  00143A  0E01               	movlw	1
  2491  00143C  EC9A  F009         	call	_LCD_CmdWrite
  2492                           
  2493                           ;lcd.c: 240: LCD_GoToLine(0x00);
  2494  001440  0E00               	movlw	0
  2495  001442  ECDD  F009         	call	_LCD_GoToLine
  2496  001446  0012               	return		;funcret
  2497  001448                     __end_of_LCD_Clear:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           tblptrh	equ	0xFF7
  2501                           tblptrl	equ	0xFF6
  2502                           tablat	equ	0xFF5
  2503                           prodh	equ	0xFF4
  2504                           prodl	equ	0xFF3
  2505                           postinc0	equ	0xFEE
  2506                           wreg	equ	0xFE8
  2507                           postdec1	equ	0xFE5
  2508                           fsr1l	equ	0xFE1
  2509                           indf2	equ	0xFDF
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           fsr2h	equ	0xFDA
  2513                           fsr2l	equ	0xFD9
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function _LCD_GoToLine *****************
  2517 ;; Defined at:
  2518 ;;		line 265 in file "../00-libfiles/lcd.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  v_lineNumber    1    wreg     unsigned char 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  v_lineNumber    1    7[COMRAM] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2532 ;;      Params:         0       0       0       0       0       0       0
  2533 ;;      Locals:         1       0       0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0
  2535 ;;      Totals:         1       0       0       0       0       0       0
  2536 ;;Total ram usage:        1 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    4
  2539 ;; This function calls:
  2540 ;;		_LCD_CmdWrite
  2541 ;; This function is called by:
  2542 ;;		_LCD_Clear
  2543 ;;		_main
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text13
  2548  0013BA                     __ptext13:
  2549                           	opt stack 0
  2550  0013BA                     _LCD_GoToLine:
  2551                           	opt stack 24
  2552                           
  2553                           ;incstack = 0
  2554                           ;LCD_GoToLine@v_lineNumber_u8 stored from wreg
  2555  0013BA  6E08               	movwf	LCD_GoToLine@v_lineNumber_u8,c
  2556                           
  2557                           ;lcd.c: 267: if(v_lineNumber_u8 < LCDConfig.v_MaxSupportedLines_U8)
  2558  0013BC  5046               	movf	_LCDConfig,w,c
  2559  0013BE  5C08               	subwf	LCD_GoToLine@v_lineNumber_u8,w,c
  2560  0013C0  B0D8               	btfsc	status,0,c
  2561  0013C2  0012               	return	
  2562                           
  2563                           ;lcd.c: 268: {
  2564                           ;lcd.c: 271: v_LcdTrackCursorPos_U8 = 0x00;
  2565  0013C4  0E00               	movlw	0
  2566  0013C6  6E54               	movwf	_v_LcdTrackCursorPos_U8,c
  2567                           
  2568                           ;lcd.c: 272: v_LcdTrackLineNum_U8 = v_lineNumber_u8;
  2569  0013C8  C008  F055         	movff	LCD_GoToLine@v_lineNumber_u8,_v_LcdTrackLineNum_U8
  2570                           
  2571                           ;lcd.c: 273: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_lineNumber_u8]);
  2572  0013CC  5008               	movf	LCD_GoToLine@v_lineNumber_u8,w,c
  2573  0013CE  0D01               	mullw	1
  2574  0013D0  0E56               	movlw	low _ARR_LcdLineNumAddress_U8
  2575  0013D2  24F3               	addwf	prodl,w,c
  2576  0013D4  6ED9               	movwf	fsr2l,c
  2577  0013D6  0E00               	movlw	high _ARR_LcdLineNumAddress_U8
  2578  0013D8  20F4               	addwfc	prodh,w,c
  2579  0013DA  6EDA               	movwf	fsr2h,c
  2580  0013DC  50DF               	movf	indf2,w,c
  2581  0013DE  EC9A  F009         	call	_LCD_CmdWrite
  2582  0013E2  0012               	return	
  2583  0013E4                     __end_of_LCD_GoToLine:
  2584                           	opt stack 0
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           prodh	equ	0xFF4
  2590                           prodl	equ	0xFF3
  2591                           postinc0	equ	0xFEE
  2592                           wreg	equ	0xFE8
  2593                           postdec1	equ	0xFE5
  2594                           fsr1l	equ	0xFE1
  2595                           indf2	equ	0xFDF
  2596                           postinc2	equ	0xFDE
  2597                           postdec2	equ	0xFDD
  2598                           fsr2h	equ	0xFDA
  2599                           fsr2l	equ	0xFD9
  2600                           status	equ	0xFD8
  2601                           
  2602 ;; *************** function _LCD_CmdWrite *****************
  2603 ;; Defined at:
  2604 ;;		line 358 in file "../00-libfiles/lcd.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  v_lcdCmd_u8     1    wreg     unsigned char 
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  v_lcdCmd_u8     1    6[COMRAM] unsigned char 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, status,2, status,0, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2618 ;;      Params:         0       0       0       0       0       0       0
  2619 ;;      Locals:         1       0       0       0       0       0       0
  2620 ;;      Temps:          0       0       0       0       0       0       0
  2621 ;;      Totals:         1       0       0       0       0       0       0
  2622 ;;Total ram usage:        1 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    3
  2625 ;; This function calls:
  2626 ;;		_lcd_BusyCheck
  2627 ;;		_lcd_SendCmdSignals
  2628 ;;		_lcd_SendHigherNibble
  2629 ;;		_lcd_SendLowerNibble
  2630 ;; This function is called by:
  2631 ;;		_LCD_Init
  2632 ;;		_LCD_Clear
  2633 ;;		_LCD_GoToLine
  2634 ;;		_LCD_GoToNextLine
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text14
  2639  001334                     __ptext14:
  2640                           	opt stack 0
  2641  001334                     _LCD_CmdWrite:
  2642                           	opt stack 23
  2643                           
  2644                           ;incstack = 0
  2645                           ;LCD_CmdWrite@v_lcdCmd_u8 stored from wreg
  2646  001334  6E07               	movwf	LCD_CmdWrite@v_lcdCmd_u8,c
  2647                           
  2648                           ;lcd.c: 360: lcd_BusyCheck();
  2649  001336  ECB7  F007         	call	_lcd_BusyCheck	;wreg free
  2650                           
  2651                           ;lcd.c: 361: if(LCDConfig.v_LcdMode_U8 == 8u)
  2652  00133A  0E08               	movlw	8
  2653  00133C  1848               	xorwf	_LCDConfig+2,w,c
  2654  00133E  A4D8               	btfss	status,2,c
  2655  001340  D004               	goto	l1555
  2656                           
  2657                           ;lcd.c: 362: {
  2658                           ;lcd.c: 363: lcd_SendLowerNibble(v_lcdCmd_u8);
  2659  001342  5007               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2660  001344  ECE4  F008         	call	_lcd_SendLowerNibble
  2661                           
  2662                           ;lcd.c: 364: }
  2663  001348  D008               	goto	l1559
  2664  00134A                     l1555:
  2665                           
  2666                           ;lcd.c: 365: else
  2667                           ;lcd.c: 366: {
  2668                           ;lcd.c: 367: lcd_SendHigherNibble(v_lcdCmd_u8);
  2669  00134A  5007               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2670  00134C  EC0A  F009         	call	_lcd_SendHigherNibble
  2671                           
  2672                           ;lcd.c: 368: lcd_SendCmdSignals();
  2673  001350  EC66  F009         	call	_lcd_SendCmdSignals	;wreg free
  2674                           
  2675                           ;lcd.c: 369: v_lcdCmd_u8 = v_lcdCmd_u8 << 4;
  2676  001354  3807               	swapf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2677  001356  0BF0               	andlw	240
  2678  001358  6E07               	movwf	LCD_CmdWrite@v_lcdCmd_u8,c
  2679  00135A                     l1559:
  2680                           
  2681                           ;lcd.c: 370: }
  2682                           ;lcd.c: 372: lcd_SendHigherNibble(v_lcdCmd_u8);
  2683  00135A  5007               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2684  00135C  EC0A  F009         	call	_lcd_SendHigherNibble
  2685                           
  2686                           ;lcd.c: 373: lcd_SendCmdSignals();
  2687  001360  EC66  F009         	call	_lcd_SendCmdSignals	;wreg free
  2688  001364  0012               	return		;funcret
  2689  001366                     __end_of_LCD_CmdWrite:
  2690                           	opt stack 0
  2691                           tblptru	equ	0xFF8
  2692                           tblptrh	equ	0xFF7
  2693                           tblptrl	equ	0xFF6
  2694                           tablat	equ	0xFF5
  2695                           prodh	equ	0xFF4
  2696                           prodl	equ	0xFF3
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           postdec1	equ	0xFE5
  2700                           fsr1l	equ	0xFE1
  2701                           indf2	equ	0xFDF
  2702                           postinc2	equ	0xFDE
  2703                           postdec2	equ	0xFDD
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _lcd_SendLowerNibble *****************
  2709 ;; Defined at:
  2710 ;;		line 962 in file "../00-libfiles/lcd.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  dataByte        1    wreg     unsigned char 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  dataByte        1    5[COMRAM] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2724 ;;      Params:         0       0       0       0       0       0       0
  2725 ;;      Locals:         1       0       0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0
  2727 ;;      Totals:         1       0       0       0       0       0       0
  2728 ;;Total ram usage:        1 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    1
  2731 ;; This function calls:
  2732 ;;		_GPIO_PinWrite
  2733 ;; This function is called by:
  2734 ;;		_LCD_CmdWrite
  2735 ;;		_lcd_DataWrite
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text15
  2740  0011C8                     __ptext15:
  2741                           	opt stack 0
  2742  0011C8                     _lcd_SendLowerNibble:
  2743                           	opt stack 25
  2744                           
  2745                           ;incstack = 0
  2746                           ;lcd_SendLowerNibble@dataByte stored from wreg
  2747  0011C8  6E06               	movwf	lcd_SendLowerNibble@dataByte,c
  2748                           
  2749                           ;lcd.c: 964: GPIO_PinWrite(LCDConfig.D0,(((dataByte)&(((uint8_t)1<<(0))))!=0u));
  2750  0011CA  A006               	btfss	lcd_SendLowerNibble@dataByte,0,c
  2751  0011CC  D002               	goto	u1580
  2752  0011CE  0E01               	movlw	1
  2753  0011D0  D001               	goto	u1590
  2754  0011D2                     u1580:
  2755  0011D2  0E00               	movlw	0
  2756  0011D4                     u1590:
  2757  0011D4  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2758  0011D6  504C               	movf	_LCDConfig+6,w,c
  2759  0011D8  EC8E  F005         	call	_GPIO_PinWrite
  2760                           
  2761                           ;lcd.c: 965: GPIO_PinWrite(LCDConfig.D1,(((dataByte)&(((uint8_t)1<<(1))))!=0u));
  2762  0011DC  A206               	btfss	lcd_SendLowerNibble@dataByte,1,c
  2763  0011DE  D002               	goto	u1600
  2764  0011E0  0E01               	movlw	1
  2765  0011E2  D001               	goto	u1610
  2766  0011E4                     u1600:
  2767  0011E4  0E00               	movlw	0
  2768  0011E6                     u1610:
  2769  0011E6  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2770  0011E8  504D               	movf	_LCDConfig+7,w,c
  2771  0011EA  EC8E  F005         	call	_GPIO_PinWrite
  2772                           
  2773                           ;lcd.c: 966: GPIO_PinWrite(LCDConfig.D2,(((dataByte)&(((uint8_t)1<<(2))))!=0u));
  2774  0011EE  A406               	btfss	lcd_SendLowerNibble@dataByte,2,c
  2775  0011F0  D002               	goto	u1620
  2776  0011F2  0E01               	movlw	1
  2777  0011F4  D001               	goto	u1630
  2778  0011F6                     u1620:
  2779  0011F6  0E00               	movlw	0
  2780  0011F8                     u1630:
  2781  0011F8  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2782  0011FA  504E               	movf	_LCDConfig+8,w,c
  2783  0011FC  EC8E  F005         	call	_GPIO_PinWrite
  2784                           
  2785                           ;lcd.c: 967: GPIO_PinWrite(LCDConfig.D3,(((dataByte)&(((uint8_t)1<<(3))))!=0u));
  2786  001200  A606               	btfss	lcd_SendLowerNibble@dataByte,3,c
  2787  001202  D002               	goto	u1640
  2788  001204  0E01               	movlw	1
  2789  001206  D001               	goto	u1650
  2790  001208                     u1640:
  2791  001208  0E00               	movlw	0
  2792  00120A                     u1650:
  2793  00120A  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2794  00120C  504F               	movf	_LCDConfig+9,w,c
  2795  00120E  EC8E  F005         	call	_GPIO_PinWrite
  2796  001212  0012               	return		;funcret
  2797  001214                     __end_of_lcd_SendLowerNibble:
  2798                           	opt stack 0
  2799                           tblptru	equ	0xFF8
  2800                           tblptrh	equ	0xFF7
  2801                           tblptrl	equ	0xFF6
  2802                           tablat	equ	0xFF5
  2803                           prodh	equ	0xFF4
  2804                           prodl	equ	0xFF3
  2805                           postinc0	equ	0xFEE
  2806                           wreg	equ	0xFE8
  2807                           postdec1	equ	0xFE5
  2808                           fsr1l	equ	0xFE1
  2809                           indf2	equ	0xFDF
  2810                           postinc2	equ	0xFDE
  2811                           postdec2	equ	0xFDD
  2812                           fsr2h	equ	0xFDA
  2813                           fsr2l	equ	0xFD9
  2814                           status	equ	0xFD8
  2815                           
  2816 ;; *************** function _lcd_SendHigherNibble *****************
  2817 ;; Defined at:
  2818 ;;		line 943 in file "../00-libfiles/lcd.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;  dataByte        1    wreg     unsigned char 
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  dataByte        1    5[COMRAM] unsigned char 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		wreg, status,2, status,0, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2832 ;;      Params:         0       0       0       0       0       0       0
  2833 ;;      Locals:         1       0       0       0       0       0       0
  2834 ;;      Temps:          0       0       0       0       0       0       0
  2835 ;;      Totals:         1       0       0       0       0       0       0
  2836 ;;Total ram usage:        1 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    1
  2839 ;; This function calls:
  2840 ;;		_GPIO_PinWrite
  2841 ;; This function is called by:
  2842 ;;		_LCD_CmdWrite
  2843 ;;		_lcd_DataWrite
  2844 ;;		_lcd_Reset
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text16
  2849  001214                     __ptext16:
  2850                           	opt stack 0
  2851  001214                     _lcd_SendHigherNibble:
  2852                           	opt stack 25
  2853                           
  2854                           ;incstack = 0
  2855                           ;lcd_SendHigherNibble@dataByte stored from wreg
  2856  001214  6E06               	movwf	lcd_SendHigherNibble@dataByte,c
  2857                           
  2858                           ;lcd.c: 945: GPIO_PinWrite(LCDConfig.D4,(((dataByte)&(((uint8_t)1<<(4))))!=0u));
  2859  001216  A806               	btfss	lcd_SendHigherNibble@dataByte,4,c
  2860  001218  D002               	goto	u1660
  2861  00121A  0E01               	movlw	1
  2862  00121C  D001               	goto	u1670
  2863  00121E                     u1660:
  2864  00121E  0E00               	movlw	0
  2865  001220                     u1670:
  2866  001220  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2867  001222  5050               	movf	_LCDConfig+10,w,c
  2868  001224  EC8E  F005         	call	_GPIO_PinWrite
  2869                           
  2870                           ;lcd.c: 946: GPIO_PinWrite(LCDConfig.D5,(((dataByte)&(((uint8_t)1<<(5))))!=0u));
  2871  001228  AA06               	btfss	lcd_SendHigherNibble@dataByte,5,c
  2872  00122A  D002               	goto	u1680
  2873  00122C  0E01               	movlw	1
  2874  00122E  D001               	goto	u1690
  2875  001230                     u1680:
  2876  001230  0E00               	movlw	0
  2877  001232                     u1690:
  2878  001232  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2879  001234  5051               	movf	_LCDConfig+11,w,c
  2880  001236  EC8E  F005         	call	_GPIO_PinWrite
  2881                           
  2882                           ;lcd.c: 947: GPIO_PinWrite(LCDConfig.D6,(((dataByte)&(((uint8_t)1<<(6))))!=0u));
  2883  00123A  AC06               	btfss	lcd_SendHigherNibble@dataByte,6,c
  2884  00123C  D002               	goto	u1700
  2885  00123E  0E01               	movlw	1
  2886  001240  D001               	goto	u1710
  2887  001242                     u1700:
  2888  001242  0E00               	movlw	0
  2889  001244                     u1710:
  2890  001244  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2891  001246  5052               	movf	_LCDConfig+12,w,c
  2892  001248  EC8E  F005         	call	_GPIO_PinWrite
  2893                           
  2894                           ;lcd.c: 948: GPIO_PinWrite(LCDConfig.D7,(((dataByte)&(((uint8_t)1<<(7))))!=0u));
  2895  00124C  AE06               	btfss	lcd_SendHigherNibble@dataByte,7,c
  2896  00124E  D002               	goto	u1720
  2897  001250  0E01               	movlw	1
  2898  001252  D001               	goto	u1730
  2899  001254                     u1720:
  2900  001254  0E00               	movlw	0
  2901  001256                     u1730:
  2902  001256  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2903  001258  5053               	movf	_LCDConfig+13,w,c
  2904  00125A  EC8E  F005         	call	_GPIO_PinWrite
  2905  00125E  0012               	return		;funcret
  2906  001260                     __end_of_lcd_SendHigherNibble:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           prodh	equ	0xFF4
  2913                           prodl	equ	0xFF3
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           postdec1	equ	0xFE5
  2917                           fsr1l	equ	0xFE1
  2918                           indf2	equ	0xFDF
  2919                           postinc2	equ	0xFDE
  2920                           postdec2	equ	0xFDD
  2921                           fsr2h	equ	0xFDA
  2922                           fsr2l	equ	0xFD9
  2923                           status	equ	0xFD8
  2924                           
  2925 ;; *************** function _lcd_SendCmdSignals *****************
  2926 ;; Defined at:
  2927 ;;		line 981 in file "../00-libfiles/lcd.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;		None
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;		None
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		wreg, status,2, status,0, cstack
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2941 ;;      Params:         0       0       0       0       0       0       0
  2942 ;;      Locals:         0       0       0       0       0       0       0
  2943 ;;      Temps:          0       0       0       0       0       0       0
  2944 ;;      Totals:         0       0       0       0       0       0       0
  2945 ;;Total ram usage:        0 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    1
  2948 ;; This function calls:
  2949 ;;		_DELAY_us
  2950 ;;		_GPIO_PinWrite
  2951 ;; This function is called by:
  2952 ;;		_LCD_CmdWrite
  2953 ;;		_lcd_Reset
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text17
  2958  0012CC                     __ptext17:
  2959                           	opt stack 0
  2960  0012CC                     _lcd_SendCmdSignals:
  2961                           	opt stack 24
  2962                           
  2963                           ;lcd.c: 983: GPIO_PinWrite(LCDConfig.RS,0);
  2964                           
  2965                           ;incstack = 0
  2966  0012CC  0E00               	movlw	0
  2967  0012CE  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2968  0012D0  5049               	movf	_LCDConfig+3,w,c
  2969  0012D2  EC8E  F005         	call	_GPIO_PinWrite
  2970                           
  2971                           ;lcd.c: 984: GPIO_PinWrite(LCDConfig.RW,0);
  2972  0012D6  0E00               	movlw	0
  2973  0012D8  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2974  0012DA  504A               	movf	_LCDConfig+4,w,c
  2975  0012DC  EC8E  F005         	call	_GPIO_PinWrite
  2976                           
  2977                           ;lcd.c: 985: GPIO_PinWrite(LCDConfig.EN,1);
  2978  0012E0  0E01               	movlw	1
  2979  0012E2  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2980  0012E4  504B               	movf	_LCDConfig+5,w,c
  2981  0012E6  EC8E  F005         	call	_GPIO_PinWrite
  2982                           
  2983                           ;lcd.c: 986: DELAY_us(10);
  2984  0012EA  0E00               	movlw	0
  2985  0012EC  6E02               	movwf	DELAY_us@us_count+1,c
  2986  0012EE  0E0A               	movlw	10
  2987  0012F0  6E01               	movwf	DELAY_us@us_count,c
  2988  0012F2  EC14  F00A         	call	_DELAY_us	;wreg free
  2989                           
  2990                           ;lcd.c: 987: GPIO_PinWrite(LCDConfig.EN,0);
  2991  0012F6  0E00               	movlw	0
  2992  0012F8  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2993  0012FA  504B               	movf	_LCDConfig+5,w,c
  2994  0012FC  EC8E  F005         	call	_GPIO_PinWrite
  2995  001300  0012               	return		;funcret
  2996  001302                     __end_of_lcd_SendCmdSignals:
  2997                           	opt stack 0
  2998                           tblptru	equ	0xFF8
  2999                           tblptrh	equ	0xFF7
  3000                           tblptrl	equ	0xFF6
  3001                           tablat	equ	0xFF5
  3002                           prodh	equ	0xFF4
  3003                           prodl	equ	0xFF3
  3004                           postinc0	equ	0xFEE
  3005                           wreg	equ	0xFE8
  3006                           postdec1	equ	0xFE5
  3007                           fsr1l	equ	0xFE1
  3008                           indf2	equ	0xFDF
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _lcd_BusyCheck *****************
  3016 ;; Defined at:
  3017 ;;		line 860 in file "../00-libfiles/lcd.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  busyflag        1    5[COMRAM] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3031 ;;      Params:         0       0       0       0       0       0       0
  3032 ;;      Locals:         1       0       0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0
  3034 ;;      Totals:         1       0       0       0       0       0       0
  3035 ;;Total ram usage:        1 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    2
  3038 ;; This function calls:
  3039 ;;		_DELAY_ms
  3040 ;;		_DELAY_us
  3041 ;;		_GPIO_PinDirection
  3042 ;;		_GPIO_PinRead
  3043 ;;		_GPIO_PinWrite
  3044 ;; This function is called by:
  3045 ;;		_LCD_CmdWrite
  3046 ;;		_lcd_DataWrite
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text18
  3051  000F6E                     __ptext18:
  3052                           	opt stack 0
  3053  000F6E                     _lcd_BusyCheck:
  3054                           	opt stack 24
  3055                           
  3056                           ;lcd.c: 862: uint8_t busyflag;
  3057                           ;lcd.c: 864: if(LCDConfig.RW != P_NC)
  3058                           
  3059                           ;incstack = 0
  3060  000F6E  284A               	incf	_LCDConfig+4,w,c
  3061  000F70  B4D8               	btfsc	status,2,c
  3062  000F72  D04C               	goto	l1541
  3063                           
  3064                           ;lcd.c: 865: {
  3065                           ;lcd.c: 866: GPIO_PinDirection(LCDConfig.D7,0x01u);
  3066  000F74  0E01               	movlw	1
  3067  000F76  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  3068  000F78  5053               	movf	_LCDConfig+13,w,c
  3069  000F7A  EC3E  F006         	call	_GPIO_PinDirection
  3070                           
  3071                           ;lcd.c: 867: GPIO_PinWrite(LCDConfig.RS,0);
  3072  000F7E  0E00               	movlw	0
  3073  000F80  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3074  000F82  5049               	movf	_LCDConfig+3,w,c
  3075  000F84  EC8E  F005         	call	_GPIO_PinWrite
  3076                           
  3077                           ;lcd.c: 868: GPIO_PinWrite(LCDConfig.RW,1);
  3078  000F88  0E01               	movlw	1
  3079  000F8A  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3080  000F8C  504A               	movf	_LCDConfig+4,w,c
  3081  000F8E  EC8E  F005         	call	_GPIO_PinWrite
  3082  000F92                     l274:
  3083                           
  3084                           ;lcd.c: 870: {
  3085                           ;lcd.c: 872: GPIO_PinWrite(LCDConfig.EN,0);
  3086  000F92  0E00               	movlw	0
  3087  000F94  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3088  000F96  504B               	movf	_LCDConfig+5,w,c
  3089  000F98  EC8E  F005         	call	_GPIO_PinWrite
  3090                           
  3091                           ;lcd.c: 873: DELAY_us(10);
  3092  000F9C  0E00               	movlw	0
  3093  000F9E  6E02               	movwf	DELAY_us@us_count+1,c
  3094  000FA0  0E0A               	movlw	10
  3095  000FA2  6E01               	movwf	DELAY_us@us_count,c
  3096  000FA4  EC14  F00A         	call	_DELAY_us	;wreg free
  3097                           
  3098                           ;lcd.c: 874: GPIO_PinWrite(LCDConfig.EN,1);
  3099  000FA8  0E01               	movlw	1
  3100  000FAA  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3101  000FAC  504B               	movf	_LCDConfig+5,w,c
  3102  000FAE  EC8E  F005         	call	_GPIO_PinWrite
  3103                           
  3104                           ;lcd.c: 875: DELAY_us(10);
  3105  000FB2  0E00               	movlw	0
  3106  000FB4  6E02               	movwf	DELAY_us@us_count+1,c
  3107  000FB6  0E0A               	movlw	10
  3108  000FB8  6E01               	movwf	DELAY_us@us_count,c
  3109  000FBA  EC14  F00A         	call	_DELAY_us	;wreg free
  3110                           
  3111                           ;lcd.c: 876: busyflag = GPIO_PinRead(LCDConfig.D7);
  3112  000FBE  5053               	movf	_LCDConfig+13,w,c
  3113  000FC0  ECEE  F006         	call	_GPIO_PinRead
  3114  000FC4  6E06               	movwf	lcd_BusyCheck@busyflag,c
  3115                           
  3116                           ;lcd.c: 879: if(LCDConfig.v_LcdMode_U8 == 4)
  3117  000FC6  0E04               	movlw	4
  3118  000FC8  1848               	xorwf	_LCDConfig+2,w,c
  3119  000FCA  A4D8               	btfss	status,2,c
  3120  000FCC  D016               	goto	l1537
  3121                           
  3122                           ;lcd.c: 880: {
  3123                           ;lcd.c: 882: GPIO_PinWrite(LCDConfig.EN,0);
  3124  000FCE  0E00               	movlw	0
  3125  000FD0  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3126  000FD2  504B               	movf	_LCDConfig+5,w,c
  3127  000FD4  EC8E  F005         	call	_GPIO_PinWrite
  3128                           
  3129                           ;lcd.c: 883: DELAY_us(10);
  3130  000FD8  0E00               	movlw	0
  3131  000FDA  6E02               	movwf	DELAY_us@us_count+1,c
  3132  000FDC  0E0A               	movlw	10
  3133  000FDE  6E01               	movwf	DELAY_us@us_count,c
  3134  000FE0  EC14  F00A         	call	_DELAY_us	;wreg free
  3135                           
  3136                           ;lcd.c: 884: GPIO_PinWrite(LCDConfig.EN,1);
  3137  000FE4  0E01               	movlw	1
  3138  000FE6  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3139  000FE8  504B               	movf	_LCDConfig+5,w,c
  3140  000FEA  EC8E  F005         	call	_GPIO_PinWrite
  3141                           
  3142                           ;lcd.c: 885: DELAY_us(10);
  3143  000FEE  0E00               	movlw	0
  3144  000FF0  6E02               	movwf	DELAY_us@us_count+1,c
  3145  000FF2  0E0A               	movlw	10
  3146  000FF4  6E01               	movwf	DELAY_us@us_count,c
  3147  000FF6  EC14  F00A         	call	_DELAY_us	;wreg free
  3148  000FFA                     l1537:
  3149                           
  3150                           ;lcd.c: 886: }
  3151                           ;lcd.c: 887: }while(busyflag!=0);
  3152  000FFA  5006               	movf	lcd_BusyCheck@busyflag,w,c
  3153  000FFC  A4D8               	btfss	status,2,c
  3154  000FFE  D7C9               	goto	l274
  3155                           
  3156                           ;lcd.c: 889: GPIO_PinDirection(LCDConfig.D7,0x00u);
  3157  001000  0E00               	movlw	0
  3158  001002  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  3159  001004  5053               	movf	_LCDConfig+13,w,c
  3160  001006  EC3E  F006         	call	_GPIO_PinDirection
  3161                           
  3162                           ;lcd.c: 890: }
  3163  00100A  0012               	return	
  3164  00100C                     l1541:
  3165                           
  3166                           ;lcd.c: 891: else
  3167                           ;lcd.c: 892: {
  3168                           ;lcd.c: 895: DELAY_ms(1);
  3169  00100C  0E00               	movlw	0
  3170  00100E  6E04               	movwf	DELAY_ms@ms_count+1,c
  3171  001010  0E01               	movlw	1
  3172  001012  6E03               	movwf	DELAY_ms@ms_count,c
  3173  001014  EC05  F00A         	call	_DELAY_ms	;wreg free
  3174  001018  0012               	return	
  3175  00101A                     __end_of_lcd_BusyCheck:
  3176                           	opt stack 0
  3177                           tblptru	equ	0xFF8
  3178                           tblptrh	equ	0xFF7
  3179                           tblptrl	equ	0xFF6
  3180                           tablat	equ	0xFF5
  3181                           prodh	equ	0xFF4
  3182                           prodl	equ	0xFF3
  3183                           postinc0	equ	0xFEE
  3184                           wreg	equ	0xFE8
  3185                           postdec1	equ	0xFE5
  3186                           fsr1l	equ	0xFE1
  3187                           indf2	equ	0xFDF
  3188                           postinc2	equ	0xFDE
  3189                           postdec2	equ	0xFDD
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _GPIO_PinWrite *****************
  3195 ;; Defined at:
  3196 ;;		line 127 in file "../00-libfiles/gpio.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  enm_pinNumbe    1    wreg     enum E3211
  3199 ;;  var_pinValue    1    0[COMRAM] unsigned char 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  3202 ;;  var_portNumb    1    3[COMRAM] unsigned char 
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      void 
  3205 ;; Registers used:
  3206 ;;		wreg, status,2, status,0
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3212 ;;      Params:         1       0       0       0       0       0       0
  3213 ;;      Locals:         2       0       0       0       0       0       0
  3214 ;;      Temps:          2       0       0       0       0       0       0
  3215 ;;      Totals:         5       0       0       0       0       0       0
  3216 ;;Total ram usage:        5 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; This function calls:
  3219 ;;		Nothing
  3220 ;; This function is called by:
  3221 ;;		_lcd_BusyCheck
  3222 ;;		_lcd_SendHigherNibble
  3223 ;;		_lcd_SendLowerNibble
  3224 ;;		_lcd_SendCmdSignals
  3225 ;;		_lcd_SendDataSignals
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text19
  3230  000B1C                     __ptext19:
  3231                           	opt stack 0
  3232  000B1C                     _GPIO_PinWrite:
  3233                           	opt stack 25
  3234                           
  3235                           ;incstack = 0
  3236                           ;GPIO_PinWrite@enm_pinNumber stored from wreg
  3237  000B1C  6E05               	movwf	GPIO_PinWrite@enm_pinNumber,c
  3238                           
  3239                           ;gpio.c: 130: uint8_t var_portNumber_u8;
  3240                           ;gpio.c: 133: var_portNumber_u8 = (enm_pinNumber>>3);
  3241  000B1E  3805               	swapf	GPIO_PinWrite@enm_pinNumber,w,c
  3242  000B20  46E8               	rlncf	wreg,f,c
  3243  000B22  0B1F               	andlw	31
  3244  000B24  6E04               	movwf	GPIO_PinWrite@var_portNumber_u8,c
  3245                           
  3246                           ;gpio.c: 134: enm_pinNumber = enm_pinNumber & 0x07;
  3247  000B26  5005               	movf	GPIO_PinWrite@enm_pinNumber,w,c
  3248  000B28  0B07               	andlw	7
  3249  000B2A  6E05               	movwf	GPIO_PinWrite@enm_pinNumber,c
  3250                           
  3251                           ;gpio.c: 138: switch(var_portNumber_u8)
  3252  000B2C  D096               	goto	l1503
  3253  000B2E                     l1471:
  3254                           
  3255                           ;gpio.c: 142: ((var_pinValue_u8)? ((LATA) |= ((uint8_t)1<<(enm_pinNumber))): ((LATA) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3256  000B2E  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3257  000B30  B4D8               	btfsc	status,2,c
  3258  000B32  D00D               	goto	l1475
  3259  000B34  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3260  000B38  0E01               	movlw	1
  3261  000B3A  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3262  000B3C  2A02               	incf	??_GPIO_PinWrite,f,c
  3263  000B3E  D002               	goto	u1264
  3264  000B40                     u1265:
  3265  000B40  90D8               	bcf	status,0,c
  3266  000B42  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3267  000B44                     u1264:
  3268  000B44  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3269  000B46  D7FC               	goto	u1265
  3270  000B48  5003               	movf	??_GPIO_PinWrite+1,w,c
  3271  000B4A  1289               	iorwf	3977,f,c	;volatile
  3272  000B4C  0012               	return	
  3273  000B4E                     l1475:
  3274  000B4E  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3275  000B52  0E01               	movlw	1
  3276  000B54  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3277  000B56  2A02               	incf	??_GPIO_PinWrite,f,c
  3278  000B58  D002               	goto	u1274
  3279  000B5A                     u1275:
  3280  000B5A  90D8               	bcf	status,0,c
  3281  000B5C  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3282  000B5E                     u1274:
  3283  000B5E  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3284  000B60  D7FC               	goto	u1275
  3285  000B62  5003               	movf	??_GPIO_PinWrite+1,w,c
  3286  000B64  0AFF               	xorlw	255
  3287  000B66  1689               	andwf	3977,f,c	;volatile
  3288                           
  3289                           ;gpio.c: 143: break;
  3290  000B68  0012               	return	
  3291  000B6A                     l1477:
  3292                           
  3293                           ;gpio.c: 148: ((var_pinValue_u8)? ((LATB) |= ((uint8_t)1<<(enm_pinNumber))): ((LATB) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3294  000B6A  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3295  000B6C  B4D8               	btfsc	status,2,c
  3296  000B6E  D00D               	goto	l1481
  3297  000B70  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3298  000B74  0E01               	movlw	1
  3299  000B76  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3300  000B78  2A02               	incf	??_GPIO_PinWrite,f,c
  3301  000B7A  D002               	goto	u1294
  3302  000B7C                     u1295:
  3303  000B7C  90D8               	bcf	status,0,c
  3304  000B7E  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3305  000B80                     u1294:
  3306  000B80  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3307  000B82  D7FC               	goto	u1295
  3308  000B84  5003               	movf	??_GPIO_PinWrite+1,w,c
  3309  000B86  128A               	iorwf	3978,f,c	;volatile
  3310  000B88  0012               	return	
  3311  000B8A                     l1481:
  3312  000B8A  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3313  000B8E  0E01               	movlw	1
  3314  000B90  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3315  000B92  2A02               	incf	??_GPIO_PinWrite,f,c
  3316  000B94  D002               	goto	u1304
  3317  000B96                     u1305:
  3318  000B96  90D8               	bcf	status,0,c
  3319  000B98  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3320  000B9A                     u1304:
  3321  000B9A  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3322  000B9C  D7FC               	goto	u1305
  3323  000B9E  5003               	movf	??_GPIO_PinWrite+1,w,c
  3324  000BA0  0AFF               	xorlw	255
  3325  000BA2  168A               	andwf	3978,f,c	;volatile
  3326                           
  3327                           ;gpio.c: 149: break;
  3328  000BA4  0012               	return	
  3329  000BA6                     l1483:
  3330                           
  3331                           ;gpio.c: 154: ((var_pinValue_u8)? ((LATC) |= ((uint8_t)1<<(enm_pinNumber))): ((LATC) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3332  000BA6  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3333  000BA8  B4D8               	btfsc	status,2,c
  3334  000BAA  D00D               	goto	l1487
  3335  000BAC  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3336  000BB0  0E01               	movlw	1
  3337  000BB2  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3338  000BB4  2A02               	incf	??_GPIO_PinWrite,f,c
  3339  000BB6  D002               	goto	u1324
  3340  000BB8                     u1325:
  3341  000BB8  90D8               	bcf	status,0,c
  3342  000BBA  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3343  000BBC                     u1324:
  3344  000BBC  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3345  000BBE  D7FC               	goto	u1325
  3346  000BC0  5003               	movf	??_GPIO_PinWrite+1,w,c
  3347  000BC2  128B               	iorwf	3979,f,c	;volatile
  3348  000BC4  0012               	return	
  3349  000BC6                     l1487:
  3350  000BC6  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3351  000BCA  0E01               	movlw	1
  3352  000BCC  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3353  000BCE  2A02               	incf	??_GPIO_PinWrite,f,c
  3354  000BD0  D002               	goto	u1334
  3355  000BD2                     u1335:
  3356  000BD2  90D8               	bcf	status,0,c
  3357  000BD4  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3358  000BD6                     u1334:
  3359  000BD6  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3360  000BD8  D7FC               	goto	u1335
  3361  000BDA  5003               	movf	??_GPIO_PinWrite+1,w,c
  3362  000BDC  0AFF               	xorlw	255
  3363  000BDE  168B               	andwf	3979,f,c	;volatile
  3364                           
  3365                           ;gpio.c: 155: break;
  3366  000BE0  0012               	return	
  3367  000BE2                     l1489:
  3368                           
  3369                           ;gpio.c: 160: ((var_pinValue_u8)? ((LATD) |= ((uint8_t)1<<(enm_pinNumber))): ((LATD) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3370  000BE2  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3371  000BE4  B4D8               	btfsc	status,2,c
  3372  000BE6  D00D               	goto	l1493
  3373  000BE8  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3374  000BEC  0E01               	movlw	1
  3375  000BEE  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3376  000BF0  2A02               	incf	??_GPIO_PinWrite,f,c
  3377  000BF2  D002               	goto	u1354
  3378  000BF4                     u1355:
  3379  000BF4  90D8               	bcf	status,0,c
  3380  000BF6  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3381  000BF8                     u1354:
  3382  000BF8  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3383  000BFA  D7FC               	goto	u1355
  3384  000BFC  5003               	movf	??_GPIO_PinWrite+1,w,c
  3385  000BFE  128C               	iorwf	3980,f,c	;volatile
  3386  000C00  0012               	return	
  3387  000C02                     l1493:
  3388  000C02  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3389  000C06  0E01               	movlw	1
  3390  000C08  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3391  000C0A  2A02               	incf	??_GPIO_PinWrite,f,c
  3392  000C0C  D002               	goto	u1364
  3393  000C0E                     u1365:
  3394  000C0E  90D8               	bcf	status,0,c
  3395  000C10  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3396  000C12                     u1364:
  3397  000C12  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3398  000C14  D7FC               	goto	u1365
  3399  000C16  5003               	movf	??_GPIO_PinWrite+1,w,c
  3400  000C18  0AFF               	xorlw	255
  3401  000C1A  168C               	andwf	3980,f,c	;volatile
  3402                           
  3403                           ;gpio.c: 161: break;
  3404  000C1C  0012               	return	
  3405  000C1E                     l1495:
  3406                           
  3407                           ;gpio.c: 166: ((var_pinValue_u8)? ((LATE) |= ((uint8_t)1<<(enm_pinNumber))): ((LATE) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3408  000C1E  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3409  000C20  B4D8               	btfsc	status,2,c
  3410  000C22  D00D               	goto	l1499
  3411  000C24  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3412  000C28  0E01               	movlw	1
  3413  000C2A  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3414  000C2C  2A02               	incf	??_GPIO_PinWrite,f,c
  3415  000C2E  D002               	goto	u1384
  3416  000C30                     u1385:
  3417  000C30  90D8               	bcf	status,0,c
  3418  000C32  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3419  000C34                     u1384:
  3420  000C34  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3421  000C36  D7FC               	goto	u1385
  3422  000C38  5003               	movf	??_GPIO_PinWrite+1,w,c
  3423  000C3A  128D               	iorwf	3981,f,c	;volatile
  3424  000C3C  0012               	return	
  3425  000C3E                     l1499:
  3426  000C3E  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3427  000C42  0E01               	movlw	1
  3428  000C44  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3429  000C46  2A02               	incf	??_GPIO_PinWrite,f,c
  3430  000C48  D002               	goto	u1394
  3431  000C4A                     u1395:
  3432  000C4A  90D8               	bcf	status,0,c
  3433  000C4C  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  3434  000C4E                     u1394:
  3435  000C4E  2E02               	decfsz	??_GPIO_PinWrite,f,c
  3436  000C50  D7FC               	goto	u1395
  3437  000C52  5003               	movf	??_GPIO_PinWrite+1,w,c
  3438  000C54  0AFF               	xorlw	255
  3439  000C56  168D               	andwf	3981,f,c	;volatile
  3440                           
  3441                           ;gpio.c: 169: }
  3442                           
  3443                           ;gpio.c: 167: break;
  3444  000C58  0012               	return	
  3445  000C5A                     l1503:
  3446  000C5A  5004               	movf	GPIO_PinWrite@var_portNumber_u8,w,c
  3447                           
  3448                           ; Switch size 1, requested type "space"
  3449                           ; Number of cases is 5, Range of values is 0 to 4
  3450                           ; switch strategies available:
  3451                           ; Name         Instructions Cycles
  3452                           ; simple_byte           16     9 (average)
  3453                           ;	Chosen strategy is simple_byte
  3454  000C5C  0A00               	xorlw	0	; case 0
  3455  000C5E  B4D8               	btfsc	status,2,c
  3456  000C60  D766               	goto	l1471
  3457  000C62  0A01               	xorlw	1	; case 1
  3458  000C64  B4D8               	btfsc	status,2,c
  3459  000C66  D781               	goto	l1477
  3460  000C68  0A03               	xorlw	3	; case 2
  3461  000C6A  B4D8               	btfsc	status,2,c
  3462  000C6C  D79C               	goto	l1483
  3463  000C6E  0A01               	xorlw	1	; case 3
  3464  000C70  B4D8               	btfsc	status,2,c
  3465  000C72  D7B7               	goto	l1489
  3466  000C74  0A07               	xorlw	7	; case 4
  3467  000C76  A4D8               	btfss	status,2,c
  3468  000C78  0012               	return	
  3469  000C7A  D7D1               	goto	l1495
  3470  000C7C                     __end_of_GPIO_PinWrite:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postdec1	equ	0xFE5
  3481                           fsr1l	equ	0xFE1
  3482                           indf2	equ	0xFDF
  3483                           postinc2	equ	0xFDE
  3484                           postdec2	equ	0xFDD
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _GPIO_PinRead *****************
  3490 ;; Defined at:
  3491 ;;		line 192 in file "../00-libfiles/gpio.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  enm_pinNumbe    1    wreg     enum E3211
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  3496 ;;  returnStatus    1    3[COMRAM] unsigned char 
  3497 ;;  var_portNumb    1    2[COMRAM] unsigned char 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      unsigned char 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3507 ;;      Params:         0       0       0       0       0       0       0
  3508 ;;      Locals:         3       0       0       0       0       0       0
  3509 ;;      Temps:          2       0       0       0       0       0       0
  3510 ;;      Totals:         5       0       0       0       0       0       0
  3511 ;;Total ram usage:        5 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_lcd_BusyCheck
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text20
  3521  000DDC                     __ptext20:
  3522                           	opt stack 0
  3523  000DDC                     _GPIO_PinRead:
  3524                           	opt stack 25
  3525                           
  3526                           ;incstack = 0
  3527                           ;GPIO_PinRead@enm_pinNumber stored from wreg
  3528  000DDC  6E05               	movwf	GPIO_PinRead@enm_pinNumber,c
  3529                           
  3530                           ;gpio.c: 194: uint8_t var_portNumber_u8;
  3531                           ;gpio.c: 195: uint8_t returnStatus = 0;
  3532  000DDE  0E00               	movlw	0
  3533  000DE0  6E04               	movwf	GPIO_PinRead@returnStatus,c
  3534                           
  3535                           ;gpio.c: 197: var_portNumber_u8 = (enm_pinNumber>>3);
  3536  000DE2  3805               	swapf	GPIO_PinRead@enm_pinNumber,w,c
  3537  000DE4  46E8               	rlncf	wreg,f,c
  3538  000DE6  0B1F               	andlw	31
  3539  000DE8  6E03               	movwf	GPIO_PinRead@var_portNumber_u8,c
  3540                           
  3541                           ;gpio.c: 198: enm_pinNumber = enm_pinNumber & 0x07;
  3542  000DEA  5005               	movf	GPIO_PinRead@enm_pinNumber,w,c
  3543  000DEC  0B07               	andlw	7
  3544  000DEE  6E05               	movwf	GPIO_PinRead@enm_pinNumber,c
  3545                           
  3546                           ;gpio.c: 201: switch(var_portNumber_u8)
  3547  000DF0  D04C               	goto	l1523
  3548  000DF2                     l1511:
  3549                           
  3550                           ;gpio.c: 205: returnStatus = (((PORTA)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3551  000DF2  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3552  000DF6  0E01               	movlw	1
  3553  000DF8  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3554  000DFA  2A01               	incf	??_GPIO_PinRead,f,c
  3555  000DFC  D002               	goto	u1404
  3556  000DFE                     u1405:
  3557  000DFE  90D8               	bcf	status,0,c
  3558  000E00  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3559  000E02                     u1404:
  3560  000E02  2E01               	decfsz	??_GPIO_PinRead,f,c
  3561  000E04  D7FC               	goto	u1405
  3562  000E06  5002               	movf	??_GPIO_PinRead+1,w,c
  3563  000E08  1480               	andwf	3968,w,c	;volatile
  3564  000E0A  0900               	iorlw	0
  3565  000E0C  B4D8               	btfsc	status,2,c
  3566  000E0E  D03B               	goto	u1530
  3567  000E10  D029               	goto	u1501
  3568  000E12                     u1420:
  3569  000E12  6E04               	movwf	GPIO_PinRead@returnStatus,c
  3570                           
  3571                           ;gpio.c: 206: break;
  3572  000E14  D04A               	goto	l1525
  3573  000E16                     l1513:
  3574                           
  3575                           ;gpio.c: 210: returnStatus = (((PORTB)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3576  000E16  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3577  000E1A  0E01               	movlw	1
  3578  000E1C  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3579  000E1E  2A01               	incf	??_GPIO_PinRead,f,c
  3580  000E20  D002               	goto	u1434
  3581  000E22                     u1435:
  3582  000E22  90D8               	bcf	status,0,c
  3583  000E24  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3584  000E26                     u1434:
  3585  000E26  2E01               	decfsz	??_GPIO_PinRead,f,c
  3586  000E28  D7FC               	goto	u1435
  3587  000E2A  5002               	movf	??_GPIO_PinRead+1,w,c
  3588  000E2C  1481               	andwf	3969,w,c	;volatile
  3589  000E2E  D028               	goto	L4
  3590  000E30                     l1515:
  3591                           
  3592                           ;gpio.c: 215: returnStatus = (((PORTC)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3593  000E30  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3594  000E34  0E01               	movlw	1
  3595  000E36  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3596  000E38  2A01               	incf	??_GPIO_PinRead,f,c
  3597  000E3A  D002               	goto	u1464
  3598  000E3C                     u1465:
  3599  000E3C  90D8               	bcf	status,0,c
  3600  000E3E  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3601  000E40                     u1464:
  3602  000E40  2E01               	decfsz	??_GPIO_PinRead,f,c
  3603  000E42  D7FC               	goto	u1465
  3604  000E44  5002               	movf	??_GPIO_PinRead+1,w,c
  3605  000E46  1482               	andwf	3970,w,c	;volatile
  3606  000E48  D01B               	goto	L4
  3607  000E4A                     l1517:
  3608                           
  3609                           ;gpio.c: 221: returnStatus = (((PORTD)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3610  000E4A  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3611  000E4E  0E01               	movlw	1
  3612  000E50  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3613  000E52  2A01               	incf	??_GPIO_PinRead,f,c
  3614  000E54  D002               	goto	u1494
  3615  000E56                     u1495:
  3616  000E56  90D8               	bcf	status,0,c
  3617  000E58  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3618  000E5A                     u1494:
  3619  000E5A  2E01               	decfsz	??_GPIO_PinRead,f,c
  3620  000E5C  D7FC               	goto	u1495
  3621  000E5E  5002               	movf	??_GPIO_PinRead+1,w,c
  3622  000E60  1483               	andwf	3971,w,c	;volatile
  3623  000E62  D00E               	goto	L4
  3624  000E64                     u1501:
  3625  000E64  0E01               	movlw	1
  3626  000E66  D7D5               	goto	u1420
  3627  000E68                     l1519:
  3628                           
  3629                           ;gpio.c: 227: returnStatus = (((PORTE)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3630  000E68  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3631  000E6C  0E01               	movlw	1
  3632  000E6E  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3633  000E70  2A01               	incf	??_GPIO_PinRead,f,c
  3634  000E72  D002               	goto	u1524
  3635  000E74                     u1525:
  3636  000E74  90D8               	bcf	status,0,c
  3637  000E76  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3638  000E78                     u1524:
  3639  000E78  2E01               	decfsz	??_GPIO_PinRead,f,c
  3640  000E7A  D7FC               	goto	u1525
  3641  000E7C  5002               	movf	??_GPIO_PinRead+1,w,c
  3642  000E7E  1484               	andwf	3972,w,c	;volatile
  3643  000E80                     L4:
  3644  000E80  0900               	iorlw	0
  3645  000E82  A4D8               	btfss	status,2,c
  3646  000E84  D7EF               	goto	u1501
  3647  000E86                     u1530:
  3648  000E86  0E00               	movlw	0
  3649  000E88  D7C4               	goto	u1420
  3650  000E8A                     l1523:
  3651  000E8A  5003               	movf	GPIO_PinRead@var_portNumber_u8,w,c
  3652                           
  3653                           ; Switch size 1, requested type "space"
  3654                           ; Number of cases is 5, Range of values is 0 to 4
  3655                           ; switch strategies available:
  3656                           ; Name         Instructions Cycles
  3657                           ; simple_byte           16     9 (average)
  3658                           ;	Chosen strategy is simple_byte
  3659  000E8C  0A00               	xorlw	0	; case 0
  3660  000E8E  B4D8               	btfsc	status,2,c
  3661  000E90  D7B0               	goto	l1511
  3662  000E92  0A01               	xorlw	1	; case 1
  3663  000E94  B4D8               	btfsc	status,2,c
  3664  000E96  D7BF               	goto	l1513
  3665  000E98  0A03               	xorlw	3	; case 2
  3666  000E9A  B4D8               	btfsc	status,2,c
  3667  000E9C  D7C9               	goto	l1515
  3668  000E9E  0A01               	xorlw	1	; case 3
  3669  000EA0  B4D8               	btfsc	status,2,c
  3670  000EA2  D7D3               	goto	l1517
  3671  000EA4  0A07               	xorlw	7	; case 4
  3672  000EA6  B4D8               	btfsc	status,2,c
  3673  000EA8  D7DF               	goto	l1519
  3674  000EAA                     l1525:
  3675                           
  3676                           ;gpio.c: 230: return returnStatus;
  3677  000EAA  5004               	movf	GPIO_PinRead@returnStatus,w,c
  3678  000EAC  0012               	return	
  3679  000EAE                     __end_of_GPIO_PinRead:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           postinc0	equ	0xFEE
  3688                           wreg	equ	0xFE8
  3689                           postdec1	equ	0xFE5
  3690                           fsr1l	equ	0xFE1
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           postdec2	equ	0xFDD
  3694                           fsr2h	equ	0xFDA
  3695                           fsr2l	equ	0xFD9
  3696                           status	equ	0xFD8
  3697                           
  3698 ;; *************** function _GPIO_PinDirection *****************
  3699 ;; Defined at:
  3700 ;;		line 60 in file "../00-libfiles/gpio.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  enm_pinNumbe    1    wreg     enum E3211
  3703 ;;  var_pinDirn_    1    0[COMRAM] unsigned char 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  3706 ;;  var_portNumb    1    3[COMRAM] unsigned char 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      void 
  3709 ;; Registers used:
  3710 ;;		wreg, status,2, status,0
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3716 ;;      Params:         1       0       0       0       0       0       0
  3717 ;;      Locals:         2       0       0       0       0       0       0
  3718 ;;      Temps:          2       0       0       0       0       0       0
  3719 ;;      Totals:         5       0       0       0       0       0       0
  3720 ;;Total ram usage:        5 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; This function calls:
  3723 ;;		Nothing
  3724 ;; This function is called by:
  3725 ;;		_LCD_SetUp
  3726 ;;		_lcd_BusyCheck
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text21
  3731  000C7C                     __ptext21:
  3732                           	opt stack 0
  3733  000C7C                     _GPIO_PinDirection:
  3734                           	opt stack 29
  3735                           
  3736                           ;incstack = 0
  3737                           ;GPIO_PinDirection@enm_pinNumber stored from wreg
  3738  000C7C  6E05               	movwf	GPIO_PinDirection@enm_pinNumber,c
  3739                           
  3740                           ;gpio.c: 63: uint8_t var_portNumber_u8;
  3741                           ;gpio.c: 66: var_portNumber_u8 = (enm_pinNumber>>3);
  3742  000C7E  3805               	swapf	GPIO_PinDirection@enm_pinNumber,w,c
  3743  000C80  46E8               	rlncf	wreg,f,c
  3744  000C82  0B1F               	andlw	31
  3745  000C84  6E04               	movwf	GPIO_PinDirection@var_portNumber_u8,c
  3746                           
  3747                           ;gpio.c: 67: enm_pinNumber = enm_pinNumber & 0x07;
  3748  000C86  5005               	movf	GPIO_PinDirection@enm_pinNumber,w,c
  3749  000C88  0B07               	andlw	7
  3750  000C8A  6E05               	movwf	GPIO_PinDirection@enm_pinNumber,c
  3751                           
  3752                           ;gpio.c: 71: switch(var_portNumber_u8)
  3753  000C8C  D096               	goto	l1467
  3754  000C8E                     l1435:
  3755                           
  3756                           ;gpio.c: 75: ((var_pinDirn_u8)? ((TRISA) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISA) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3757  000C8E  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3758  000C90  B4D8               	btfsc	status,2,c
  3759  000C92  D00D               	goto	l1439
  3760  000C94  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3761  000C98  0E01               	movlw	1
  3762  000C9A  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3763  000C9C  2A02               	incf	??_GPIO_PinDirection,f,c
  3764  000C9E  D002               	goto	u1114
  3765  000CA0                     u1115:
  3766  000CA0  90D8               	bcf	status,0,c
  3767  000CA2  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3768  000CA4                     u1114:
  3769  000CA4  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3770  000CA6  D7FC               	goto	u1115
  3771  000CA8  5003               	movf	??_GPIO_PinDirection+1,w,c
  3772  000CAA  1292               	iorwf	3986,f,c	;volatile
  3773  000CAC  0012               	return	
  3774  000CAE                     l1439:
  3775  000CAE  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3776  000CB2  0E01               	movlw	1
  3777  000CB4  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3778  000CB6  2A02               	incf	??_GPIO_PinDirection,f,c
  3779  000CB8  D002               	goto	u1124
  3780  000CBA                     u1125:
  3781  000CBA  90D8               	bcf	status,0,c
  3782  000CBC  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3783  000CBE                     u1124:
  3784  000CBE  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3785  000CC0  D7FC               	goto	u1125
  3786  000CC2  5003               	movf	??_GPIO_PinDirection+1,w,c
  3787  000CC4  0AFF               	xorlw	255
  3788  000CC6  1692               	andwf	3986,f,c	;volatile
  3789                           
  3790                           ;gpio.c: 76: break;
  3791  000CC8  0012               	return	
  3792  000CCA                     l1441:
  3793                           
  3794                           ;gpio.c: 81: ((var_pinDirn_u8)? ((TRISB) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISB) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3795  000CCA  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3796  000CCC  B4D8               	btfsc	status,2,c
  3797  000CCE  D00D               	goto	l1445
  3798  000CD0  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3799  000CD4  0E01               	movlw	1
  3800  000CD6  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3801  000CD8  2A02               	incf	??_GPIO_PinDirection,f,c
  3802  000CDA  D002               	goto	u1144
  3803  000CDC                     u1145:
  3804  000CDC  90D8               	bcf	status,0,c
  3805  000CDE  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3806  000CE0                     u1144:
  3807  000CE0  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3808  000CE2  D7FC               	goto	u1145
  3809  000CE4  5003               	movf	??_GPIO_PinDirection+1,w,c
  3810  000CE6  1293               	iorwf	3987,f,c	;volatile
  3811  000CE8  0012               	return	
  3812  000CEA                     l1445:
  3813  000CEA  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3814  000CEE  0E01               	movlw	1
  3815  000CF0  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3816  000CF2  2A02               	incf	??_GPIO_PinDirection,f,c
  3817  000CF4  D002               	goto	u1154
  3818  000CF6                     u1155:
  3819  000CF6  90D8               	bcf	status,0,c
  3820  000CF8  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3821  000CFA                     u1154:
  3822  000CFA  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3823  000CFC  D7FC               	goto	u1155
  3824  000CFE  5003               	movf	??_GPIO_PinDirection+1,w,c
  3825  000D00  0AFF               	xorlw	255
  3826  000D02  1693               	andwf	3987,f,c	;volatile
  3827                           
  3828                           ;gpio.c: 82: break;
  3829  000D04  0012               	return	
  3830  000D06                     l1447:
  3831                           
  3832                           ;gpio.c: 87: ((var_pinDirn_u8)? ((TRISC) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISC) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3833  000D06  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3834  000D08  B4D8               	btfsc	status,2,c
  3835  000D0A  D00D               	goto	l1451
  3836  000D0C  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3837  000D10  0E01               	movlw	1
  3838  000D12  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3839  000D14  2A02               	incf	??_GPIO_PinDirection,f,c
  3840  000D16  D002               	goto	u1174
  3841  000D18                     u1175:
  3842  000D18  90D8               	bcf	status,0,c
  3843  000D1A  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3844  000D1C                     u1174:
  3845  000D1C  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3846  000D1E  D7FC               	goto	u1175
  3847  000D20  5003               	movf	??_GPIO_PinDirection+1,w,c
  3848  000D22  1294               	iorwf	3988,f,c	;volatile
  3849  000D24  0012               	return	
  3850  000D26                     l1451:
  3851  000D26  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3852  000D2A  0E01               	movlw	1
  3853  000D2C  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3854  000D2E  2A02               	incf	??_GPIO_PinDirection,f,c
  3855  000D30  D002               	goto	u1184
  3856  000D32                     u1185:
  3857  000D32  90D8               	bcf	status,0,c
  3858  000D34  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3859  000D36                     u1184:
  3860  000D36  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3861  000D38  D7FC               	goto	u1185
  3862  000D3A  5003               	movf	??_GPIO_PinDirection+1,w,c
  3863  000D3C  0AFF               	xorlw	255
  3864  000D3E  1694               	andwf	3988,f,c	;volatile
  3865                           
  3866                           ;gpio.c: 88: break;
  3867  000D40  0012               	return	
  3868  000D42                     l1453:
  3869                           
  3870                           ;gpio.c: 93: ((var_pinDirn_u8)? ((TRISD) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISD) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3871  000D42  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3872  000D44  B4D8               	btfsc	status,2,c
  3873  000D46  D00D               	goto	l1457
  3874  000D48  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3875  000D4C  0E01               	movlw	1
  3876  000D4E  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3877  000D50  2A02               	incf	??_GPIO_PinDirection,f,c
  3878  000D52  D002               	goto	u1204
  3879  000D54                     u1205:
  3880  000D54  90D8               	bcf	status,0,c
  3881  000D56  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3882  000D58                     u1204:
  3883  000D58  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3884  000D5A  D7FC               	goto	u1205
  3885  000D5C  5003               	movf	??_GPIO_PinDirection+1,w,c
  3886  000D5E  1295               	iorwf	3989,f,c	;volatile
  3887  000D60  0012               	return	
  3888  000D62                     l1457:
  3889  000D62  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3890  000D66  0E01               	movlw	1
  3891  000D68  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3892  000D6A  2A02               	incf	??_GPIO_PinDirection,f,c
  3893  000D6C  D002               	goto	u1214
  3894  000D6E                     u1215:
  3895  000D6E  90D8               	bcf	status,0,c
  3896  000D70  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3897  000D72                     u1214:
  3898  000D72  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3899  000D74  D7FC               	goto	u1215
  3900  000D76  5003               	movf	??_GPIO_PinDirection+1,w,c
  3901  000D78  0AFF               	xorlw	255
  3902  000D7A  1695               	andwf	3989,f,c	;volatile
  3903                           
  3904                           ;gpio.c: 94: break;
  3905  000D7C  0012               	return	
  3906  000D7E                     l1459:
  3907                           
  3908                           ;gpio.c: 98: ((var_pinDirn_u8)? ((TRISE) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISE) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3909  000D7E  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3910  000D80  B4D8               	btfsc	status,2,c
  3911  000D82  D00D               	goto	l1463
  3912  000D84  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3913  000D88  0E01               	movlw	1
  3914  000D8A  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3915  000D8C  2A02               	incf	??_GPIO_PinDirection,f,c
  3916  000D8E  D002               	goto	u1234
  3917  000D90                     u1235:
  3918  000D90  90D8               	bcf	status,0,c
  3919  000D92  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3920  000D94                     u1234:
  3921  000D94  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3922  000D96  D7FC               	goto	u1235
  3923  000D98  5003               	movf	??_GPIO_PinDirection+1,w,c
  3924  000D9A  1296               	iorwf	3990,f,c	;volatile
  3925  000D9C  0012               	return	
  3926  000D9E                     l1463:
  3927  000D9E  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3928  000DA2  0E01               	movlw	1
  3929  000DA4  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3930  000DA6  2A02               	incf	??_GPIO_PinDirection,f,c
  3931  000DA8  D002               	goto	u1244
  3932  000DAA                     u1245:
  3933  000DAA  90D8               	bcf	status,0,c
  3934  000DAC  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3935  000DAE                     u1244:
  3936  000DAE  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3937  000DB0  D7FC               	goto	u1245
  3938  000DB2  5003               	movf	??_GPIO_PinDirection+1,w,c
  3939  000DB4  0AFF               	xorlw	255
  3940  000DB6  1696               	andwf	3990,f,c	;volatile
  3941                           
  3942                           ;gpio.c: 101: }
  3943                           
  3944                           ;gpio.c: 99: break;
  3945  000DB8  0012               	return	
  3946  000DBA                     l1467:
  3947  000DBA  5004               	movf	GPIO_PinDirection@var_portNumber_u8,w,c
  3948                           
  3949                           ; Switch size 1, requested type "space"
  3950                           ; Number of cases is 5, Range of values is 0 to 4
  3951                           ; switch strategies available:
  3952                           ; Name         Instructions Cycles
  3953                           ; simple_byte           16     9 (average)
  3954                           ;	Chosen strategy is simple_byte
  3955  000DBC  0A00               	xorlw	0	; case 0
  3956  000DBE  B4D8               	btfsc	status,2,c
  3957  000DC0  D766               	goto	l1435
  3958  000DC2  0A01               	xorlw	1	; case 1
  3959  000DC4  B4D8               	btfsc	status,2,c
  3960  000DC6  D781               	goto	l1441
  3961  000DC8  0A03               	xorlw	3	; case 2
  3962  000DCA  B4D8               	btfsc	status,2,c
  3963  000DCC  D79C               	goto	l1447
  3964  000DCE  0A01               	xorlw	1	; case 3
  3965  000DD0  B4D8               	btfsc	status,2,c
  3966  000DD2  D7B7               	goto	l1453
  3967  000DD4  0A07               	xorlw	7	; case 4
  3968  000DD6  A4D8               	btfss	status,2,c
  3969  000DD8  0012               	return	
  3970  000DDA  D7D1               	goto	l1459
  3971  000DDC                     __end_of_GPIO_PinDirection:
  3972                           	opt stack 0
  3973                           tblptru	equ	0xFF8
  3974                           tblptrh	equ	0xFF7
  3975                           tblptrl	equ	0xFF6
  3976                           tablat	equ	0xFF5
  3977                           prodh	equ	0xFF4
  3978                           prodl	equ	0xFF3
  3979                           postinc0	equ	0xFEE
  3980                           wreg	equ	0xFE8
  3981                           postdec1	equ	0xFE5
  3982                           fsr1l	equ	0xFE1
  3983                           indf2	equ	0xFDF
  3984                           postinc2	equ	0xFDE
  3985                           postdec2	equ	0xFDD
  3986                           fsr2h	equ	0xFDA
  3987                           fsr2l	equ	0xFD9
  3988                           status	equ	0xFD8
  3989                           
  3990 ;; *************** function _DELAY_ms *****************
  3991 ;; Defined at:
  3992 ;;		line 75 in file "../00-libfiles/delay.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;  ms_count        2    2[COMRAM] unsigned int 
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4006 ;;      Params:         2       0       0       0       0       0       0
  4007 ;;      Locals:         0       0       0       0       0       0       0
  4008 ;;      Temps:          0       0       0       0       0       0       0
  4009 ;;      Totals:         2       0       0       0       0       0       0
  4010 ;;Total ram usage:        2 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    1
  4013 ;; This function calls:
  4014 ;;		_DELAY_us
  4015 ;; This function is called by:
  4016 ;;		_LCD_Init
  4017 ;;		_lcd_BusyCheck
  4018 ;;		_lcd_Reset
  4019 ;;		_main
  4020 ;;		_DELAY_sec
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text22
  4025  00140A                     __ptext22:
  4026                           	opt stack 0
  4027  00140A                     _DELAY_ms:
  4028                           	opt stack 24
  4029                           
  4030                           ;delay.c: 77: while (ms_count != 0)
  4031                           
  4032                           ;incstack = 0
  4033  00140A  D009               	goto	l1431
  4034  00140C                     l1427:
  4035                           
  4036                           ;delay.c: 78: {
  4037                           ;delay.c: 79: DELAY_us(350u);
  4038  00140C  0E01               	movlw	1
  4039  00140E  6E02               	movwf	DELAY_us@us_count+1,c
  4040  001410  0E5E               	movlw	94
  4041  001412  6E01               	movwf	DELAY_us@us_count,c
  4042  001414  EC14  F00A         	call	_DELAY_us	;wreg free
  4043                           
  4044                           ;delay.c: 80: ms_count--;
  4045  001418  0603               	decf	DELAY_ms@ms_count,f,c
  4046  00141A  A0D8               	btfss	status,0,c
  4047  00141C  0604               	decf	DELAY_ms@ms_count+1,f,c
  4048  00141E                     l1431:
  4049  00141E  5003               	movf	DELAY_ms@ms_count,w,c
  4050  001420  1004               	iorwf	DELAY_ms@ms_count+1,w,c
  4051  001422  B4D8               	btfsc	status,2,c
  4052  001424  0012               	return	
  4053  001426  D7F2               	goto	l1427
  4054  001428                     __end_of_DELAY_ms:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           postinc0	equ	0xFEE
  4063                           wreg	equ	0xFE8
  4064                           postdec1	equ	0xFE5
  4065                           fsr1l	equ	0xFE1
  4066                           indf2	equ	0xFDF
  4067                           postinc2	equ	0xFDE
  4068                           postdec2	equ	0xFDD
  4069                           fsr2h	equ	0xFDA
  4070                           fsr2l	equ	0xFD9
  4071                           status	equ	0xFD8
  4072                           
  4073 ;; *************** function _DELAY_us *****************
  4074 ;; Defined at:
  4075 ;;		line 56 in file "../00-libfiles/delay.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  us_count        2    0[COMRAM] unsigned int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  1    wreg      void 
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, status,0
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4089 ;;      Params:         2       0       0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0
  4091 ;;      Temps:          0       0       0       0       0       0       0
  4092 ;;      Totals:         2       0       0       0       0       0       0
  4093 ;;Total ram usage:        2 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; This function calls:
  4096 ;;		Nothing
  4097 ;; This function is called by:
  4098 ;;		_DELAY_ms
  4099 ;;		_lcd_BusyCheck
  4100 ;;		_lcd_Reset
  4101 ;;		_lcd_SendCmdSignals
  4102 ;;		_lcd_SendDataSignals
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text23
  4107  001428                     __ptext23:
  4108                           	opt stack 0
  4109  001428                     _DELAY_us:
  4110                           	opt stack 25
  4111                           
  4112                           ;delay.c: 58: while (us_count != 0)
  4113                           
  4114                           ;incstack = 0
  4115  001428  D003               	goto	l1423
  4116  00142A                     l1421:
  4117                           
  4118                           ;delay.c: 59: {
  4119                           ;delay.c: 60: us_count--;
  4120  00142A  0601               	decf	DELAY_us@us_count,f,c
  4121  00142C  A0D8               	btfss	status,0,c
  4122  00142E  0602               	decf	DELAY_us@us_count+1,f,c
  4123  001430                     l1423:
  4124  001430  5001               	movf	DELAY_us@us_count,w,c
  4125  001432  1002               	iorwf	DELAY_us@us_count+1,w,c
  4126  001434  B4D8               	btfsc	status,2,c
  4127  001436  0012               	return	
  4128  001438  D7F8               	goto	l1421
  4129  00143A                     __end_of_DELAY_us:
  4130                           	opt stack 0
  4131                           tblptru	equ	0xFF8
  4132                           tblptrh	equ	0xFF7
  4133                           tblptrl	equ	0xFF6
  4134                           tablat	equ	0xFF5
  4135                           prodh	equ	0xFF4
  4136                           prodl	equ	0xFF3
  4137                           postinc0	equ	0xFEE
  4138                           wreg	equ	0xFE8
  4139                           postdec1	equ	0xFE5
  4140                           fsr1l	equ	0xFE1
  4141                           indf2	equ	0xFDF
  4142                           postinc2	equ	0xFDE
  4143                           postdec2	equ	0xFDD
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           postinc0	equ	0xFEE
  4154                           wreg	equ	0xFE8
  4155                           postdec1	equ	0xFE5
  4156                           fsr1l	equ	0xFE1
  4157                           indf2	equ	0xFDF
  4158                           postinc2	equ	0xFDE
  4159                           postdec2	equ	0xFDD
  4160                           fsr2h	equ	0xFDA
  4161                           fsr2l	equ	0xFD9
  4162                           status	equ	0xFD8
  4163                           
  4164                           	psect	rparam
  4165  0000                     tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           postinc0	equ	0xFEE
  4172                           wreg	equ	0xFE8
  4173                           postdec1	equ	0xFE5
  4174                           fsr1l	equ	0xFE1
  4175                           indf2	equ	0xFDF
  4176                           postinc2	equ	0xFDE
  4177                           postdec2	equ	0xFDD
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8


Data Sizes:
    Strings     18
    Constant    0
    Data        4
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69      89
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCD_Printf@str	PTR unsigned char  size(2) Largest target is 0

    LCD_Printf@argList	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), 

    LCD_Printf@ptr	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), 

    LCD_Printf@argp	PTR void [1] size(2) Largest target is 1
		 -> ?_LCD_Printf(COMRAM[1]), 

    LCD_DisplayString@ptr_stringPointer_u8	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_LCD_Printf
    _LCD_SetUp->_GPIO_PinDirection
    _LCD_Printf->_LCD_DisplayNumber
    _LCD_DisplayString->_LCD_DisplayChar
    _LCD_DisplayNumber->___lldiv
    _LCD_DisplayChar->_lcd_DataWrite
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_DataWrite->_lcd_SendHigherNibble
    _lcd_DataWrite->_lcd_SendLowerNibble
    _lcd_SendDataSignals->_GPIO_PinWrite
    _LCD_GoToNextLine->_LCD_CmdWrite
    _lcd_Reset->_lcd_SendHigherNibble
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _LCD_CmdWrite->_lcd_SendHigherNibble
    _LCD_CmdWrite->_lcd_SendLowerNibble
    _lcd_SendLowerNibble->_GPIO_PinWrite
    _lcd_SendHigherNibble->_GPIO_PinWrite
    _lcd_SendCmdSignals->_GPIO_PinWrite
    _lcd_BusyCheck->_GPIO_PinDirection
    _lcd_BusyCheck->_GPIO_PinRead
    _lcd_BusyCheck->_GPIO_PinWrite
    _DELAY_ms->_DELAY_us

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  150037
                                             67 COMRAM     2     2      0
                           _DELAY_ms
                  _LCD_DisplayString
                       _LCD_GoToLine
                           _LCD_Init
                         _LCD_Printf
                          _LCD_SetUp
 ---------------------------------------------------------------------------------
 (1) _LCD_SetUp                                           11     1     10    2442
                                              5 COMRAM    11     1     10
                  _GPIO_PinDirection
 ---------------------------------------------------------------------------------
 (1) _LCD_Printf                                          24    20      4   71302
                                             43 COMRAM    24    20      4
                    _LCD_DisplayChar
                  _LCD_DisplayNumber
                  _LCD_DisplayString
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayString                                    2     0      2   22799
                                              8 COMRAM     2     0      2
                    _LCD_DisplayChar
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayNumber                                   30    25      5   24722
                                             13 COMRAM    30    25      5
                    _LCD_DisplayChar
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _LCD_DisplayChar                                      1     1      0   22626
                                              7 COMRAM     1     1      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_DataWrite                                        1     1      0   11280
                                              6 COMRAM     1     1      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendDataSignals                                  0     0      0    2469
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToNextLine                                     0     0      0   11280
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     1      1   41118
                                              8 COMRAM     2     1      1
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (2) _lcd_Reset                                            0     0      0    6032
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0   22626
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToLine                                         1     1      0   11346
                                              7 COMRAM     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (5) _LCD_CmdWrite                                         1     1      0   11280
                                              6 COMRAM     1     1      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendLowerNibble                                  1     1      0    1894
                                              5 COMRAM     1     1      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (5) _lcd_SendHigherNibble                                 1     1      0    1894
                                              5 COMRAM     1     1      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (6) _lcd_SendCmdSignals                                   0     0      0    2469
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (5) _lcd_BusyCheck                                        1     1      0    4934
                                              5 COMRAM     1     1      0
                           _DELAY_ms
                           _DELAY_us
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (6) _GPIO_PinWrite                                        5     4      1    1806
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (6) _GPIO_PinRead                                         5     5      0     206
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinDirection                                    5     4      1    1230
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (6) _DELAY_ms                                             2     0      2    1006
                                              2 COMRAM     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (6) _DELAY_us                                             2     0      2     663
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DELAY_ms
     _DELAY_us
   _LCD_DisplayString
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendDataSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
   _LCD_GoToLine
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _GPIO_PinDirection
         _GPIO_PinRead
         _GPIO_PinWrite
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
       _lcd_SendLowerNibble
         _GPIO_PinWrite
   _LCD_Init
     _DELAY_ms
       _DELAY_us
     _LCD_Clear
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
       _LCD_GoToLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _GPIO_PinDirection
         _GPIO_PinRead
         _GPIO_PinWrite
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
       _lcd_SendLowerNibble
         _GPIO_PinWrite
     _lcd_Reset
       _DELAY_ms
         _DELAY_us
       _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
   _LCD_Printf
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendDataSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
     _LCD_DisplayNumber
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       ___lldiv
     _LCD_DisplayString
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
   _LCD_SetUp
     _GPIO_PinDirection

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      59       1       70.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59      15        0.0%
DATA                 0      0      59       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Aug 13 19:31:27 2016

                             ?_LCD_CmdWrite 0001                                 ?_LCD_Printf 002C  
                             ?_LCD_GoToLine 0001                                 __CFG_BORV$2 000000  
                              __CFG_CP0$OFF 000000                                __CFG_CP1$OFF 000000  
                              __CFG_CP2$OFF 000000                                __CFG_CP3$OFF 000000  
                               __CFG_OSC$HS 000000                                         l235 068C  
                                       l172 1162                                         l274 0F92  
                                       l661 108A                                __CFG_CPB$OFF 000000  
                              __CFG_CPD$OFF 000000                                         prod 000FF3  
                                       wreg 000FE8                     __end_of_LCD_DisplayChar 140A  
                              __CFG_LVP$OFF 000000                                __CFG_WDT$OFF 000000  
                                      l1421 142A                                        l1423 1430  
                                      l1431 141E                                        l1511 0DF2  
                                      l1503 0C5A                                        l1441 0CCA  
                                      l1513 0E16                                        l1601 13F4  
                                      l1427 140C                                        l1451 0D26  
                                      l1435 0C8E                                        l1515 0E30  
                                      l1523 0E8A                                        l1453 0D42  
                                      l1445 0CEA                                        l1517 0E4A  
                                      l1525 0EAA                                        l1541 100C  
                                      l1463 0D9E                                        l1447 0D06  
                                      l1439 0CAE                                        l1519 0E68  
                                      l1471 0B2E                                        l1615 103C  
                                      l1457 0D62                                        l1481 0B8A  
                                      l1537 0FFA                                        l1617 1048  
                                      l1459 0D7E                                        l1467 0DBA  
                                      l1483 0BA6                                        l1475 0B4E  
                                      l1555 134A                                        l1627 107C  
                                      l1619 104C                                        l1651 095C  
                                      l1643 137C                                        l1803 06AC  
                                      l1493 0C02                                        l1477 0B6A  
                                      l1573 13A2                                        l1581 1318  
                                      l1813 06D6                                        l1725 0EF4  
                                      l1495 0C1E                                        l1487 0BC6  
                                      l1559 135A                                        l1671 0A5A  
                                      l1663 09DE                                        l1639 1368  
                                      l1815 06F4                                        l1727 0EFA  
                                      l1489 0BE2                                        l1585 1328  
                                      l1665 09E4                                        l1681 0A7E  
                                      l1657 09C2                                        l1833 077A  
                                      l1825 072E                                        l1737 0F26  
                                      l1905 10E8                                        l1499 0C3E  
                                      l1683 0A88                                        l1659 09CA  
                                      l1851 0822                                        l1827 074A  
                                      l1765 1150                                        l1677 0A68  
                                      l1693 0B14                                        l1861 085C  
                                      l1845 07E6                                        l1773 0626  
                                      l1759 1134                                        l1687 0ADA  
                                      l1679 0A7C                                        l1871 08A2  
                                      l1839 07B6                                        l1881 08D0  
                                      l1793 067E                                        l1859 0844  
                                      l1787 0660                                        l1883 092E  
                                      l1877 08C8                                        l1869 0886  
                                      l1885 0934                                        l1797 0690  
                                      l1887 0938                                        STR_1 060B  
                                      STR_2 0601                                        u1114 0CA4  
                                      u1115 0CA0                                        u1204 0D58  
                                      u1124 0CBE                                        u1205 0D54  
                                      u1125 0CBA                                        u1214 0D72  
                                      u1215 0D6E                                        u1144 0CE0  
                                      u1304 0B9A                                        u1145 0CDC  
                                      u1305 0B96                                        u1234 0D94  
                                      u1154 0CFA                                        u1235 0D90  
                                      u1155 0CF6                                        u1244 0DAE  
                                      u1420 0E12                                        u1404 0E02  
                                      u1324 0BBC                                        u1245 0DAA  
                                      u1501 0E64                                        u1405 0DFE  
                                      u1325 0BB8                                        _LATA 000F89  
                                      u1174 0D1C                                        u1334 0BD6  
                                      _LATB 000F8A                                        u1175 0D18  
                                      u1335 0BD2                                        _LATC 000F8B  
                                      u1184 0D36                                        u1264 0B44  
                                      u1600 11E4                                        _LATD 000F8C  
                                      u1185 0D32                                        u1265 0B40  
                                      _LATE 000F8D                                        u1530 0E86  
                                      u1434 0E26                                        u1354 0BF8  
                                      u1274 0B5E                                        u1610 11E6  
                                      u1435 0E22                                        u1355 0BF4  
                                      u1275 0B5A                                        u1524 0E78  
                                      u1364 0C12                                        u1700 1242  
                                      u1620 11F6                                        u1525 0E74  
                                      u1365 0C0E                                        u1294 0B80  
                                      u1710 1244                                        u1630 11F8  
                                      u1295 0B7C                                        u1464 0E40  
                                      u1384 0C34                                        u1720 1254  
                                      u1640 1208                                        u1465 0E3C  
                                      u1385 0C30                                        u1394 0C4E  
                                      u1730 1256                                        u1650 120A  
                                      u1395 0C4A                                        u1660 121E  
                                      u1580 11D2                                        u1494 0E5A  
                                      u1670 1220                                        u1590 11D4  
                                      u1495 0E56                                        u1680 1230  
                                      u1690 1232                                        u1870 09B4  
                                      u1880 09B6                                        u1864 0976  
                                      u1865 0970                                        _main 109C  
                        __size_of_LCD_Clear 000E                                        fsr2h 000FDA  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                          __size_of_LCD_SetUp 00C0  
                                      prodl 000FF3                                        start 0000  
                             __CFG_IESO$OFF 000000                            __end_of_DELAY_ms 1428  
                          __end_of_DELAY_us 143A                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000010                               ?_GPIO_PinRead 0001  
                            ??_LCD_CmdWrite 0007                                 LCD_SetUp@D0 0008  
                               LCD_SetUp@D1 0009                                 LCD_SetUp@D2 000A  
                               LCD_SetUp@D3 000B                                 LCD_SetUp@D4 000C  
                               LCD_SetUp@D5 000D                                 LCD_SetUp@D6 000E  
                               LCD_SetUp@D7 000F                                 LCD_SetUp@EN 0007  
                               LCD_SetUp@RS 0010                                 LCD_SetUp@RW 0006  
                            ??_LCD_GoToLine 0008                               _GPIO_PinWrite 0B1C  
                          __end_of_LCD_Init 116E            LCD_Printf@v_numOfDigitsToDisp_u8 0041  
                   LCD_CmdWrite@v_lcdCmd_u8 0007                                       ?_main 0001  
                           __end_of___lldiv 109C                       _LCD_DisplayNumber$266 0028  
                                     _PORTA 000F80                                       _PORTB 000F81  
                                     _PORTC 000F82                                       _PORTD 000F83  
                                     _PORTE 000F84                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                             __CFG_PWRT$OFF 000000                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                             __CFG_WRTB$OFF 000000                               __CFG_WRTC$OFF 000000  
                             __CFG_WRTD$OFF 000000                              __CFG_EBTRB$OFF 000000  
     LCD_DisplayString@ptr_stringPointer_u8 0009                              __CFG_BOREN$OFF 000000  
                                     tablat 000FF5                __end_of_lcd_SendHigherNibble 1260  
                       __size_of_LCD_Printf 0338                                       status 000FD8  
                            ??_GPIO_PinRead 0001                             __initialization 1260  
                GPIO_PinWrite@enm_pinNumber 0005                                __end_of_main 1114  
                            ?_GPIO_PinWrite 0001                           _GPIO_PinDirection 0C7C  
                                    ??_main 0044                 __size_of_lcd_SendCmdSignals 0036  
                         __end_of_LCD_Clear 1448                               __activetblptr 000002  
                        ?_GPIO_PinDirection 0001                           __end_of_LCD_SetUp 0F6E  
                          ?_LCD_DisplayChar 0001                 LCD_DisplayChar@v_lcdData_u8 0008  
                              LCD_Printf@ch 0040                         ??_GPIO_PinDirection 0002  
                     lcd_BusyCheck@busyflag 0006                              __CFG_XINST$OFF 000000  
                 GPIO_PinRead@enm_pinNumber 0005                                   ??___lldiv 0009  
                 __end_of_GPIO_PinDirection 0DDC                                      clear_0 1266  
            GPIO_PinDirection@enm_pinNumber 0005                            DELAY_ms@ms_count 0003  
                              __pdataCOMRAM 0056                                __mediumconst 0000  
                         ?_LCD_GoToNextLine 0001                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                                 ?_DELAY_ms 0003                                   ?_DELAY_us 0001  
               __end_of_lcd_SendLowerNibble 1214                          ??_LCD_GoToNextLine 0008  
                      __end_of_LCD_CmdWrite 1366                        __end_of_LCD_GoToLine 13E4  
               lcd_SendLowerNibble@dataByte 0006                                  __accesstop 0080  
                   __end_of__initialization 128C                                   ?_LCD_Init 0009  
                           __CFG_PBADEN$OFF 000000                               ___rparam_used 000001  
                           ??_GPIO_PinWrite 0002                              __pcstackCOMRAM 0001  
                     __end_of_lcd_DataWrite 1334                                ??_LCD_Printf 0030  
                      _lcd_SendHigherNibble 1214                         LCD_Printf@v_num_s16 0036  
                       LCD_Printf@v_num_s32 0032                         LCD_Printf@v_num_u16 003C  
                       LCD_Printf@v_num_u32 0038                          __size_of_lcd_Reset 005A  
              __size_of_lcd_SendDataSignals 0036                                  ??_DELAY_ms 0005  
                                ??_DELAY_us 0003                        __end_of_GPIO_PinRead 0EAE  
            GPIO_PinWrite@var_portNumber_u8 0004                       __end_of_lcd_BusyCheck 101A  
              lcd_SendHigherNibble@dataByte 0006                GPIO_PinWrite@var_pinValue_u8 0001  
                                ??_LCD_Init 000A                          __end_of_LCD_Printf 094C  
                __size_of_GPIO_PinDirection 0160                               LCD_Printf@ptr 003E  
                             LCD_Printf@str 0030                       ?_lcd_SendHigherNibble 0001  
                          DELAY_us@us_count 0001                                     __Hparam 0000  
                         __end_of_lcd_Reset 11C8                                     __Lparam 0000  
                 LCD_Init@v_lcdNoOfLines_u8 000A                                     ___lldiv 101A  
                              __psmallconst 0600                             __CFG_STVREN$OFF 000000  
                                   __pcinit 1260                                     __ramtop 0600  
                        LCD_DisplayNumber@a 001E                          LCD_DisplayNumber@i 002B  
                                   __ptext0 109C                                     __ptext1 0EAE  
                                   __ptext2 0614                                     __ptext3 1366  
                                   __ptext4 094C                                     __ptext5 101A  
                                   __ptext6 13E4                                     __ptext7 1302  
                                   __ptext8 1296                                     __ptext9 1390  
                     __size_of_LCD_CmdWrite 0032                                   _LCDConfig 0046  
                     __size_of_LCD_GoToLine 002A                                   _LCD_Clear 143A  
                                 _LCD_SetUp 0EAE                        end_of_initialization 128C  
              LCD_Init@v_MaxCharsPerLine_u8 0009                               __Lmediumconst 0000  
                           ___lldiv@divisor 0005                             ___lldiv@counter 000D  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc2 000FDE  
                    ??_lcd_SendHigherNibble 0006                  __end_of_lcd_SendCmdSignals 1302  
                              _LCD_CmdWrite 1334                                _LCD_GoToLine 13BA  
                     __size_of_GPIO_PinRead 00D2                                  ?_LCD_Clear 0001  
                                ?_LCD_SetUp 0006                           __size_of_DELAY_ms 001E  
                         __size_of_DELAY_us 0012                    __size_of_LCD_DisplayChar 0026  
                         __size_of_LCD_Init 005A                   __size_of_LCD_GoToNextLine 002A  
                       _lcd_SendDataSignals 1296          GPIO_PinDirection@var_portNumber_u8 0004  
                              _GPIO_PinRead 0DDC                               __pidataCOMRAM 1448  
                         LCD_Printf@argList 002C                    _ARR_LcdLineNumAddress_U8 0056  
                       start_initialization 1260                        ?_lcd_SendDataSignals 0001  
                    _v_LcdTrackCursorPos_U8 0054               GPIO_PinRead@var_portNumber_u8 0003  
              __size_of_lcd_SendLowerNibble 004C             GPIO_PinDirection@var_pinDirn_u8 0001  
                     __end_of_GPIO_PinWrite 0C7C                            __CFG_LPT1OSC$OFF 000000  
                     ??_lcd_SendDataSignals 0006                        _v_LcdTrackLineNum_U8 0055  
                               __pbssCOMRAM 0046                       lcd_DataWrite@dataByte 0007  
                               ??_LCD_Clear 0009                                 ??_LCD_SetUp 0010  
                    __size_of_lcd_DataWrite 0032                 LCD_GoToLine@v_lineNumber_u8 0008  
                         __CFG_CCP2MX$PORTC 000000                                    ?___lldiv 0001  
                                 _lcd_Reset 116E                           ??_LCD_DisplayChar 0008  
                    __size_of_lcd_BusyCheck 00AC                                 __smallconst 0600  
                         _LCD_DisplayNumber 094C                              LCD_Printf@argp 0042  
                         _LCD_DisplayString 1366                                    _DELAY_ms 140A  
                                  _DELAY_us 1428                          ?_LCD_DisplayNumber 000E  
                        ?_LCD_DisplayString 0009                         ??_LCD_DisplayNumber 0013  
                                  _LCD_Init 1114                         ??_LCD_DisplayString 000B  
                          _LCD_GoToNextLine 1390                            __CFG_WDTPS$32768 000000  
                                ?_lcd_Reset 0001                               _lcd_DataWrite 1302  
                  GPIO_PinRead@returnStatus 0004                   __end_of_LCD_DisplayNumber 0B1C  
                 __end_of_LCD_DisplayString 1390                                   main@count 0044  
                        _lcd_SendCmdSignals 12CC                                   copy_data0 1280  
                             _lcd_BusyCheck 0F6E                         ?_lcd_SendCmdSignals 0001  
                                  __Hrparam 0000                                    __Lrparam 0000  
                            ?_lcd_DataWrite 0001                            __size_of___lldiv 0082  
                      ??_lcd_SendCmdSignals 0006               __size_of_lcd_SendHigherNibble 004C  
                       _lcd_SendLowerNibble 11C8                                    __ptext10 1114  
                                  __ptext11 116E                                    __ptext20 0DDC  
                                  __ptext12 143A                                    __ptext21 0C7C  
                                  __ptext13 13BA                                    __ptext22 140A  
                                  __ptext14 1334                                    __ptext23 1428  
                                  __ptext15 11C8                                    __ptext16 1214  
                                  __ptext17 12CC                                    __ptext18 0F6E  
                                  __ptext19 0B1C                              ?_lcd_BusyCheck 0001  
       LCD_DisplayNumber@v_numericSystem_u8 002A                               __size_of_main 0078  
                      ?_lcd_SendLowerNibble 0001                                 ??_lcd_Reset 0007  
                                _LCD_Printf 0614                  __size_of_LCD_DisplayNumber 01D0  
                __size_of_LCD_DisplayString 002A                       ??_lcd_SendLowerNibble 0006  
                          ___lldiv@dividend 0001                             _LCD_DisplayChar 13E4  
                           ??_lcd_DataWrite 0007                 __end_of_lcd_SendDataSignals 12CC  
                          ___lldiv@quotient 0009                    __end_of_LCD_GoToNextLine 13BA  
LCD_DisplayNumber@v_numOfDigitsToDisplay_u8 0012                             ??_lcd_BusyCheck 0006  
                    __size_of_GPIO_PinWrite 0160               LCD_DisplayNumber@v_number_u32 000E  
