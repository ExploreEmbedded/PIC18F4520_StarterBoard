

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Aug 13 19:45:58 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataBANK0
    48  001B86                     __pidataBANK0:
    49                           	opt stack 0
    50                           
    51                           ;initializer for _ARR_LcdLineNumAddress_U8
    52  001B86  80                 	db	128
    53  001B87  C0                 	db	192
    54  001B88  90                 	db	144
    55  001B89  D0                 	db	208
    56  0000                     _LATA	set	3977
    57  0000                     _LATB	set	3978
    58  0000                     _LATC	set	3979
    59  0000                     _LATD	set	3980
    60  0000                     _LATE	set	3981
    61  0000                     _PORTA	set	3968
    62  0000                     _PORTB	set	3969
    63  0000                     _PORTC	set	3970
    64  0000                     _PORTD	set	3971
    65  0000                     _PORTE	set	3972
    66  0000                     _RCREG	set	4014
    67  0000                     _RCSTA	set	4011
    68  0000                     _SPBRG	set	4015
    69  0000                     _TRISA	set	3986
    70  0000                     _TRISB	set	3987
    71  0000                     _TRISC	set	3988
    72  0000                     _TRISD	set	3989
    73  0000                     _TRISE	set	3990
    74  0000                     _TXREG	set	4013
    75  0000                     _TXSTA	set	4012
    76  0000                     _RCIF	set	31989
    77  0000                     _TXIF	set	31988
    78                           
    79                           	psect	smallconst
    80  000600                     __psmallconst:
    81                           	opt stack 0
    82  000600  00                 	db	0
    83  000601                     STR_2:
    84  000601  52                 	db	82	;'R'
    85  000602  65                 	db	101	;'e'
    86  000603  63                 	db	99	;'c'
    87  000604  65                 	db	101	;'e'
    88  000605  69                 	db	105	;'i'
    89  000606  76                 	db	118	;'v'
    90  000607  65                 	db	101	;'e'
    91  000608  64                 	db	100	;'d'
    92  000609  20                 	db	32
    93  00060A  53                 	db	83	;'S'
    94  00060B  74                 	db	116	;'t'
    95  00060C  72                 	db	114	;'r'
    96  00060D  69                 	db	105	;'i'
    97  00060E  6E                 	db	110	;'n'
    98  00060F  67                 	db	103	;'g'
    99  000610  3A                 	db	58	;':'
   100  000611  25                 	db	37
   101  000612  73                 	db	115	;'s'
   102  000613  20                 	db	32
   103  000614  20                 	db	32
   104  000615  20                 	db	32
   105  000616  73                 	db	115	;'s'
   106  000617  69                 	db	105	;'i'
   107  000618  7A                 	db	122	;'z'
   108  000619  65                 	db	101	;'e'
   109  00061A  3D                 	db	61	;'='
   110  00061B  25                 	db	37
   111  00061C  32                 	db	50	;'2'
   112  00061D  64                 	db	100	;'d'
   113  00061E  0A                 	db	10
   114  00061F  0D                 	db	13
   115  000620  00                 	db	0
   116  000621                     STR_1:
   117  000621  73                 	db	115	;'s'
   118  000622  65                 	db	101	;'e'
   119  000623  6E                 	db	110	;'n'
   120  000624  64                 	db	100	;'d'
   121  000625  20                 	db	32
   122  000626  64                 	db	100	;'d'
   123  000627  61                 	db	97	;'a'
   124  000628  74                 	db	116	;'t'
   125  000629  61                 	db	97	;'a'
   126  00062A  20                 	db	32
   127  00062B  66                 	db	102	;'f'
   128  00062C  72                 	db	114	;'r'
   129  00062D  6F                 	db	111	;'o'
   130  00062E  6D                 	db	109	;'m'
   131  00062F  20                 	db	32
   132  000630  20                 	db	32
   133  000631  73                 	db	115	;'s'
   134  000632  65                 	db	101	;'e'
   135  000633  72                 	db	114	;'r'
   136  000634  69                 	db	105	;'i'
   137  000635  61                 	db	97	;'a'
   138  000636  6C                 	db	108	;'l'
   139  000637  20                 	db	32
   140  000638  74                 	db	116	;'t'
   141  000639  65                 	db	101	;'e'
   142  00063A  72                 	db	114	;'r'
   143  00063B  6D                 	db	109	;'m'
   144  00063C  69                 	db	105	;'i'
   145  00063D  6E                 	db	110	;'n'
   146  00063E  61                 	db	97	;'a'
   147  00063F  6C                 	db	108	;'l'
   148  000640  00                 	db	0
   149  000641                     STR_3:
   150  000641  73                 	db	115	;'s'
   151  000642  74                 	db	116	;'t'
   152  000643  72                 	db	114	;'r'
   153  000644  3A                 	db	58	;':'
   154  000645  25                 	db	37
   155  000646  73                 	db	115	;'s'
   156  000647  20                 	db	32
   157  000648  73                 	db	115	;'s'
   158  000649  69                 	db	105	;'i'
   159  00064A  7A                 	db	122	;'z'
   160  00064B  65                 	db	101	;'e'
   161  00064C  3D                 	db	61	;'='
   162  00064D  25                 	db	37
   163  00064E  32                 	db	50	;'2'
   164  00064F  64                 	db	100	;'d'
   165  000650  00                 	db	0
   166                           
   167                           ; #config settings
   168  000651  00                 	db	0	; dummy byte at the end
   169  0000                     
   170                           	psect	cinit
   171  0019C8                     __pcinit:
   172                           	opt stack 0
   173  0019C8                     start_initialization:
   174                           	opt stack 0
   175  0019C8                     __initialization:
   176                           	opt stack 0
   177                           
   178                           ; Clear objects allocated to BANK0 (14 bytes)
   179  0019C8  EE00  F080         	lfsr	0,__pbssBANK0
   180  0019CC  0E0E               	movlw	14
   181  0019CE                     clear_0:
   182  0019CE  6AEE               	clrf	postinc0,c
   183  0019D0  06E8               	decf	wreg,f,c
   184  0019D2  E1FD               	bnz	clear_0
   185                           
   186                           ; Clear objects allocated to COMRAM (2 bytes)
   187  0019D4  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   188  0019D6  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   189                           
   190                           ; Initialize objects allocated to BANK0 (4 bytes)
   191                           ; load TBLPTR registers with __pidataBANK0
   192  0019D8  0E86               	movlw	low __pidataBANK0
   193  0019DA  6EF6               	movwf	tblptrl,c
   194  0019DC  0E1B               	movlw	high __pidataBANK0
   195  0019DE  6EF7               	movwf	tblptrh,c
   196  0019E0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   197  0019E2  6EF8               	movwf	tblptru,c
   198  0019E4  EE00  F08E         	lfsr	0,__pdataBANK0
   199  0019E8  EE10 F004          	lfsr	1,4
   200  0019EC                     copy_data0:
   201  0019EC  0009               	tblrd		*+
   202  0019EE  CFF5 FFEE          	movff	tablat,postinc0
   203  0019F2  50E5               	movf	postdec1,w,c
   204  0019F4  50E1               	movf	fsr1l,w,c
   205  0019F6  E1FA               	bnz	copy_data0
   206  0019F8                     end_of_initialization:
   207                           	opt stack 0
   208  0019F8                     __end_of__initialization:
   209                           	opt stack 0
   210  0019F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   211  0019FA  6EF8               	movwf	tblptru,c
   212  0019FC  0100               	movlb	0
   213  0019FE  EFBD  F00A         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	bssCOMRAM
   224  00007B                     __pbssCOMRAM:
   225                           	opt stack 0
   226  00007B                     _v_LcdTrackCursorPos_U8:
   227                           	opt stack 0
   228  00007B                     	ds	1
   229  00007C                     _v_LcdTrackLineNum_U8:
   230                           	opt stack 0
   231  00007C                     	ds	1
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           postdec1	equ	0xFE5
   239                           fsr1l	equ	0xFE1
   240                           
   241                           	psect	bssBANK0
   242  000080                     __pbssBANK0:
   243                           	opt stack 0
   244  000080                     _LCDConfig:
   245                           	opt stack 0
   246  000080                     	ds	14
   247                           tblptru	equ	0xFF8
   248                           tblptrh	equ	0xFF7
   249                           tblptrl	equ	0xFF6
   250                           tablat	equ	0xFF5
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           postdec1	equ	0xFE5
   254                           fsr1l	equ	0xFE1
   255                           
   256                           	psect	dataBANK0
   257  00008E                     __pdataBANK0:
   258                           	opt stack 0
   259  00008E                     _ARR_LcdLineNumAddress_U8:
   260                           	opt stack 0
   261  00008E                     	ds	4
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           postdec1	equ	0xFE5
   269                           fsr1l	equ	0xFE1
   270                           
   271                           	psect	cstackCOMRAM
   272  000001                     __pcstackCOMRAM:
   273                           	opt stack 0
   274  000001                     ??_GPIO_PinRead:
   275  000001                     ?___lldiv:
   276                           	opt stack 0
   277  000001                     UART_TxChar@v_uartData_u8:
   278                           	opt stack 0
   279  000001                     GPIO_PinDirection@var_pinDirn_u8:
   280                           	opt stack 0
   281  000001                     GPIO_PinWrite@var_pinValue_u8:
   282                           	opt stack 0
   283  000001                     DELAY_us@us_count:
   284                           	opt stack 0
   285  000001                     ___lldiv@dividend:
   286                           	opt stack 0
   287                           
   288                           ; 4 bytes @ 0x0
   289  000001                     	ds	1
   290  000002                     ??_GPIO_PinDirection:
   291  000002                     ??_GPIO_PinWrite:
   292  000002                     UART_TxString@ptr_string:
   293                           	opt stack 0
   294  000002                     UART_RxString@ptr_string:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x1
   298  000002                     	ds	1
   299  000003                     GPIO_PinRead@var_portNumber_u8:
   300                           	opt stack 0
   301  000003                     DELAY_ms@ms_count:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x2
   305  000003                     	ds	1
   306  000004                     UART_RxString@len:
   307                           	opt stack 0
   308  000004                     GPIO_PinDirection@var_portNumber_u8:
   309                           	opt stack 0
   310  000004                     GPIO_PinWrite@var_portNumber_u8:
   311                           	opt stack 0
   312  000004                     GPIO_PinRead@returnStatus:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x3
   316  000004                     	ds	1
   317  000005                     UART_RxString@ch:
   318                           	opt stack 0
   319  000005                     GPIO_PinDirection@enm_pinNumber:
   320                           	opt stack 0
   321  000005                     GPIO_PinWrite@enm_pinNumber:
   322                           	opt stack 0
   323  000005                     GPIO_PinRead@enm_pinNumber:
   324                           	opt stack 0
   325  000005                     ___lldiv@divisor:
   326                           	opt stack 0
   327                           
   328                           ; 4 bytes @ 0x4
   329  000005                     	ds	1
   330  000006                     LCD_SetUp@RW:
   331                           	opt stack 0
   332  000006                     lcd_BusyCheck@busyflag:
   333                           	opt stack 0
   334  000006                     lcd_SendHigherNibble@dataByte:
   335                           	opt stack 0
   336  000006                     lcd_SendLowerNibble@dataByte:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x5
   340  000006                     	ds	1
   341  000007                     LCD_SetUp@EN:
   342                           	opt stack 0
   343  000007                     LCD_CmdWrite@v_lcdCmd_u8:
   344                           	opt stack 0
   345  000007                     lcd_DataWrite@dataByte:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x6
   349  000007                     	ds	1
   350  000008                     LCD_SetUp@D0:
   351                           	opt stack 0
   352  000008                     LCD_GoToLine@v_lineNumber_u8:
   353                           	opt stack 0
   354  000008                     LCD_DisplayChar@v_lcdData_u8:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x7
   358  000008                     	ds	1
   359  000009                     LCD_SetUp@D1:
   360                           	opt stack 0
   361  000009                     LCD_Init@v_MaxCharsPerLine_u8:
   362                           	opt stack 0
   363  000009                     LCD_DisplayString@ptr_stringPointer_u8:
   364                           	opt stack 0
   365  000009                     ___lldiv@quotient:
   366                           	opt stack 0
   367                           
   368                           ; 4 bytes @ 0x8
   369  000009                     	ds	1
   370  00000A                     LCD_SetUp@D2:
   371                           	opt stack 0
   372  00000A                     LCD_Init@v_lcdNoOfLines_u8:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x9
   376  00000A                     	ds	1
   377  00000B                     LCD_SetUp@D3:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xA
   381  00000B                     	ds	1
   382  00000C                     LCD_SetUp@D4:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xB
   386  00000C                     	ds	1
   387  00000D                     LCD_SetUp@D5:
   388                           	opt stack 0
   389  00000D                     ___lldiv@counter:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0xC
   393  00000D                     	ds	1
   394  00000E                     LCD_SetUp@D6:
   395                           	opt stack 0
   396  00000E                     UART_SetBaudRate@v_baudRate_u32:
   397                           	opt stack 0
   398  00000E                     UART_TxNumber@v_number_u32:
   399                           	opt stack 0
   400  00000E                     LCD_DisplayNumber@v_number_u32:
   401                           	opt stack 0
   402                           
   403                           ; 4 bytes @ 0xD
   404  00000E                     	ds	1
   405  00000F                     LCD_SetUp@D7:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0xE
   409  00000F                     	ds	1
   410  000010                     LCD_SetUp@RS:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0xF
   414  000010                     	ds	2
   415  000012                     ??_UART_SetBaudRate:
   416  000012                     UART_TxNumber@v_numOfDigitsToTransmit_u8:
   417                           	opt stack 0
   418  000012                     LCD_DisplayNumber@v_numOfDigitsToDisplay_u8:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x11
   422  000012                     	ds	1
   423  000013                     ??_UART_TxNumber:
   424  000013                     ??_LCD_DisplayNumber:
   425                           
   426                           ; 1 bytes @ 0x12
   427  000013                     	ds	3
   428  000016                     UART_SetBaudRate@RegValue:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x15
   432  000016                     	ds	1
   433  000017                     UART_Init@v_baudRate_u32:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x16
   437  000017                     	ds	4
   438  00001B                     
   439                           ; 1 bytes @ 0x1A
   440  00001B                     	ds	3
   441  00001E                     UART_TxNumber@a:
   442                           	opt stack 0
   443  00001E                     LCD_DisplayNumber@a:
   444                           	opt stack 0
   445                           
   446                           ; 10 bytes @ 0x1D
   447  00001E                     	ds	10
   448  000028                     _UART_TxNumber$65:
   449                           	opt stack 0
   450  000028                     _LCD_DisplayNumber$270:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x27
   454  000028                     	ds	2
   455  00002A                     UART_TxNumber@v_numericSystem_u8:
   456                           	opt stack 0
   457  00002A                     LCD_DisplayNumber@v_numericSystem_u8:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x29
   461  00002A                     	ds	1
   462  00002B                     UART_TxNumber@i:
   463                           	opt stack 0
   464  00002B                     LCD_DisplayNumber@i:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x2A
   468  00002B                     	ds	1
   469  00002C                     ?_UART_Printf:
   470                           	opt stack 0
   471  00002C                     ?_LCD_Printf:
   472                           	opt stack 0
   473  00002C                     UART_Printf@argList:
   474                           	opt stack 0
   475  00002C                     LCD_Printf@argList:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x2B
   479  00002C                     	ds	6
   480  000032                     UART_Printf@str:
   481                           	opt stack 0
   482  000032                     LCD_Printf@str:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x31
   486  000032                     	ds	2
   487  000034                     UART_Printf@v_num_s32:
   488                           	opt stack 0
   489  000034                     LCD_Printf@v_num_s32:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x33
   493  000034                     	ds	4
   494  000038                     UART_Printf@v_num_s16:
   495                           	opt stack 0
   496  000038                     LCD_Printf@v_num_s16:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x37
   500  000038                     	ds	2
   501  00003A                     UART_Printf@v_num_u32:
   502                           	opt stack 0
   503  00003A                     LCD_Printf@v_num_u32:
   504                           	opt stack 0
   505                           
   506                           ; 4 bytes @ 0x39
   507  00003A                     	ds	4
   508  00003E                     UART_Printf@v_num_u16:
   509                           	opt stack 0
   510  00003E                     LCD_Printf@v_num_u16:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x3D
   514  00003E                     	ds	2
   515  000040                     UART_Printf@ptr:
   516                           	opt stack 0
   517  000040                     LCD_Printf@ptr:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x3F
   521  000040                     	ds	2
   522  000042                     UART_Printf@ch:
   523                           	opt stack 0
   524  000042                     LCD_Printf@ch:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x41
   528  000042                     	ds	1
   529  000043                     UART_Printf@v_numOfDigitsToTransmit_u8:
   530                           	opt stack 0
   531  000043                     LCD_Printf@v_numOfDigitsToDisp_u8:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x42
   535  000043                     	ds	1
   536  000044                     UART_Printf@argp:
   537                           	opt stack 0
   538  000044                     LCD_Printf@argp:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x43
   542  000044                     	ds	2
   543  000046                     ??_main:
   544                           
   545                           ; 1 bytes @ 0x45
   546  000046                     	ds	1
   547  000047                     main@str:
   548                           	opt stack 0
   549                           
   550                           ; 50 bytes @ 0x46
   551  000047                     	ds	50
   552  000079                     main@len:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x78
   556  000079                     	ds	2
   557                           tblptru	equ	0xFF8
   558                           tblptrh	equ	0xFF7
   559                           tblptrl	equ	0xFF6
   560                           tablat	equ	0xFF5
   561                           postinc0	equ	0xFEE
   562                           wreg	equ	0xFE8
   563                           postdec1	equ	0xFE5
   564                           fsr1l	equ	0xFE1
   565                           
   566 ;;
   567 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   568 ;;
   569 ;; *************** function _main *****************
   570 ;; Defined at:
   571 ;;		line 39 in file "main.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  str            50   70[COMRAM] unsigned char [50]
   576 ;;  len             2  120[COMRAM] int 
   577 ;; Return value:  Size  Location     Type
   578 ;;                  2  448[None  ] int 
   579 ;; Registers used:
   580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   586 ;;      Params:         0       0       0       0       0       0       0
   587 ;;      Locals:        52       0       0       0       0       0       0
   588 ;;      Temps:          1       0       0       0       0       0       0
   589 ;;      Totals:        53       0       0       0       0       0       0
   590 ;;Total ram usage:       53 bytes
   591 ;; Hardware stack levels required when called:    8
   592 ;; This function calls:
   593 ;;		_LCD_Clear
   594 ;;		_LCD_DisplayString
   595 ;;		_LCD_Init
   596 ;;		_LCD_Printf
   597 ;;		_LCD_SetUp
   598 ;;		_UART_Init
   599 ;;		_UART_Printf
   600 ;;		_UART_RxString
   601 ;; This function is called by:
   602 ;;		Startup code after reset
   603 ;; This function uses a non-reentrant model
   604 ;;
   605                           
   606                           	psect	text0
   607  00157A                     __ptext0:
   608                           	opt stack 0
   609  00157A                     _main:
   610                           	opt stack 23
   611                           
   612                           ;main.c: 41: char str[50];
   613                           ;main.c: 42: int len = 0;
   614                           
   615                           ;incstack = 0
   616  00157A  0E00               	movlw	0
   617  00157C  6E7A               	movwf	main@len+1,c
   618  00157E  0E00               	movlw	0
   619  001580  6E79               	movwf	main@len,c
   620                           
   621                           ;main.c: 44: LCD_SetUp(PB_0, PB_1, PB_2, P_NC, P_NC, P_NC, P_NC, PB_4, PB_5, PB_6, PB_7)
      +                          ;
   622  001582  0E09               	movlw	9
   623  001584  6E06               	movwf	LCD_SetUp@RW,c
   624  001586  0E0A               	movlw	10
   625  001588  6E07               	movwf	LCD_SetUp@EN,c
   626  00158A  0EFF               	movlw	255
   627  00158C  6E08               	movwf	LCD_SetUp@D0,c
   628  00158E  0EFF               	movlw	255
   629  001590  6E09               	movwf	LCD_SetUp@D1,c
   630  001592  0EFF               	movlw	255
   631  001594  6E0A               	movwf	LCD_SetUp@D2,c
   632  001596  0EFF               	movlw	255
   633  001598  6E0B               	movwf	LCD_SetUp@D3,c
   634  00159A  0E0C               	movlw	12
   635  00159C  6E0C               	movwf	LCD_SetUp@D4,c
   636  00159E  0E0D               	movlw	13
   637  0015A0  6E0D               	movwf	LCD_SetUp@D5,c
   638  0015A2  0E0E               	movlw	14
   639  0015A4  6E0E               	movwf	LCD_SetUp@D6,c
   640  0015A6  0E0F               	movlw	15
   641  0015A8  6E0F               	movwf	LCD_SetUp@D7,c
   642  0015AA  0E08               	movlw	8
   643  0015AC  ECFA  F009         	call	_LCD_SetUp
   644                           
   645                           ;main.c: 45: LCD_Init(2, 16);
   646  0015B0  0E10               	movlw	16
   647  0015B2  6E09               	movwf	LCD_Init@v_MaxCharsPerLine_u8,c
   648  0015B4  0E02               	movlw	2
   649  0015B6  ECCB  F00B         	call	_LCD_Init
   650                           
   651                           ;main.c: 46: UART_Init(9600);
   652  0015BA  0E80               	movlw	128
   653  0015BC  6E17               	movwf	UART_Init@v_baudRate_u32,c
   654  0015BE  0E25               	movlw	37
   655  0015C0  6E18               	movwf	UART_Init@v_baudRate_u32+1,c
   656  0015C2  0E00               	movlw	0
   657  0015C4  6E19               	movwf	UART_Init@v_baudRate_u32+2,c
   658  0015C6  0E00               	movlw	0
   659  0015C8  6E1A               	movwf	UART_Init@v_baudRate_u32+3,c
   660  0015CA  EC87  F00D         	call	_UART_Init	;wreg free
   661                           
   662                           ;main.c: 47: LCD_DisplayString("send data from  serial terminal");
   663  0015CE  0E21               	movlw	low STR_1
   664  0015D0  6E09               	movwf	LCD_DisplayString@ptr_stringPointer_u8,c
   665  0015D2  0E06               	movlw	high STR_1
   666  0015D4  6E0A               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1,c
   667  0015D6  EC7D  F00C         	call	_LCD_DisplayString	;wreg free
   668  0015DA                     l2571:
   669                           
   670                           ;main.c: 49: {
   671                           ;main.c: 50: len = UART_RxString(str);
   672  0015DA  0E47               	movlw	low main@str
   673  0015DC  6E02               	movwf	UART_RxString@ptr_string,c
   674  0015DE  0E00               	movlw	high main@str
   675  0015E0  6E03               	movwf	UART_RxString@ptr_string+1,c
   676  0015E2  EC99  F00B         	call	_UART_RxString	;wreg free
   677  0015E6  6E46               	movwf	??_main& (0+255),c
   678  0015E8  5046               	movf	??_main,w,c
   679  0015EA  6E79               	movwf	main@len,c
   680  0015EC  6A7A               	clrf	main@len+1,c
   681                           
   682                           ;main.c: 51: if (len > 0)
   683  0015EE  BE7A               	btfsc	main@len+1,7,c
   684  0015F0  D7F4               	goto	l2571
   685  0015F2  507A               	movf	main@len+1,w,c
   686  0015F4  E103               	bnz	u2930
   687  0015F6  0479               	decf	main@len,w,c
   688  0015F8  A0D8               	btfss	status,0,c
   689  0015FA  D7EF               	goto	l2571
   690  0015FC                     u2930:
   691                           
   692                           ;main.c: 52: {
   693                           ;main.c: 53: UART_Printf("Received String:%s   size=%2d\n\r", str, len);
   694  0015FC  0E01               	movlw	low STR_2
   695  0015FE  6E2C               	movwf	UART_Printf@argList,c
   696  001600  0E06               	movlw	high STR_2
   697  001602  6E2D               	movwf	UART_Printf@argList+1,c
   698  001604  0E47               	movlw	low main@str
   699  001606  6E2E               	movwf	?_UART_Printf+2,c
   700  001608  0E00               	movlw	high main@str
   701  00160A  6E2F               	movwf	?_UART_Printf+3,c
   702  00160C  C079  F030         	movff	main@len,?_UART_Printf+4
   703  001610  C07A  F031         	movff	main@len+1,?_UART_Printf+5
   704  001614  EC29  F003         	call	_UART_Printf	;wreg free
   705                           
   706                           ;main.c: 54: LCD_Clear();
   707  001618  ECB7  F00D         	call	_LCD_Clear	;wreg free
   708                           
   709                           ;main.c: 55: LCD_Printf("str:%s size=%2d", str, len);
   710  00161C  0E41               	movlw	low STR_3
   711  00161E  6E2C               	movwf	LCD_Printf@argList,c
   712  001620  0E06               	movlw	high STR_3
   713  001622  6E2D               	movwf	LCD_Printf@argList+1,c
   714  001624  0E47               	movlw	low main@str
   715  001626  6E2E               	movwf	?_LCD_Printf+2,c
   716  001628  0E00               	movlw	high main@str
   717  00162A  6E2F               	movwf	?_LCD_Printf+3,c
   718  00162C  C079  F030         	movff	main@len,?_LCD_Printf+4
   719  001630  C07A  F031         	movff	main@len+1,?_LCD_Printf+5
   720  001634  ECC5  F004         	call	_LCD_Printf	;wreg free
   721  001638  D7D0               	goto	l2571
   722  00163A                     __end_of_main:
   723                           	opt stack 0
   724                           tblptru	equ	0xFF8
   725                           tblptrh	equ	0xFF7
   726                           tblptrl	equ	0xFF6
   727                           tablat	equ	0xFF5
   728                           postinc0	equ	0xFEE
   729                           wreg	equ	0xFE8
   730                           postdec1	equ	0xFE5
   731                           fsr1l	equ	0xFE1
   732                           status	equ	0xFD8
   733                           
   734 ;; *************** function _UART_RxString *****************
   735 ;; Defined at:
   736 ;;		line 198 in file "../00-libfiles/uart.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;  ptr_string      2    1[COMRAM] PTR unsigned char 
   739 ;;		 -> main@str(50), 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  ch              1    4[COMRAM] unsigned char 
   742 ;;  len             1    3[COMRAM] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      unsigned char 
   745 ;; Registers used:
   746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   752 ;;      Params:         2       0       0       0       0       0       0
   753 ;;      Locals:         2       0       0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0
   755 ;;      Totals:         4       0       0       0       0       0       0
   756 ;;Total ram usage:        4 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    1
   759 ;; This function calls:
   760 ;;		_UART_RxChar
   761 ;;		_UART_TxChar
   762 ;; This function is called by:
   763 ;;		_main
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text1
   768  001732                     __ptext1:
   769                           	opt stack 0
   770  001732                     _UART_RxString:
   771                           	opt stack 29
   772                           
   773                           ;uart.c: 200: char ch;
   774                           ;uart.c: 201: uint8_t len = 0;
   775                           
   776                           ;incstack = 0
   777  001732  0E00               	movlw	0
   778  001734  6E04               	movwf	UART_RxString@len,c
   779  001736                     l2181:
   780                           
   781                           ;uart.c: 203: {
   782                           ;uart.c: 204: ch=UART_RxChar();
   783  001736  ECBE  F00D         	call	_UART_RxChar	;wreg free
   784  00173A  6E05               	movwf	UART_RxString@ch,c
   785                           
   786                           ;uart.c: 205: UART_TxChar(ch);
   787  00173C  5005               	movf	UART_RxString@ch,w,c
   788  00173E  ECB0  F00D         	call	_UART_TxChar
   789                           
   790                           ;uart.c: 207: if((ch=='\r') || (ch=='\n'))
   791  001742  0E0D               	movlw	13
   792  001744  1805               	xorwf	UART_RxString@ch,w,c
   793  001746  B4D8               	btfsc	status,2,c
   794  001748  D004               	goto	l2189
   795  00174A  0E0A               	movlw	10
   796  00174C  1805               	xorwf	UART_RxString@ch,w,c
   797  00174E  A4D8               	btfss	status,2,c
   798  001750  D00B               	goto	l2193
   799  001752                     l2189:
   800                           
   801                           ;uart.c: 208: {
   802                           ;uart.c: 209: ptr_string[len]=0;
   803  001752  5004               	movf	UART_RxString@len,w,c
   804  001754  0D01               	mullw	1
   805  001756  50F3               	movf	prodl,w,c
   806  001758  2402               	addwf	UART_RxString@ptr_string,w,c
   807  00175A  6ED9               	movwf	fsr2l,c
   808  00175C  50F4               	movf	prodh,w,c
   809  00175E  2003               	addwfc	UART_RxString@ptr_string+1,w,c
   810  001760  6EDA               	movwf	fsr2h,c
   811  001762  0E00               	movlw	0
   812  001764  6EDF               	movwf	indf2,c
   813                           
   814                           ;uart.c: 210: break;
   815  001766  D015               	goto	l2203
   816  001768                     l2193:
   817                           
   818                           ;uart.c: 212: else if((ch=='\b') && (len!=0))
   819  001768  0E08               	movlw	8
   820  00176A  1805               	xorwf	UART_RxString@ch,w,c
   821  00176C  A4D8               	btfss	status,2,c
   822  00176E  D005               	goto	l2199
   823  001770  5004               	movf	UART_RxString@len,w,c
   824  001772  B4D8               	btfsc	status,2,c
   825  001774  D002               	goto	l2199
   826                           
   827                           ;uart.c: 213: {
   828                           ;uart.c: 214: len--;
   829  001776  0604               	decf	UART_RxString@len,f,c
   830                           
   831                           ;uart.c: 215: }
   832  001778  D7DE               	goto	l2181
   833  00177A                     l2199:
   834                           
   835                           ;uart.c: 216: else
   836                           ;uart.c: 217: {
   837                           ;uart.c: 218: ptr_string[len]=ch;
   838  00177A  5004               	movf	UART_RxString@len,w,c
   839  00177C  0D01               	mullw	1
   840  00177E  50F3               	movf	prodl,w,c
   841  001780  2402               	addwf	UART_RxString@ptr_string,w,c
   842  001782  6ED9               	movwf	fsr2l,c
   843  001784  50F4               	movf	prodh,w,c
   844  001786  2003               	addwfc	UART_RxString@ptr_string+1,w,c
   845  001788  6EDA               	movwf	fsr2h,c
   846  00178A  C005  FFDF         	movff	UART_RxString@ch,indf2
   847                           
   848                           ;uart.c: 219: len++;
   849  00178E  2A04               	incf	UART_RxString@len,f,c
   850  001790  D7D2               	goto	l2181
   851  001792                     l2203:
   852                           
   853                           ;uart.c: 220: }
   854                           ;uart.c: 221: }
   855                           ;uart.c: 222: return len;
   856  001792  5004               	movf	UART_RxString@len,w,c
   857  001794  0012               	return	
   858  001796                     __end_of_UART_RxString:
   859                           	opt stack 0
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           prodh	equ	0xFF4
   865                           prodl	equ	0xFF3
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           postdec1	equ	0xFE5
   869                           fsr1l	equ	0xFE1
   870                           indf2	equ	0xFDF
   871                           fsr2h	equ	0xFDA
   872                           fsr2l	equ	0xFD9
   873                           status	equ	0xFD8
   874                           
   875 ;; *************** function _UART_RxChar *****************
   876 ;; Defined at:
   877 ;;		line 123 in file "../00-libfiles/uart.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      unsigned char 
   884 ;; Registers used:
   885 ;;		wreg, status,2
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   891 ;;      Params:         0       0       0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0
   894 ;;      Totals:         0       0       0       0       0       0       0
   895 ;;Total ram usage:        0 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; This function calls:
   898 ;;		Nothing
   899 ;; This function is called by:
   900 ;;		_UART_RxString
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text2
   905  001B7C                     __ptext2:
   906                           	opt stack 0
   907  001B7C                     _UART_RxChar:
   908                           	opt stack 29
   909  001B7C                     l33:
   910  001B7C  AA9E               	btfss	3998,5,c	;volatile
   911  001B7E  D7FE               	goto	l33
   912                           
   913                           ;uart.c: 126: RCIF=0;
   914  001B80  9A9E               	bcf	3998,5,c	;volatile
   915                           
   916                           ;uart.c: 127: return(RCREG);
   917  001B82  50AE               	movf	4014,w,c	;volatile
   918  001B84  0012               	return	
   919  001B86                     __end_of_UART_RxChar:
   920                           	opt stack 0
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           prodh	equ	0xFF4
   926                           prodl	equ	0xFF3
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1l	equ	0xFE1
   931                           indf2	equ	0xFDF
   932                           fsr2h	equ	0xFDA
   933                           fsr2l	equ	0xFD9
   934                           status	equ	0xFD8
   935                           
   936 ;; *************** function _UART_Printf *****************
   937 ;; Defined at:
   938 ;;		line 413 in file "../00-libfiles/uart.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  argList         2   43[COMRAM] PTR const unsigned char 
   941 ;;		 -> STR_2(32), 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  v_num_u32       4   57[COMRAM] unsigned long 
   944 ;;  v_num_s32       4   51[COMRAM] long 
   945 ;;  argp            2   67[COMRAM] PTR void [1]
   946 ;;		 -> ?_UART_Printf(1), 
   947 ;;  ptr             2   63[COMRAM] PTR const unsigned char 
   948 ;;		 -> STR_2(32), 
   949 ;;  v_num_u16       2   61[COMRAM] unsigned int 
   950 ;;  v_num_s16       2   55[COMRAM] int 
   951 ;;  str             2   49[COMRAM] PTR unsigned char 
   952 ;;		 -> main@str(50), 
   953 ;;  v_numOfDigit    1   66[COMRAM] unsigned char 
   954 ;;  ch              1   65[COMRAM] unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   964 ;;      Params:         6       0       0       0       0       0       0
   965 ;;      Locals:        20       0       0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0
   967 ;;      Totals:        26       0       0       0       0       0       0
   968 ;;Total ram usage:       26 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    2
   971 ;; This function calls:
   972 ;;		_UART_TxChar
   973 ;;		_UART_TxNumber
   974 ;;		_UART_TxString
   975 ;; This function is called by:
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text3
   981  000652                     __ptext3:
   982                           	opt stack 0
   983  000652                     _UART_Printf:
   984                           	opt stack 28
   985                           
   986                           ;uart.c: 415: const char *ptr;
   987                           ;uart.c: 416: va_list argp;
   988                           ;uart.c: 417: sint16_t v_num_s16;
   989                           ;uart.c: 418: sint32_t v_num_s32;
   990                           ;uart.c: 419: uint16_t v_num_u16;
   991                           ;uart.c: 420: uint32_t v_num_u32;
   992                           ;uart.c: 421: char *str;
   993                           ;uart.c: 422: char ch;
   994                           ;uart.c: 423: uint8_t v_numOfDigitsToTransmit_u8;
   995                           ;uart.c: 429: *argp = __va_start();
   996                           
   997                           ;incstack = 0
   998  000652  0E2E               	movlw	low (?_UART_Printf+2)
   999  000654  6E44               	movwf	UART_Printf@argp,c
  1000  000656  0E00               	movlw	high (?_UART_Printf+2)
  1001  000658  6E45               	movwf	UART_Printf@argp+1,c
  1002                           
  1003                           ;uart.c: 432: for(ptr = argList; *ptr != '\0'; ptr++)
  1004  00065A  C02C  F040         	movff	UART_Printf@argList,UART_Printf@ptr
  1005  00065E  C02D  F041         	movff	UART_Printf@argList+1,UART_Printf@ptr+1
  1006  000662  D189               	goto	l2323
  1007  000664                     l2209:
  1008                           
  1009                           ;uart.c: 433: {
  1010                           ;uart.c: 435: ch= *ptr;
  1011  000664  C040  FFF6         	movff	UART_Printf@ptr,tblptrl
  1012  000668  C041  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  1013  00066C                     	if	0	;tblptru may be non-zero
  1014  00066C                     	endif
  1015  00066C                     	if	0	;tblptru may be non-zero
  1016  00066C                     	endif
  1017  00066C  0008               	tblrd		*
  1018  00066E  CFF5 F042          	movff	tablat,UART_Printf@ch
  1019                           
  1020                           ;uart.c: 436: if(ch == '%')
  1021  000672  0E25               	movlw	37
  1022  000674  1842               	xorwf	UART_Printf@ch,w,c
  1023  000676  A4D8               	btfss	status,2,c
  1024  000678  D179               	goto	l2319
  1025                           
  1026                           ;uart.c: 437: {
  1027                           ;uart.c: 438: ptr++;
  1028  00067A  4A40               	infsnz	UART_Printf@ptr,f,c
  1029  00067C  2A41               	incf	UART_Printf@ptr+1,f,c
  1030                           
  1031                           ;uart.c: 439: ch = *ptr;
  1032  00067E  C040  FFF6         	movff	UART_Printf@ptr,tblptrl
  1033  000682  C041  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  1034  000686                     	if	0	;tblptru may be non-zero
  1035  000686                     	endif
  1036  000686                     	if	0	;tblptru may be non-zero
  1037  000686                     	endif
  1038  000686  0008               	tblrd		*
  1039  000688  CFF5 F042          	movff	tablat,UART_Printf@ch
  1040                           
  1041                           ;uart.c: 440: if((ch>=0x30) && (ch<=0x39))
  1042  00068C  0E2F               	movlw	47
  1043  00068E  6442               	cpfsgt	UART_Printf@ch,c
  1044  000690  D01C               	goto	l92
  1045  000692  0E3A               	movlw	58
  1046  000694  6042               	cpfslt	UART_Printf@ch,c
  1047  000696  D019               	goto	l92
  1048                           
  1049                           ;uart.c: 441: {
  1050                           ;uart.c: 442: v_numOfDigitsToTransmit_u8 = 0;
  1051  000698  0E00               	movlw	0
  1052  00069A  6E43               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  1053                           
  1054                           ;uart.c: 443: while((ch>=0x30) && (ch<=0x39))
  1055  00069C  D00F               	goto	l2229
  1056  00069E                     l2223:
  1057                           
  1058                           ;uart.c: 444: {
  1059                           ;uart.c: 445: v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30)
      +                          ;
  1060  00069E  5043               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  1061  0006A0  0D0A               	mullw	10
  1062  0006A2  50F3               	movf	prodl,w,c
  1063  0006A4  2442               	addwf	UART_Printf@ch,w,c
  1064  0006A6  0FD0               	addlw	208
  1065  0006A8  6E43               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  1066                           
  1067                           ;uart.c: 446: ptr++;
  1068  0006AA  4A40               	infsnz	UART_Printf@ptr,f,c
  1069  0006AC  2A41               	incf	UART_Printf@ptr+1,f,c
  1070                           
  1071                           ;uart.c: 447: ch = *ptr;
  1072  0006AE  C040  FFF6         	movff	UART_Printf@ptr,tblptrl
  1073  0006B2  C041  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  1074  0006B6                     	if	0	;tblptru may be non-zero
  1075  0006B6                     	endif
  1076  0006B6                     	if	0	;tblptru may be non-zero
  1077  0006B6                     	endif
  1078  0006B6  0008               	tblrd		*
  1079  0006B8  CFF5 F042          	movff	tablat,UART_Printf@ch
  1080  0006BC                     l2229:
  1081  0006BC  0E2F               	movlw	47
  1082  0006BE  6442               	cpfsgt	UART_Printf@ch,c
  1083  0006C0  D126               	goto	l2317
  1084  0006C2  0E39               	movlw	57
  1085  0006C4  6442               	cpfsgt	UART_Printf@ch,c
  1086  0006C6  D7EB               	goto	l2223
  1087  0006C8  D122               	goto	l2317
  1088  0006CA                     l92:
  1089                           
  1090                           ;uart.c: 450: else
  1091                           ;uart.c: 451: {
  1092                           ;uart.c: 452: v_numOfDigitsToTransmit_u8 = 0xffu;
  1093  0006CA  6843               	setf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  1094                           
  1095                           ;uart.c: 453: }
  1096                           ;uart.c: 456: switch(ch)
  1097  0006CC  D120               	goto	l2317
  1098  0006CE                     l2233:
  1099                           
  1100                           ;uart.c: 459: case 'c':
  1101                           ;uart.c: 460: ch = (*(uint8_t *)__va_arg((*(uint8_t **)argp), (uint8_t)0));
  1102  0006CE  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1103  0006D2  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1104  0006D6  50DF               	movf	indf2,w,c
  1105  0006D8  6E42               	movwf	UART_Printf@ch,c
  1106  0006DA  0E02               	movlw	2
  1107  0006DC  2644               	addwf	UART_Printf@argp,f,c
  1108  0006DE  0E00               	movlw	0
  1109  0006E0  2245               	addwfc	UART_Printf@argp+1,f,c
  1110                           
  1111                           ;uart.c: 461: UART_TxChar(ch);
  1112  0006E2  5042               	movf	UART_Printf@ch,w,c
  1113  0006E4  ECB0  F00D         	call	_UART_TxChar
  1114                           
  1115                           ;uart.c: 462: break;
  1116  0006E8  D144               	goto	l2321
  1117  0006EA                     l2239:
  1118                           
  1119                           ;uart.c: 465: v_num_s16 = (*(sint16_t *)__va_arg((*(sint16_t **)argp), (sint16_t)0));
  1120  0006EA  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1121  0006EE  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1122  0006F2  CFDE F038          	movff	postinc2,UART_Printf@v_num_s16
  1123  0006F6  CFDD F039          	movff	postdec2,UART_Printf@v_num_s16+1
  1124  0006FA  0E02               	movlw	2
  1125  0006FC  2644               	addwf	UART_Printf@argp,f,c
  1126  0006FE  0E00               	movlw	0
  1127  000700  2245               	addwfc	UART_Printf@argp+1,f,c
  1128                           
  1129                           ;uart.c: 466: if(v_num_s16<0)
  1130  000702  AE39               	btfss	UART_Printf@v_num_s16+1,7,c
  1131  000704  D007               	goto	l2249
  1132                           
  1133                           ;uart.c: 467: {
  1134                           ;uart.c: 468: v_num_s16 = -v_num_s16;
  1135  000706  6C38               	negf	UART_Printf@v_num_s16,c
  1136  000708  1E39               	comf	UART_Printf@v_num_s16+1,f,c
  1137  00070A  B0D8               	btfsc	status,0,c
  1138  00070C  2A39               	incf	UART_Printf@v_num_s16+1,f,c
  1139                           
  1140                           ;uart.c: 469: UART_TxChar('-');
  1141  00070E  0E2D               	movlw	45
  1142  000710  ECB0  F00D         	call	_UART_TxChar
  1143  000714                     l2249:
  1144                           
  1145                           ;uart.c: 470: }
  1146                           ;uart.c: 471: UART_TxNumber(10u,v_num_s16,v_numOfDigitsToTransmit_u8);
  1147  000714  C038  F00E         	movff	UART_Printf@v_num_s16,UART_TxNumber@v_number_u32
  1148  000718  C039  F00F         	movff	UART_Printf@v_num_s16+1,UART_TxNumber@v_number_u32+1
  1149  00071C  0E00               	movlw	0
  1150  00071E  BE0F               	btfsc	UART_TxNumber@v_number_u32+1,7,c
  1151  000720  0EFF               	movlw	-1
  1152  000722  6E10               	movwf	UART_TxNumber@v_number_u32+2,c
  1153  000724  6E11               	movwf	UART_TxNumber@v_number_u32+3,c
  1154  000726  C043  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  1155  00072A  0E0A               	movlw	10
  1156  00072C  EC61  F006         	call	_UART_TxNumber
  1157                           
  1158                           ;uart.c: 472: break;
  1159  000730  D120               	goto	l2321
  1160  000732                     l2251:
  1161                           
  1162                           ;uart.c: 475: v_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  1163  000732  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1164  000736  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1165  00073A  CFDE F034          	movff	postinc2,UART_Printf@v_num_s32
  1166  00073E  CFDE F035          	movff	postinc2,UART_Printf@v_num_s32+1
  1167  000742  CFDE F036          	movff	postinc2,UART_Printf@v_num_s32+2
  1168  000746  CFDE F037          	movff	postinc2,UART_Printf@v_num_s32+3
  1169  00074A  0E04               	movlw	4
  1170  00074C  2644               	addwf	UART_Printf@argp,f,c
  1171  00074E  0E00               	movlw	0
  1172  000750  2245               	addwfc	UART_Printf@argp+1,f,c
  1173                           
  1174                           ;uart.c: 476: if(v_num_s32<0)
  1175  000752  AE37               	btfss	UART_Printf@v_num_s32+3,7,c
  1176  000754  D00B               	goto	l2261
  1177                           
  1178                           ;uart.c: 477: {
  1179                           ;uart.c: 478: v_num_s32 = -v_num_s32;
  1180  000756  1E37               	comf	UART_Printf@v_num_s32+3,f,c
  1181  000758  1E36               	comf	UART_Printf@v_num_s32+2,f,c
  1182  00075A  1E35               	comf	UART_Printf@v_num_s32+1,f,c
  1183  00075C  6C34               	negf	UART_Printf@v_num_s32,c
  1184  00075E  0E00               	movlw	0
  1185  000760  2235               	addwfc	UART_Printf@v_num_s32+1,f,c
  1186  000762  2236               	addwfc	UART_Printf@v_num_s32+2,f,c
  1187  000764  2237               	addwfc	UART_Printf@v_num_s32+3,f,c
  1188                           
  1189                           ;uart.c: 479: UART_TxChar('-');
  1190  000766  0E2D               	movlw	45
  1191  000768  ECB0  F00D         	call	_UART_TxChar
  1192  00076C                     l2261:
  1193                           
  1194                           ;uart.c: 480: }
  1195                           ;uart.c: 481: UART_TxNumber(10u,v_num_s32,v_numOfDigitsToTransmit_u8);
  1196  00076C  C034  F00E         	movff	UART_Printf@v_num_s32,UART_TxNumber@v_number_u32
  1197  000770  C035  F00F         	movff	UART_Printf@v_num_s32+1,UART_TxNumber@v_number_u32+1
  1198  000774  C036  F010         	movff	UART_Printf@v_num_s32+2,UART_TxNumber@v_number_u32+2
  1199  000778  C037  F011         	movff	UART_Printf@v_num_s32+3,UART_TxNumber@v_number_u32+3
  1200  00077C  C043  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  1201  000780  0E0A               	movlw	10
  1202  000782  EC61  F006         	call	_UART_TxNumber
  1203                           
  1204                           ;uart.c: 482: break;
  1205  000786  D0F5               	goto	l2321
  1206  000788                     l2263:
  1207                           
  1208                           ;uart.c: 485: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1209  000788  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1210  00078C  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1211  000790  CFDE F03E          	movff	postinc2,UART_Printf@v_num_u16
  1212  000794  CFDD F03F          	movff	postdec2,UART_Printf@v_num_u16+1
  1213  000798  0E02               	movlw	2
  1214  00079A  2644               	addwf	UART_Printf@argp,f,c
  1215  00079C  0E00               	movlw	0
  1216  00079E  2245               	addwfc	UART_Printf@argp+1,f,c
  1217                           
  1218                           ;uart.c: 486: UART_TxNumber(10u,v_num_u16,v_numOfDigitsToTransmit_u8);
  1219  0007A0  C03E  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  1220  0007A4  C03F  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  1221  0007A8  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  1222  0007AA  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  1223  0007AC  C043  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  1224  0007B0  0E0A               	movlw	10
  1225  0007B2  EC61  F006         	call	_UART_TxNumber
  1226                           
  1227                           ;uart.c: 487: break;
  1228  0007B6  D0DD               	goto	l2321
  1229  0007B8                     l2269:
  1230                           
  1231                           ;uart.c: 490: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1232  0007B8  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1233  0007BC  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1234  0007C0  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32
  1235  0007C4  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+1
  1236  0007C8  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u32+2
  1237  0007CC  CFDE F03D          	movff	postinc2,UART_Printf@v_num_u32+3
  1238  0007D0  0E04               	movlw	4
  1239  0007D2  2644               	addwf	UART_Printf@argp,f,c
  1240  0007D4  0E00               	movlw	0
  1241  0007D6  2245               	addwfc	UART_Printf@argp+1,f,c
  1242                           
  1243                           ;uart.c: 491: UART_TxNumber(10u,v_num_u32,v_numOfDigitsToTransmit_u8);
  1244  0007D8  C03A  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  1245  0007DC  C03B  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  1246  0007E0  C03C  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  1247  0007E4  C03D  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  1248  0007E8  C043  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  1249  0007EC  0E0A               	movlw	10
  1250  0007EE  EC61  F006         	call	_UART_TxNumber
  1251                           
  1252                           ;uart.c: 492: break;
  1253  0007F2  D0BF               	goto	l2321
  1254  0007F4                     l2275:
  1255                           
  1256                           ;uart.c: 495: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1257  0007F4  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1258  0007F8  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1259  0007FC  CFDE F03E          	movff	postinc2,UART_Printf@v_num_u16
  1260  000800  CFDD F03F          	movff	postdec2,UART_Printf@v_num_u16+1
  1261  000804  0E02               	movlw	2
  1262  000806  2644               	addwf	UART_Printf@argp,f,c
  1263  000808  0E00               	movlw	0
  1264  00080A  2245               	addwfc	UART_Printf@argp+1,f,c
  1265                           
  1266                           ;uart.c: 496: UART_TxNumber(16u,v_num_u16,v_numOfDigitsToTransmit_u8);
  1267  00080C  C03E  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  1268  000810  C03F  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  1269  000814  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  1270  000816  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  1271  000818  C043  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  1272  00081C  0E10               	movlw	16
  1273  00081E  EC61  F006         	call	_UART_TxNumber
  1274                           
  1275                           ;uart.c: 497: break;
  1276  000822  D0A7               	goto	l2321
  1277  000824                     l2281:
  1278                           
  1279                           ;uart.c: 500: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1280  000824  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1281  000828  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1282  00082C  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32
  1283  000830  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+1
  1284  000834  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u32+2
  1285  000838  CFDE F03D          	movff	postinc2,UART_Printf@v_num_u32+3
  1286  00083C  0E04               	movlw	4
  1287  00083E  2644               	addwf	UART_Printf@argp,f,c
  1288  000840  0E00               	movlw	0
  1289  000842  2245               	addwfc	UART_Printf@argp+1,f,c
  1290                           
  1291                           ;uart.c: 501: UART_TxNumber(16u,v_num_u32,v_numOfDigitsToTransmit_u8);
  1292  000844  C03A  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  1293  000848  C03B  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  1294  00084C  C03C  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  1295  000850  C03D  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  1296  000854  C043  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  1297  000858  0E10               	movlw	16
  1298  00085A  EC61  F006         	call	_UART_TxNumber
  1299                           
  1300                           ;uart.c: 502: break;
  1301  00085E  D089               	goto	l2321
  1302  000860                     l2287:
  1303                           
  1304                           ;uart.c: 506: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1305  000860  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1306  000864  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1307  000868  CFDE F03E          	movff	postinc2,UART_Printf@v_num_u16
  1308  00086C  CFDD F03F          	movff	postdec2,UART_Printf@v_num_u16+1
  1309  000870  0E02               	movlw	2
  1310  000872  2644               	addwf	UART_Printf@argp,f,c
  1311  000874  0E00               	movlw	0
  1312  000876  2245               	addwfc	UART_Printf@argp+1,f,c
  1313                           
  1314                           ;uart.c: 508: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  1315  000878  2843               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  1316  00087A  A4D8               	btfss	status,2,c
  1317  00087C  D002               	goto	l2295
  1318                           
  1319                           ;uart.c: 509: v_numOfDigitsToTransmit_u8 = 16;
  1320  00087E  0E10               	movlw	16
  1321  000880  6E43               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  1322  000882                     l2295:
  1323                           
  1324                           ;uart.c: 511: UART_TxNumber(2u,v_num_u16,v_numOfDigitsToTransmit_u8);
  1325  000882  C03E  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  1326  000886  C03F  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  1327  00088A  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  1328  00088C  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  1329  00088E  C043  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  1330  000892  0E02               	movlw	2
  1331  000894  EC61  F006         	call	_UART_TxNumber
  1332                           
  1333                           ;uart.c: 512: break;
  1334  000898  D06C               	goto	l2321
  1335  00089A                     l2297:
  1336                           
  1337                           ;uart.c: 515: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1338  00089A  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1339  00089E  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1340  0008A2  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32
  1341  0008A6  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+1
  1342  0008AA  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u32+2
  1343  0008AE  CFDE F03D          	movff	postinc2,UART_Printf@v_num_u32+3
  1344  0008B2  0E04               	movlw	4
  1345  0008B4  2644               	addwf	UART_Printf@argp,f,c
  1346  0008B6  0E00               	movlw	0
  1347  0008B8  2245               	addwfc	UART_Printf@argp+1,f,c
  1348                           
  1349                           ;uart.c: 517: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  1350  0008BA  2843               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  1351  0008BC  A4D8               	btfss	status,2,c
  1352  0008BE  D002               	goto	l2305
  1353                           
  1354                           ;uart.c: 518: v_numOfDigitsToTransmit_u8 = 32;
  1355  0008C0  0E20               	movlw	32
  1356  0008C2  6E43               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  1357  0008C4                     l2305:
  1358                           
  1359                           ;uart.c: 520: UART_TxNumber(2u,v_num_u32,v_numOfDigitsToTransmit_u8);
  1360  0008C4  C03A  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  1361  0008C8  C03B  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  1362  0008CC  C03C  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  1363  0008D0  C03D  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  1364  0008D4  C043  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  1365  0008D8  0E02               	movlw	2
  1366  0008DA  EC61  F006         	call	_UART_TxNumber
  1367                           
  1368                           ;uart.c: 525: case 'f':
  1369                           ;uart.c: 530: break;
  1370                           
  1371                           ;uart.c: 524: case 'F':
  1372                           
  1373                           ;uart.c: 521: break;
  1374  0008DE  D049               	goto	l2321
  1375  0008E0                     l2307:
  1376                           
  1377                           ;uart.c: 534: case 's':
  1378                           ;uart.c: 535: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  1379  0008E0  C044  FFD9         	movff	UART_Printf@argp,fsr2l
  1380  0008E4  C045  FFDA         	movff	UART_Printf@argp+1,fsr2h
  1381  0008E8  CFDE F032          	movff	postinc2,UART_Printf@str
  1382  0008EC  CFDD F033          	movff	postdec2,UART_Printf@str+1
  1383  0008F0  0E02               	movlw	2
  1384  0008F2  2644               	addwf	UART_Printf@argp,f,c
  1385  0008F4  0E00               	movlw	0
  1386  0008F6  2245               	addwfc	UART_Printf@argp+1,f,c
  1387                           
  1388                           ;uart.c: 536: UART_TxString(str);
  1389  0008F8  C032  F002         	movff	UART_Printf@str,UART_TxString@ptr_string
  1390  0008FC  C033  F003         	movff	UART_Printf@str+1,UART_TxString@ptr_string+1
  1391  000900  EC75  F00D         	call	_UART_TxString	;wreg free
  1392                           
  1393                           ;uart.c: 537: break;
  1394  000904  D036               	goto	l2321
  1395  000906                     l2313:
  1396                           
  1397                           ;uart.c: 540: UART_TxChar('%');
  1398  000906  0E25               	movlw	37
  1399  000908  ECB0  F00D         	call	_UART_TxChar
  1400                           
  1401                           ;uart.c: 542: }
  1402                           
  1403                           ;uart.c: 541: break;
  1404  00090C  D032               	goto	l2321
  1405  00090E                     l2317:
  1406  00090E  5042               	movf	UART_Printf@ch,w,c
  1407                           
  1408                           ; Switch size 1, requested type "space"
  1409                           ; Number of cases is 15, Range of values is 37 to 120
  1410                           ; switch strategies available:
  1411                           ; Name         Instructions Cycles
  1412                           ; simple_byte           46    24 (average)
  1413                           ;	Chosen strategy is simple_byte
  1414  000910  0A25               	xorlw	37	; case 37
  1415  000912  B4D8               	btfsc	status,2,c
  1416  000914  D7F8               	goto	l2313
  1417  000916  0A67               	xorlw	103	; case 66
  1418  000918  B4D8               	btfsc	status,2,c
  1419  00091A  D7BF               	goto	l2297
  1420  00091C  0A01               	xorlw	1	; case 67
  1421  00091E  B4D8               	btfsc	status,2,c
  1422  000920  D6D6               	goto	l2233
  1423  000922  0A07               	xorlw	7	; case 68
  1424  000924  B4D8               	btfsc	status,2,c
  1425  000926  D705               	goto	l2251
  1426  000928  0A02               	xorlw	2	; case 70
  1427  00092A  B4D8               	btfsc	status,2,c
  1428  00092C  D022               	goto	l2321
  1429  00092E  0A15               	xorlw	21	; case 83
  1430  000930  B4D8               	btfsc	status,2,c
  1431  000932  D7D6               	goto	l2307
  1432  000934  0A06               	xorlw	6	; case 85
  1433  000936  B4D8               	btfsc	status,2,c
  1434  000938  D73F               	goto	l2269
  1435  00093A  0A0D               	xorlw	13	; case 88
  1436  00093C  B4D8               	btfsc	status,2,c
  1437  00093E  D772               	goto	l2281
  1438  000940  0A3A               	xorlw	58	; case 98
  1439  000942  B4D8               	btfsc	status,2,c
  1440  000944  D78D               	goto	l2287
  1441  000946  0A01               	xorlw	1	; case 99
  1442  000948  B4D8               	btfsc	status,2,c
  1443  00094A  D6C1               	goto	l2233
  1444  00094C  0A07               	xorlw	7	; case 100
  1445  00094E  B4D8               	btfsc	status,2,c
  1446  000950  D6CC               	goto	l2239
  1447  000952  0A02               	xorlw	2	; case 102
  1448  000954  B4D8               	btfsc	status,2,c
  1449  000956  D00D               	goto	l2321
  1450  000958  0A15               	xorlw	21	; case 115
  1451  00095A  B4D8               	btfsc	status,2,c
  1452  00095C  D7C1               	goto	l2307
  1453  00095E  0A06               	xorlw	6	; case 117
  1454  000960  B4D8               	btfsc	status,2,c
  1455  000962  D712               	goto	l2263
  1456  000964  0A0D               	xorlw	13	; case 120
  1457  000966  B4D8               	btfsc	status,2,c
  1458  000968  D745               	goto	l2275
  1459                           
  1460                           ;uart.c: 543: }
  1461  00096A  D003               	goto	l2321
  1462  00096C                     l2319:
  1463                           
  1464                           ;uart.c: 544: else
  1465                           ;uart.c: 545: {
  1466                           ;uart.c: 547: UART_TxChar(ch);
  1467  00096C  5042               	movf	UART_Printf@ch,w,c
  1468  00096E  ECB0  F00D         	call	_UART_TxChar
  1469  000972                     l2321:
  1470  000972  4A40               	infsnz	UART_Printf@ptr,f,c
  1471  000974  2A41               	incf	UART_Printf@ptr+1,f,c
  1472  000976                     l2323:
  1473  000976  C040  FFF6         	movff	UART_Printf@ptr,tblptrl
  1474  00097A  C041  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  1475  00097E                     	if	0	;tblptru may be non-zero
  1476  00097E                     	endif
  1477  00097E                     	if	0	;tblptru may be non-zero
  1478  00097E                     	endif
  1479  00097E  0008               	tblrd		*
  1480  000980  50F5               	movf	tablat,w,c
  1481  000982  0900               	iorlw	0
  1482  000984  B4D8               	btfsc	status,2,c
  1483  000986  0012               	return	
  1484  000988  D66D               	goto	l2209
  1485  00098A                     __end_of_UART_Printf:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodh	equ	0xFF4
  1492                           prodl	equ	0xFF3
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postdec1	equ	0xFE5
  1496                           fsr1l	equ	0xFE1
  1497                           indf2	equ	0xFDF
  1498                           postinc2	equ	0xFDE
  1499                           postdec2	equ	0xFDD
  1500                           fsr2h	equ	0xFDA
  1501                           fsr2l	equ	0xFD9
  1502                           status	equ	0xFD8
  1503                           
  1504 ;; *************** function _UART_TxString *****************
  1505 ;; Defined at:
  1506 ;;		line 169 in file "../00-libfiles/uart.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  ptr_string      2    1[COMRAM] PTR const unsigned char 
  1509 ;;		 -> main@str(50), 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1521 ;;      Params:         2       0       0       0       0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0
  1523 ;;      Temps:          0       0       0       0       0       0       0
  1524 ;;      Totals:         2       0       0       0       0       0       0
  1525 ;;Total ram usage:        2 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; Hardware stack levels required when called:    1
  1528 ;; This function calls:
  1529 ;;		_UART_TxChar
  1530 ;; This function is called by:
  1531 ;;		_UART_Printf
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text4
  1536  001AEA                     __ptext4:
  1537                           	opt stack 0
  1538  001AEA                     _UART_TxString:
  1539                           	opt stack 28
  1540                           
  1541                           ;uart.c: 171: while(*ptr_string)
  1542                           
  1543                           ;incstack = 0
  1544  001AEA  D009               	goto	l2059
  1545  001AEC                     l2055:
  1546                           
  1547                           ;uart.c: 172: UART_TxChar(*ptr_string++);
  1548  001AEC  C002  FFD9         	movff	UART_TxString@ptr_string,fsr2l
  1549  001AF0  C003  FFDA         	movff	UART_TxString@ptr_string+1,fsr2h
  1550  001AF4  50DF               	movf	indf2,w,c
  1551  001AF6  ECB0  F00D         	call	_UART_TxChar
  1552  001AFA  4A02               	infsnz	UART_TxString@ptr_string,f,c
  1553  001AFC  2A03               	incf	UART_TxString@ptr_string+1,f,c
  1554  001AFE                     l2059:
  1555  001AFE  C002  FFD9         	movff	UART_TxString@ptr_string,fsr2l
  1556  001B02  C003  FFDA         	movff	UART_TxString@ptr_string+1,fsr2h
  1557  001B06  50DF               	movf	indf2,w,c
  1558  001B08  B4D8               	btfsc	status,2,c
  1559  001B0A  0012               	return	
  1560  001B0C  D7EF               	goto	l2055
  1561  001B0E                     __end_of_UART_TxString:
  1562                           	opt stack 0
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           prodh	equ	0xFF4
  1568                           prodl	equ	0xFF3
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           postdec1	equ	0xFE5
  1572                           fsr1l	equ	0xFE1
  1573                           indf2	equ	0xFDF
  1574                           postinc2	equ	0xFDE
  1575                           postdec2	equ	0xFDD
  1576                           fsr2h	equ	0xFDA
  1577                           fsr2l	equ	0xFD9
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _UART_TxNumber *****************
  1581 ;; Defined at:
  1582 ;;		line 260 in file "../00-libfiles/uart.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  v_numericSys    1    wreg     unsigned char 
  1585 ;;  v_number_u32    4   13[COMRAM] unsigned long 
  1586 ;;  v_numOfDigit    1   17[COMRAM] unsigned char 
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  v_numericSys    1   41[COMRAM] unsigned char 
  1589 ;;  a              10   29[COMRAM] unsigned char [10]
  1590 ;;  i               1   42[COMRAM] unsigned char 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1600 ;;      Params:         5       0       0       0       0       0       0
  1601 ;;      Locals:        14       0       0       0       0       0       0
  1602 ;;      Temps:         11       0       0       0       0       0       0
  1603 ;;      Totals:        30       0       0       0       0       0       0
  1604 ;;Total ram usage:       30 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; Hardware stack levels required when called:    1
  1607 ;; This function calls:
  1608 ;;		_UART_TxChar
  1609 ;;		___lldiv
  1610 ;; This function is called by:
  1611 ;;		_UART_Printf
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text5
  1616  000CC2                     __ptext5:
  1617                           	opt stack 0
  1618  000CC2                     _UART_TxNumber:
  1619                           	opt stack 28
  1620                           
  1621                           ;incstack = 0
  1622                           ;UART_TxNumber@v_numericSystem_u8 stored from wreg
  1623  000CC2  6E2A               	movwf	UART_TxNumber@v_numericSystem_u8,c
  1624                           
  1625                           ;uart.c: 262: uint8_t i=0,a[10];
  1626  000CC4  0E00               	movlw	0
  1627  000CC6  6E2B               	movwf	UART_TxNumber@i,c
  1628                           
  1629                           ;uart.c: 264: if(2u == v_numericSystem_u8)
  1630  000CC8  0E02               	movlw	2
  1631  000CCA  182A               	xorwf	UART_TxNumber@v_numericSystem_u8,w,c
  1632  000CCC  B4D8               	btfsc	status,2,c
  1633  000CCE  D034               	goto	l2073
  1634  000CD0  D037               	goto	l2075
  1635  000CD2                     l2067:
  1636                           
  1637                           ;uart.c: 267: {
  1638                           ;uart.c: 270: i = (((v_number_u32)&(((uint8_t)1<<((v_numOfDigitsToTransmit_u8-1)))))!=0u
      +                          );
  1639  000CD2  C012  F013         	movff	UART_TxNumber@v_numOfDigitsToTransmit_u8,??_UART_TxNumber
  1640  000CD6  0EFF               	movlw	-1
  1641  000CD8  2613               	addwf	??_UART_TxNumber,f,c
  1642  000CDA  0E01               	movlw	1
  1643  000CDC  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  1644  000CDE  0E00               	movlw	0
  1645  000CE0  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  1646  000CE2  2A13               	incf	??_UART_TxNumber,f,c
  1647  000CE4  D003               	goto	u2304
  1648  000CE6                     u2305:
  1649  000CE6  90D8               	bcf	status,0,c
  1650  000CE8  3614               	rlcf	??_UART_TxNumber+1,f,c
  1651  000CEA  3615               	rlcf	??_UART_TxNumber+2,f,c
  1652  000CEC                     u2304:
  1653  000CEC  2E13               	decfsz	??_UART_TxNumber,f,c
  1654  000CEE  D7FB               	goto	u2305
  1655  000CF0  C014  F016         	movff	??_UART_TxNumber+1,??_UART_TxNumber+3
  1656  000CF4  C015  F017         	movff	??_UART_TxNumber+2,??_UART_TxNumber+4
  1657  000CF8  0E00               	movlw	0
  1658  000CFA  BE17               	btfsc	(??_UART_TxNumber+4)& (0+255),7,c
  1659  000CFC  0EFF               	movlw	255
  1660  000CFE  6E18               	movwf	(??_UART_TxNumber+5)& (0+255),c
  1661  000D00  6E19               	movwf	(??_UART_TxNumber+6)& (0+255),c
  1662  000D02  500E               	movf	UART_TxNumber@v_number_u32,w,c
  1663  000D04  1416               	andwf	??_UART_TxNumber+3,w,c
  1664  000D06  6E1A               	movwf	(??_UART_TxNumber+7)& (0+255),c
  1665  000D08  500F               	movf	UART_TxNumber@v_number_u32+1,w,c
  1666  000D0A  1417               	andwf	??_UART_TxNumber+4,w,c
  1667  000D0C  6E1B               	movwf	(??_UART_TxNumber+8)& (0+255),c
  1668  000D0E  5010               	movf	UART_TxNumber@v_number_u32+2,w,c
  1669  000D10  1418               	andwf	??_UART_TxNumber+5,w,c
  1670  000D12  6E1C               	movwf	(??_UART_TxNumber+9)& (0+255),c
  1671  000D14  5011               	movf	UART_TxNumber@v_number_u32+3,w,c
  1672  000D16  1419               	andwf	??_UART_TxNumber+6,w,c
  1673  000D18  6E1D               	movwf	(??_UART_TxNumber+10)& (0+255),c
  1674  000D1A  501A               	movf	??_UART_TxNumber+7,w,c
  1675  000D1C  101B               	iorwf	??_UART_TxNumber+8,w,c
  1676  000D1E  101C               	iorwf	??_UART_TxNumber+9,w,c
  1677  000D20  101D               	iorwf	??_UART_TxNumber+10,w,c
  1678  000D22  B4D8               	btfsc	status,2,c
  1679  000D24  D002               	goto	u2310
  1680  000D26  0E01               	movlw	1
  1681  000D28  D001               	goto	u2320
  1682  000D2A                     u2310:
  1683  000D2A  0E00               	movlw	0
  1684  000D2C                     u2320:
  1685  000D2C  6E2B               	movwf	UART_TxNumber@i,c
  1686                           
  1687                           ;uart.c: 271: UART_TxChar(((i)+0x30));
  1688  000D2E  502B               	movf	UART_TxNumber@i,w,c
  1689  000D30  0F30               	addlw	48
  1690  000D32  ECB0  F00D         	call	_UART_TxChar
  1691                           
  1692                           ;uart.c: 272: v_numOfDigitsToTransmit_u8--;
  1693  000D36  0612               	decf	UART_TxNumber@v_numOfDigitsToTransmit_u8,f,c
  1694  000D38                     l2073:
  1695  000D38  5012               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  1696  000D3A  B4D8               	btfsc	status,2,c
  1697  000D3C  0012               	return	
  1698  000D3E  D7C9               	goto	l2067
  1699  000D40                     l2075:
  1700                           
  1701                           ;uart.c: 275: else if(v_number_u32==0)
  1702  000D40  500E               	movf	UART_TxNumber@v_number_u32,w,c
  1703  000D42  100F               	iorwf	UART_TxNumber@v_number_u32+1,w,c
  1704  000D44  1010               	iorwf	UART_TxNumber@v_number_u32+2,w,c
  1705  000D46  1011               	iorwf	UART_TxNumber@v_number_u32+3,w,c
  1706  000D48  A4D8               	btfss	status,2,c
  1707  000D4A  D004               	goto	l2079
  1708                           
  1709                           ;uart.c: 276: {
  1710                           ;uart.c: 280: UART_TxChar('0');
  1711  000D4C  0E30               	movlw	48
  1712  000D4E  ECB0  F00D         	call	_UART_TxChar
  1713                           
  1714                           ;uart.c: 281: }
  1715  000D52  0012               	return	
  1716  000D54                     l2079:
  1717                           
  1718                           ;uart.c: 282: else
  1719                           ;uart.c: 283: {
  1720                           ;uart.c: 284: for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
  1721  000D54  0E00               	movlw	0
  1722  000D56  6E2B               	movwf	UART_TxNumber@i,c
  1723  000D58  D04D               	goto	l2097
  1724  000D5A                     l2081:
  1725                           
  1726                           ;uart.c: 285: {
  1727                           ;uart.c: 288: if(v_number_u32!=0)
  1728  000D5A  500E               	movf	UART_TxNumber@v_number_u32,w,c
  1729  000D5C  100F               	iorwf	UART_TxNumber@v_number_u32+1,w,c
  1730  000D5E  1010               	iorwf	UART_TxNumber@v_number_u32+2,w,c
  1731  000D60  1011               	iorwf	UART_TxNumber@v_number_u32+3,w,c
  1732  000D62  B4D8               	btfsc	status,2,c
  1733  000D64  D035               	goto	l2087
  1734                           
  1735                           ;uart.c: 289: {
  1736                           ;uart.c: 296: a[i]=(uint32_t)(v_number_u32 - (v_numericSystem_u8 * (uint32_t)(v_number_u
      +                          32/v_numericSystem_u8)));
  1737  000D66  502B               	movf	UART_TxNumber@i,w,c
  1738  000D68  0D01               	mullw	1
  1739  000D6A  0E1E               	movlw	low UART_TxNumber@a
  1740  000D6C  24F3               	addwf	prodl,w,c
  1741  000D6E  6ED9               	movwf	fsr2l,c
  1742  000D70  0E00               	movlw	high UART_TxNumber@a
  1743  000D72  20F4               	addwfc	prodh,w,c
  1744  000D74  6EDA               	movwf	fsr2h,c
  1745  000D76  C00E  F001         	movff	UART_TxNumber@v_number_u32,___lldiv@dividend
  1746  000D7A  C00F  F002         	movff	UART_TxNumber@v_number_u32+1,___lldiv@dividend+1
  1747  000D7E  C010  F003         	movff	UART_TxNumber@v_number_u32+2,___lldiv@dividend+2
  1748  000D82  C011  F004         	movff	UART_TxNumber@v_number_u32+3,___lldiv@dividend+3
  1749  000D86  502A               	movf	UART_TxNumber@v_numericSystem_u8,w,c
  1750  000D88  6E05               	movwf	___lldiv@divisor,c
  1751  000D8A  6A06               	clrf	___lldiv@divisor+1,c
  1752  000D8C  6A07               	clrf	___lldiv@divisor+2,c
  1753  000D8E  6A08               	clrf	___lldiv@divisor+3,c
  1754  000D90  EC1D  F00B         	call	___lldiv	;wreg free
  1755  000D94  5001               	movf	?___lldiv,w,c
  1756  000D96  022A               	mulwf	UART_TxNumber@v_numericSystem_u8,c
  1757  000D98  50F3               	movf	prodl,w,c
  1758  000D9A  0800               	sublw	0
  1759  000D9C  240E               	addwf	UART_TxNumber@v_number_u32,w,c
  1760  000D9E  6EDF               	movwf	indf2,c
  1761                           
  1762                           ;uart.c: 297: v_number_u32=v_number_u32/v_numericSystem_u8;
  1763  000DA0  C00E  F001         	movff	UART_TxNumber@v_number_u32,___lldiv@dividend
  1764  000DA4  C00F  F002         	movff	UART_TxNumber@v_number_u32+1,___lldiv@dividend+1
  1765  000DA8  C010  F003         	movff	UART_TxNumber@v_number_u32+2,___lldiv@dividend+2
  1766  000DAC  C011  F004         	movff	UART_TxNumber@v_number_u32+3,___lldiv@dividend+3
  1767  000DB0  502A               	movf	UART_TxNumber@v_numericSystem_u8,w,c
  1768  000DB2  6E05               	movwf	___lldiv@divisor,c
  1769  000DB4  6A06               	clrf	___lldiv@divisor+1,c
  1770  000DB6  6A07               	clrf	___lldiv@divisor+2,c
  1771  000DB8  6A08               	clrf	___lldiv@divisor+3,c
  1772  000DBA  EC1D  F00B         	call	___lldiv	;wreg free
  1773  000DBE  C001  F00E         	movff	?___lldiv,UART_TxNumber@v_number_u32
  1774  000DC2  C002  F00F         	movff	?___lldiv+1,UART_TxNumber@v_number_u32+1
  1775  000DC6  C003  F010         	movff	?___lldiv+2,UART_TxNumber@v_number_u32+2
  1776  000DCA  C004  F011         	movff	?___lldiv+3,UART_TxNumber@v_number_u32+3
  1777                           
  1778                           ;uart.c: 298: }
  1779  000DCE  D011               	goto	l2095
  1780  000DD0                     l2087:
  1781                           
  1782                           ;uart.c: 299: else if( (v_numOfDigitsToTransmit_u8 == 0xffu) ||
  1783                           ;uart.c: 300: (v_numOfDigitsToTransmit_u8 > 10u))
  1784  000DD0  2812               	incf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  1785  000DD2  B4D8               	btfsc	status,2,c
  1786  000DD4  D05A               	goto	l2109
  1787  000DD6  0E0A               	movlw	10
  1788  000DD8  6412               	cpfsgt	UART_TxNumber@v_numOfDigitsToTransmit_u8,c
  1789  000DDA  D001               	goto	l2093
  1790  000DDC  D056               	goto	l2109
  1791  000DDE                     l2093:
  1792                           
  1793                           ;uart.c: 306: else
  1794                           ;uart.c: 307: {
  1795                           ;uart.c: 311: a[i]=0;
  1796  000DDE  502B               	movf	UART_TxNumber@i,w,c
  1797  000DE0  0D01               	mullw	1
  1798  000DE2  0E1E               	movlw	low UART_TxNumber@a
  1799  000DE4  24F3               	addwf	prodl,w,c
  1800  000DE6  6ED9               	movwf	fsr2l,c
  1801  000DE8  0E00               	movlw	high UART_TxNumber@a
  1802  000DEA  20F4               	addwfc	prodh,w,c
  1803  000DEC  6EDA               	movwf	fsr2h,c
  1804  000DEE  0E00               	movlw	0
  1805  000DF0  6EDF               	movwf	indf2,c
  1806  000DF2                     l2095:
  1807  000DF2  2A2B               	incf	UART_TxNumber@i,f,c
  1808  000DF4                     l2097:
  1809  000DF4  5012               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  1810  000DF6  5C2B               	subwf	UART_TxNumber@i,w,c
  1811  000DF8  B0D8               	btfsc	status,0,c
  1812  000DFA  D047               	goto	l2109
  1813  000DFC  D7AE               	goto	l2081
  1814  000DFE                     l2099:
  1815                           
  1816                           ;uart.c: 316: {
  1817                           ;uart.c: 318: UART_TxChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  1818  000DFE  0EFF               	movlw	255
  1819  000E00  6E13               	movwf	??_UART_TxNumber& (0+255),c
  1820  000E02  0EFF               	movlw	255
  1821  000E04  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  1822  000E06  502B               	movf	UART_TxNumber@i,w,c
  1823  000E08  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  1824  000E0A  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  1825  000E0C  5013               	movf	??_UART_TxNumber,w,c
  1826  000E0E  2615               	addwf	??_UART_TxNumber+2,f,c
  1827  000E10  5014               	movf	??_UART_TxNumber+1,w,c
  1828  000E12  2216               	addwfc	??_UART_TxNumber+3,f,c
  1829  000E14  0E1E               	movlw	low UART_TxNumber@a
  1830  000E16  2415               	addwf	??_UART_TxNumber+2,w,c
  1831  000E18  6ED9               	movwf	fsr2l,c
  1832  000E1A  0E00               	movlw	high UART_TxNumber@a
  1833  000E1C  2016               	addwfc	??_UART_TxNumber+3,w,c
  1834  000E1E  6EDA               	movwf	fsr2h,c
  1835  000E20  0E0A               	movlw	10
  1836  000E22  60DF               	cpfslt	indf2,c
  1837  000E24  D015               	goto	l2103
  1838  000E26  0EFF               	movlw	255
  1839  000E28  6E13               	movwf	??_UART_TxNumber& (0+255),c
  1840  000E2A  0EFF               	movlw	255
  1841  000E2C  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  1842  000E2E  502B               	movf	UART_TxNumber@i,w,c
  1843  000E30  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  1844  000E32  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  1845  000E34  5013               	movf	??_UART_TxNumber,w,c
  1846  000E36  2615               	addwf	??_UART_TxNumber+2,f,c
  1847  000E38  5014               	movf	??_UART_TxNumber+1,w,c
  1848  000E3A  2216               	addwfc	??_UART_TxNumber+3,f,c
  1849  000E3C  0E1E               	movlw	low UART_TxNumber@a
  1850  000E3E  2415               	addwf	??_UART_TxNumber+2,w,c
  1851  000E40  6ED9               	movwf	fsr2l,c
  1852  000E42  0E00               	movlw	high UART_TxNumber@a
  1853  000E44  2016               	addwfc	??_UART_TxNumber+3,w,c
  1854  000E46  6EDA               	movwf	fsr2h,c
  1855  000E48  50DF               	movf	indf2,w,c
  1856  000E4A  6E17               	movwf	(??_UART_TxNumber+4)& (0+255),c
  1857  000E4C  0E30               	movlw	48
  1858  000E4E  D014               	goto	L1
  1859  000E50                     l2103:
  1860  000E50  0EFF               	movlw	255
  1861  000E52  6E13               	movwf	??_UART_TxNumber& (0+255),c
  1862  000E54  0EFF               	movlw	255
  1863  000E56  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  1864  000E58  502B               	movf	UART_TxNumber@i,w,c
  1865  000E5A  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  1866  000E5C  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  1867  000E5E  5013               	movf	??_UART_TxNumber,w,c
  1868  000E60  2615               	addwf	??_UART_TxNumber+2,f,c
  1869  000E62  5014               	movf	??_UART_TxNumber+1,w,c
  1870  000E64  2216               	addwfc	??_UART_TxNumber+3,f,c
  1871  000E66  0E1E               	movlw	low UART_TxNumber@a
  1872  000E68  2415               	addwf	??_UART_TxNumber+2,w,c
  1873  000E6A  6ED9               	movwf	fsr2l,c
  1874  000E6C  0E00               	movlw	high UART_TxNumber@a
  1875  000E6E  2016               	addwfc	??_UART_TxNumber+3,w,c
  1876  000E70  6EDA               	movwf	fsr2h,c
  1877  000E72  50DF               	movf	indf2,w,c
  1878  000E74  6E17               	movwf	(??_UART_TxNumber+4)& (0+255),c
  1879  000E76  0E37               	movlw	55
  1880  000E78                     L1:
  1881  000E78  2417               	addwf	??_UART_TxNumber+4,w,c
  1882  000E7A  6E28               	movwf	_UART_TxNumber$65,c
  1883  000E7C  6A29               	clrf	_UART_TxNumber$65+1,c
  1884  000E7E  0E00               	movlw	0
  1885  000E80  2229               	addwfc	_UART_TxNumber$65+1,f,c
  1886  000E82  5028               	movf	_UART_TxNumber$65,w,c
  1887  000E84  ECB0  F00D         	call	_UART_TxChar
  1888                           
  1889                           ;uart.c: 319: i--;
  1890  000E88  062B               	decf	UART_TxNumber@i,f,c
  1891  000E8A                     l2109:
  1892  000E8A  502B               	movf	UART_TxNumber@i,w,c
  1893  000E8C  B4D8               	btfsc	status,2,c
  1894  000E8E  0012               	return	
  1895  000E90  D7B6               	goto	l2099
  1896  000E92                     __end_of_UART_TxNumber:
  1897                           	opt stack 0
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           prodh	equ	0xFF4
  1903                           prodl	equ	0xFF3
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           postdec1	equ	0xFE5
  1907                           fsr1l	equ	0xFE1
  1908                           indf2	equ	0xFDF
  1909                           postinc2	equ	0xFDE
  1910                           postdec2	equ	0xFDD
  1911                           fsr2h	equ	0xFDA
  1912                           fsr2l	equ	0xFD9
  1913                           status	equ	0xFD8
  1914                           
  1915 ;; *************** function _UART_TxChar *****************
  1916 ;; Defined at:
  1917 ;;		line 145 in file "../00-libfiles/uart.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  v_uartData_u    1    wreg     unsigned char 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  v_uartData_u    1    0[COMRAM] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1931 ;;      Params:         0       0       0       0       0       0       0
  1932 ;;      Locals:         1       0       0       0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0
  1934 ;;      Totals:         1       0       0       0       0       0       0
  1935 ;;Total ram usage:        1 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; This function calls:
  1938 ;;		Nothing
  1939 ;; This function is called by:
  1940 ;;		_UART_TxString
  1941 ;;		_UART_RxString
  1942 ;;		_UART_TxNumber
  1943 ;;		_UART_Printf
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text6
  1948  001B60                     __ptext6:
  1949                           	opt stack 0
  1950  001B60                     _UART_TxChar:
  1951                           	opt stack 29
  1952                           
  1953                           ;incstack = 0
  1954                           ;UART_TxChar@v_uartData_u8 stored from wreg
  1955  001B60  6E01               	movwf	UART_TxChar@v_uartData_u8,c
  1956  001B62                     l39:
  1957  001B62  A89E               	btfss	3998,4,c	;volatile
  1958  001B64  D7FE               	goto	l39
  1959                           
  1960                           ;uart.c: 148: TXIF=0;
  1961  001B66  989E               	bcf	3998,4,c	;volatile
  1962                           
  1963                           ;uart.c: 149: TXREG=v_uartData_u8;
  1964  001B68  C001  FFAD         	movff	UART_TxChar@v_uartData_u8,4013	;volatile
  1965  001B6C  0012               	return		;funcret
  1966  001B6E                     __end_of_UART_TxChar:
  1967                           	opt stack 0
  1968                           tblptru	equ	0xFF8
  1969                           tblptrh	equ	0xFF7
  1970                           tblptrl	equ	0xFF6
  1971                           tablat	equ	0xFF5
  1972                           prodh	equ	0xFF4
  1973                           prodl	equ	0xFF3
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           postdec1	equ	0xFE5
  1977                           fsr1l	equ	0xFE1
  1978                           indf2	equ	0xFDF
  1979                           postinc2	equ	0xFDE
  1980                           postdec2	equ	0xFDD
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _UART_Init *****************
  1986 ;; Defined at:
  1987 ;;		line 66 in file "../00-libfiles/uart.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  v_baudRate_u    4   22[COMRAM] unsigned long 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, status,2, status,0, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2001 ;;      Params:         4       0       0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0
  2004 ;;      Totals:         4       0       0       0       0       0       0
  2005 ;;Total ram usage:        4 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    2
  2008 ;; This function calls:
  2009 ;;		_UART_SetBaudRate
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text7
  2016  001B0E                     __ptext7:
  2017                           	opt stack 0
  2018  001B0E                     _UART_Init:
  2019                           	opt stack 28
  2020                           
  2021                           ;uart.c: 68: TRISC=0x80;
  2022                           
  2023                           ;incstack = 0
  2024  001B0E  0E80               	movlw	128
  2025  001B10  6E94               	movwf	3988,c	;volatile
  2026                           
  2027                           ;uart.c: 69: TXSTA=0x20;
  2028  001B12  0E20               	movlw	32
  2029  001B14  6EAC               	movwf	4012,c	;volatile
  2030                           
  2031                           ;uart.c: 70: RCSTA=0x90;
  2032  001B16  0E90               	movlw	144
  2033  001B18  6EAB               	movwf	4011,c	;volatile
  2034                           
  2035                           ;uart.c: 71: UART_SetBaudRate(v_baudRate_u32);
  2036  001B1A  C017  F00E         	movff	UART_Init@v_baudRate_u32,UART_SetBaudRate@v_baudRate_u32
  2037  001B1E  C018  F00F         	movff	UART_Init@v_baudRate_u32+1,UART_SetBaudRate@v_baudRate_u32+1
  2038  001B22  C019  F010         	movff	UART_Init@v_baudRate_u32+2,UART_SetBaudRate@v_baudRate_u32+2
  2039  001B26  C01A  F011         	movff	UART_Init@v_baudRate_u32+3,UART_SetBaudRate@v_baudRate_u32+3
  2040  001B2A  EC5E  F00B         	call	_UART_SetBaudRate	;wreg free
  2041  001B2E  0012               	return		;funcret
  2042  001B30                     __end_of_UART_Init:
  2043                           	opt stack 0
  2044                           tblptru	equ	0xFF8
  2045                           tblptrh	equ	0xFF7
  2046                           tblptrl	equ	0xFF6
  2047                           tablat	equ	0xFF5
  2048                           prodh	equ	0xFF4
  2049                           prodl	equ	0xFF3
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           postdec1	equ	0xFE5
  2053                           fsr1l	equ	0xFE1
  2054                           indf2	equ	0xFDF
  2055                           postinc2	equ	0xFDE
  2056                           postdec2	equ	0xFDD
  2057                           fsr2h	equ	0xFDA
  2058                           fsr2l	equ	0xFD9
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function _UART_SetBaudRate *****************
  2062 ;; Defined at:
  2063 ;;		line 91 in file "../00-libfiles/uart.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  v_baudRate_u    4   13[COMRAM] unsigned long 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  RegValue        1   21[COMRAM] unsigned char 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2, status,0, cstack
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2077 ;;      Params:         4       0       0       0       0       0       0
  2078 ;;      Locals:         1       0       0       0       0       0       0
  2079 ;;      Temps:          4       0       0       0       0       0       0
  2080 ;;      Totals:         9       0       0       0       0       0       0
  2081 ;;Total ram usage:        9 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    1
  2084 ;; This function calls:
  2085 ;;		___lldiv
  2086 ;; This function is called by:
  2087 ;;		_UART_Init
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	text8
  2092  0016BC                     __ptext8:
  2093                           	opt stack 0
  2094  0016BC                     _UART_SetBaudRate:
  2095                           	opt stack 28
  2096                           
  2097                           ;uart.c: 93: uint8_t RegValue;
  2098                           ;uart.c: 95: if((v_baudRate_u32 >= 2400) && (v_baudRate_u32<=115200UL))
  2099                           
  2100                           ;incstack = 0
  2101  0016BC  5011               	movf	UART_SetBaudRate@v_baudRate_u32+3,w,c
  2102  0016BE  1010               	iorwf	UART_SetBaudRate@v_baudRate_u32+2,w,c
  2103  0016C0  E106               	bnz	u2250
  2104  0016C2  0E60               	movlw	96
  2105  0016C4  5C0E               	subwf	UART_SetBaudRate@v_baudRate_u32,w,c
  2106  0016C6  0E09               	movlw	9
  2107  0016C8  580F               	subwfb	UART_SetBaudRate@v_baudRate_u32+1,w,c
  2108  0016CA  A0D8               	btfss	status,0,c
  2109  0016CC  D02D               	goto	l2049
  2110  0016CE                     u2250:
  2111  0016CE  5011               	movf	UART_SetBaudRate@v_baudRate_u32+3,w,c
  2112  0016D0  E12B               	bnz	l2049
  2113  0016D2  040E               	decf	UART_SetBaudRate@v_baudRate_u32,w,c
  2114  0016D4  0EC2               	movlw	194
  2115  0016D6  580F               	subwfb	UART_SetBaudRate@v_baudRate_u32+1,w,c
  2116  0016D8  0E01               	movlw	1
  2117  0016DA  5810               	subwfb	UART_SetBaudRate@v_baudRate_u32+2,w,c
  2118  0016DC  B0D8               	btfsc	status,0,c
  2119  0016DE  D024               	goto	l2049
  2120                           
  2121                           ;uart.c: 96: {
  2122                           ;uart.c: 99: RegValue = (uint8_t)(uint32_t)((20000000UL / (64*(uint32_t)v_baudRate_u32))
      +                           - 1);
  2123  0016E0  0E00               	movlw	0
  2124  0016E2  6E01               	movwf	___lldiv@dividend,c
  2125  0016E4  0E2D               	movlw	45
  2126  0016E6  6E02               	movwf	___lldiv@dividend+1,c
  2127  0016E8  0E31               	movlw	49
  2128  0016EA  6E03               	movwf	___lldiv@dividend+2,c
  2129  0016EC  0E01               	movlw	1
  2130  0016EE  6E04               	movwf	___lldiv@dividend+3,c
  2131  0016F0  C00E  F012         	movff	UART_SetBaudRate@v_baudRate_u32,??_UART_SetBaudRate
  2132  0016F4  C00F  F013         	movff	UART_SetBaudRate@v_baudRate_u32+1,??_UART_SetBaudRate+1
  2133  0016F8  C010  F014         	movff	UART_SetBaudRate@v_baudRate_u32+2,??_UART_SetBaudRate+2
  2134  0016FC  C011  F015         	movff	UART_SetBaudRate@v_baudRate_u32+3,??_UART_SetBaudRate+3
  2135  001700  0E06               	movlw	6
  2136  001702                     u2275:
  2137  001702  90D8               	bcf	status,0,c
  2138  001704  3612               	rlcf	??_UART_SetBaudRate,f,c
  2139  001706  3613               	rlcf	??_UART_SetBaudRate+1,f,c
  2140  001708  3614               	rlcf	??_UART_SetBaudRate+2,f,c
  2141  00170A  3615               	rlcf	??_UART_SetBaudRate+3,f,c
  2142  00170C  2EE8               	decfsz	wreg,f,c
  2143  00170E  D7F9               	goto	u2275
  2144  001710  C012  F005         	movff	??_UART_SetBaudRate,___lldiv@divisor
  2145  001714  C013  F006         	movff	??_UART_SetBaudRate+1,___lldiv@divisor+1
  2146  001718  C014  F007         	movff	??_UART_SetBaudRate+2,___lldiv@divisor+2
  2147  00171C  C015  F008         	movff	??_UART_SetBaudRate+3,___lldiv@divisor+3
  2148  001720  EC1D  F00B         	call	___lldiv	;wreg free
  2149  001724  0401               	decf	?___lldiv,w,c
  2150  001726  D001               	goto	L2
  2151  001728                     l2049:
  2152                           
  2153                           ;uart.c: 101: else
  2154                           ;uart.c: 102: {
  2155                           ;uart.c: 104: RegValue = (uint8_t)(uint32_t)((20000000UL / (64*(uint32_t)9600)) - 1);
  2156  001728  0E1F               	movlw	31
  2157  00172A                     L2:
  2158  00172A  6E16               	movwf	UART_SetBaudRate@RegValue,c
  2159                           
  2160                           ;uart.c: 105: }
  2161                           ;uart.c: 107: SPBRG = RegValue;
  2162  00172C  C016  FFAF         	movff	UART_SetBaudRate@RegValue,4015	;volatile
  2163  001730  0012               	return		;funcret
  2164  001732                     __end_of_UART_SetBaudRate:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           prodh	equ	0xFF4
  2171                           prodl	equ	0xFF3
  2172                           postinc0	equ	0xFEE
  2173                           wreg	equ	0xFE8
  2174                           postdec1	equ	0xFE5
  2175                           fsr1l	equ	0xFE1
  2176                           indf2	equ	0xFDF
  2177                           postinc2	equ	0xFDE
  2178                           postdec2	equ	0xFDD
  2179                           fsr2h	equ	0xFDA
  2180                           fsr2l	equ	0xFD9
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _LCD_SetUp *****************
  2184 ;; Defined at:
  2185 ;;		line 135 in file "../00-libfiles/lcd.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  RS              1    wreg     enum E3222
  2188 ;;  RW              1    5[COMRAM] enum E3222
  2189 ;;  EN              1    6[COMRAM] enum E3222
  2190 ;;  D0              1    7[COMRAM] enum E3222
  2191 ;;  D1              1    8[COMRAM] enum E3222
  2192 ;;  D2              1    9[COMRAM] enum E3222
  2193 ;;  D3              1   10[COMRAM] enum E3222
  2194 ;;  D4              1   11[COMRAM] enum E3222
  2195 ;;  D5              1   12[COMRAM] enum E3222
  2196 ;;  D6              1   13[COMRAM] enum E3222
  2197 ;;  D7              1   14[COMRAM] enum E3222
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  RS              1   15[COMRAM] enum E3222
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, status,0, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2209 ;;      Params:        10       0       0       0       0       0       0
  2210 ;;      Locals:         1       0       0       0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0
  2212 ;;      Totals:        11       0       0       0       0       0       0
  2213 ;;Total ram usage:       11 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    1
  2216 ;; This function calls:
  2217 ;;		_GPIO_PinDirection
  2218 ;; This function is called by:
  2219 ;;		_main
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text9
  2224  0013F4                     __ptext9:
  2225                           	opt stack 0
  2226  0013F4                     _LCD_SetUp:
  2227                           	opt stack 29
  2228                           
  2229                           ;incstack = 0
  2230                           ;LCD_SetUp@RS stored from wreg
  2231  0013F4  6E10               	movwf	LCD_SetUp@RS,c
  2232                           
  2233                           ;lcd.c: 148: LCDConfig.RS = RS;
  2234  0013F6  C010  F083         	movff	LCD_SetUp@RS,_LCDConfig+3
  2235                           
  2236                           ;lcd.c: 149: LCDConfig.RW = RW;
  2237  0013FA  C006  F084         	movff	LCD_SetUp@RW,_LCDConfig+4
  2238                           
  2239                           ;lcd.c: 150: LCDConfig.EN = EN;
  2240  0013FE  C007  F085         	movff	LCD_SetUp@EN,_LCDConfig+5
  2241                           
  2242                           ;lcd.c: 152: LCDConfig.D0 = D0;
  2243  001402  C008  F086         	movff	LCD_SetUp@D0,_LCDConfig+6
  2244                           
  2245                           ;lcd.c: 153: LCDConfig.D1 = D1;
  2246  001406  C009  F087         	movff	LCD_SetUp@D1,_LCDConfig+7
  2247                           
  2248                           ;lcd.c: 154: LCDConfig.D2 = D2;
  2249  00140A  C00A  F088         	movff	LCD_SetUp@D2,_LCDConfig+8
  2250                           
  2251                           ;lcd.c: 155: LCDConfig.D3 = D3;
  2252  00140E  C00B  F089         	movff	LCD_SetUp@D3,_LCDConfig+9
  2253                           
  2254                           ;lcd.c: 156: LCDConfig.D4 = D4;
  2255  001412  C00C  F08A         	movff	LCD_SetUp@D4,_LCDConfig+10
  2256                           
  2257                           ;lcd.c: 157: LCDConfig.D5 = D5;
  2258  001416  C00D  F08B         	movff	LCD_SetUp@D5,_LCDConfig+11
  2259                           
  2260                           ;lcd.c: 158: LCDConfig.D6 = D6;
  2261  00141A  C00E  F08C         	movff	LCD_SetUp@D6,_LCDConfig+12
  2262                           
  2263                           ;lcd.c: 159: LCDConfig.D7 = D7;
  2264  00141E  C00F  F08D         	movff	LCD_SetUp@D7,_LCDConfig+13
  2265                           
  2266                           ;lcd.c: 162: if((D0 == P_NC) || (D1 == P_NC) || (D2 == P_NC) || (D3 == P_NC))
  2267  001422  2808               	incf	LCD_SetUp@D0,w,c
  2268  001424  B4D8               	btfsc	status,2,c
  2269  001426  D009               	goto	l2355
  2270  001428  2809               	incf	LCD_SetUp@D1,w,c
  2271  00142A  B4D8               	btfsc	status,2,c
  2272  00142C  D006               	goto	l2355
  2273  00142E  280A               	incf	LCD_SetUp@D2,w,c
  2274  001430  B4D8               	btfsc	status,2,c
  2275  001432  D003               	goto	l2355
  2276  001434  280B               	incf	LCD_SetUp@D3,w,c
  2277  001436  A4D8               	btfss	status,2,c
  2278  001438  D004               	goto	l2357
  2279  00143A                     l2355:
  2280                           
  2281                           ;lcd.c: 163: {
  2282                           ;lcd.c: 164: LCDConfig.v_LcdMode_U8 = 4;
  2283  00143A  0E04               	movlw	4
  2284  00143C  0100               	movlb	0	; () banked
  2285  00143E  6F82               	movwf	(_LCDConfig+2)& (0+255),b
  2286                           
  2287                           ;lcd.c: 165: }
  2288  001440  D017               	goto	l2367
  2289  001442                     l2357:
  2290                           
  2291                           ;lcd.c: 166: else
  2292                           ;lcd.c: 167: {
  2293                           ;lcd.c: 168: LCDConfig.v_LcdMode_U8 = 8;
  2294  001442  0E08               	movlw	8
  2295  001444  0100               	movlb	0	; () banked
  2296  001446  6F82               	movwf	(_LCDConfig+2)& (0+255),b
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;lcd.c: 169: GPIO_PinDirection(D0,0x00u);
  2300  001448  0E00               	movlw	0
  2301  00144A  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2302  00144C  5008               	movf	LCD_SetUp@D0,w,c
  2303  00144E  ECE1  F008         	call	_GPIO_PinDirection
  2304                           
  2305                           ;lcd.c: 170: GPIO_PinDirection(D1,0x00u);
  2306  001452  0E00               	movlw	0
  2307  001454  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2308  001456  5009               	movf	LCD_SetUp@D1,w,c
  2309  001458  ECE1  F008         	call	_GPIO_PinDirection
  2310                           
  2311                           ;lcd.c: 171: GPIO_PinDirection(D2,0x00u);
  2312  00145C  0E00               	movlw	0
  2313  00145E  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2314  001460  500A               	movf	LCD_SetUp@D2,w,c
  2315  001462  ECE1  F008         	call	_GPIO_PinDirection
  2316                           
  2317                           ;lcd.c: 172: GPIO_PinDirection(D3,0x00u);
  2318  001466  0E00               	movlw	0
  2319  001468  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2320  00146A  500B               	movf	LCD_SetUp@D3,w,c
  2321  00146C  ECE1  F008         	call	_GPIO_PinDirection
  2322  001470                     l2367:
  2323                           
  2324                           ;lcd.c: 173: }
  2325                           ;lcd.c: 176: GPIO_PinDirection(RS,0x00u);
  2326  001470  0E00               	movlw	0
  2327  001472  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2328  001474  5010               	movf	LCD_SetUp@RS,w,c
  2329  001476  ECE1  F008         	call	_GPIO_PinDirection
  2330                           
  2331                           ;lcd.c: 177: GPIO_PinDirection(RW,0x00u);
  2332  00147A  0E00               	movlw	0
  2333  00147C  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2334  00147E  5006               	movf	LCD_SetUp@RW,w,c
  2335  001480  ECE1  F008         	call	_GPIO_PinDirection
  2336                           
  2337                           ;lcd.c: 178: GPIO_PinDirection(EN,0x00u);
  2338  001484  0E00               	movlw	0
  2339  001486  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2340  001488  5007               	movf	LCD_SetUp@EN,w,c
  2341  00148A  ECE1  F008         	call	_GPIO_PinDirection
  2342                           
  2343                           ;lcd.c: 180: GPIO_PinDirection(D4,0x00u);
  2344  00148E  0E00               	movlw	0
  2345  001490  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2346  001492  500C               	movf	LCD_SetUp@D4,w,c
  2347  001494  ECE1  F008         	call	_GPIO_PinDirection
  2348                           
  2349                           ;lcd.c: 181: GPIO_PinDirection(D5,0x00u);
  2350  001498  0E00               	movlw	0
  2351  00149A  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2352  00149C  500D               	movf	LCD_SetUp@D5,w,c
  2353  00149E  ECE1  F008         	call	_GPIO_PinDirection
  2354                           
  2355                           ;lcd.c: 182: GPIO_PinDirection(D6,0x00u);
  2356  0014A2  0E00               	movlw	0
  2357  0014A4  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2358  0014A6  500E               	movf	LCD_SetUp@D6,w,c
  2359  0014A8  ECE1  F008         	call	_GPIO_PinDirection
  2360                           
  2361                           ;lcd.c: 183: GPIO_PinDirection(D7,0x00u);
  2362  0014AC  0E00               	movlw	0
  2363  0014AE  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2364  0014B0  500F               	movf	LCD_SetUp@D7,w,c
  2365  0014B2  ECE1  F008         	call	_GPIO_PinDirection
  2366  0014B6  0012               	return		;funcret
  2367  0014B8                     __end_of_LCD_SetUp:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           postdec1	equ	0xFE5
  2378                           fsr1l	equ	0xFE1
  2379                           indf2	equ	0xFDF
  2380                           postinc2	equ	0xFDE
  2381                           postdec2	equ	0xFDD
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _LCD_Printf *****************
  2387 ;; Defined at:
  2388 ;;		line 676 in file "../00-libfiles/lcd.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  argList         2   43[COMRAM] PTR const unsigned char 
  2391 ;;		 -> STR_3(16), 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  v_num_u32       4   57[COMRAM] unsigned long 
  2394 ;;  v_num_s32       4   51[COMRAM] long 
  2395 ;;  argp            2   67[COMRAM] PTR void [1]
  2396 ;;		 -> ?_LCD_Printf(1), 
  2397 ;;  ptr             2   63[COMRAM] PTR const unsigned char 
  2398 ;;		 -> STR_3(16), 
  2399 ;;  v_num_u16       2   61[COMRAM] unsigned int 
  2400 ;;  v_num_s16       2   55[COMRAM] int 
  2401 ;;  str             2   49[COMRAM] PTR unsigned char 
  2402 ;;		 -> main@str(50), 
  2403 ;;  v_numOfDigit    1   66[COMRAM] unsigned char 
  2404 ;;  ch              1   65[COMRAM] unsigned char 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2414 ;;      Params:         6       0       0       0       0       0       0
  2415 ;;      Locals:        20       0       0       0       0       0       0
  2416 ;;      Temps:          0       0       0       0       0       0       0
  2417 ;;      Totals:        26       0       0       0       0       0       0
  2418 ;;Total ram usage:       26 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    7
  2421 ;; This function calls:
  2422 ;;		_LCD_DisplayChar
  2423 ;;		_LCD_DisplayNumber
  2424 ;;		_LCD_DisplayString
  2425 ;; This function is called by:
  2426 ;;		_main
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text10
  2431  00098A                     __ptext10:
  2432                           	opt stack 0
  2433  00098A                     _LCD_Printf:
  2434                           	opt stack 23
  2435                           
  2436                           ;lcd.c: 678: const char *ptr;
  2437                           ;lcd.c: 679: va_list argp;
  2438                           ;lcd.c: 680: sint16_t v_num_s16;
  2439                           ;lcd.c: 681: sint32_t v_num_s32;
  2440                           ;lcd.c: 682: uint16_t v_num_u16;
  2441                           ;lcd.c: 683: uint32_t v_num_u32;
  2442                           ;lcd.c: 684: char *str;
  2443                           ;lcd.c: 685: char ch;
  2444                           ;lcd.c: 686: uint8_t v_numOfDigitsToDisp_u8;
  2445                           ;lcd.c: 691: *argp = __va_start();
  2446                           
  2447                           ;incstack = 0
  2448  00098A  0E2E               	movlw	low (?_LCD_Printf+2)
  2449  00098C  6E44               	movwf	LCD_Printf@argp,c
  2450  00098E  0E00               	movlw	high (?_LCD_Printf+2)
  2451  000990  6E45               	movwf	LCD_Printf@argp+1,c
  2452                           
  2453                           ;lcd.c: 694: for(ptr = argList; *ptr != '\0'; ptr++)
  2454  000992  C02C  F040         	movff	LCD_Printf@argList,LCD_Printf@ptr
  2455  000996  C02D  F041         	movff	LCD_Printf@argList+1,LCD_Printf@ptr+1
  2456  00099A  D189               	goto	l2517
  2457  00099C                     l2403:
  2458                           
  2459                           ;lcd.c: 695: {
  2460                           ;lcd.c: 697: ch= *ptr;
  2461  00099C  C040  FFF6         	movff	LCD_Printf@ptr,tblptrl
  2462  0009A0  C041  FFF7         	movff	LCD_Printf@ptr+1,tblptrh
  2463  0009A4                     	if	0	;tblptru may be non-zero
  2464  0009A4                     	endif
  2465  0009A4                     	if	0	;tblptru may be non-zero
  2466  0009A4                     	endif
  2467  0009A4  0008               	tblrd		*
  2468  0009A6  CFF5 F042          	movff	tablat,LCD_Printf@ch
  2469                           
  2470                           ;lcd.c: 698: if(ch == '%')
  2471  0009AA  0E25               	movlw	37
  2472  0009AC  1842               	xorwf	LCD_Printf@ch,w,c
  2473  0009AE  A4D8               	btfss	status,2,c
  2474  0009B0  D179               	goto	l2513
  2475                           
  2476                           ;lcd.c: 699: {
  2477                           ;lcd.c: 700: ptr++;
  2478  0009B2  4A40               	infsnz	LCD_Printf@ptr,f,c
  2479  0009B4  2A41               	incf	LCD_Printf@ptr+1,f,c
  2480                           
  2481                           ;lcd.c: 701: ch = *ptr;
  2482  0009B6  C040  FFF6         	movff	LCD_Printf@ptr,tblptrl
  2483  0009BA  C041  FFF7         	movff	LCD_Printf@ptr+1,tblptrh
  2484  0009BE                     	if	0	;tblptru may be non-zero
  2485  0009BE                     	endif
  2486  0009BE                     	if	0	;tblptru may be non-zero
  2487  0009BE                     	endif
  2488  0009BE  0008               	tblrd		*
  2489  0009C0  CFF5 F042          	movff	tablat,LCD_Printf@ch
  2490                           
  2491                           ;lcd.c: 702: if((ch>=0x30) && (ch<=0x39))
  2492  0009C4  0E2F               	movlw	47
  2493  0009C6  6442               	cpfsgt	LCD_Printf@ch,c
  2494  0009C8  D01C               	goto	l254
  2495  0009CA  0E3A               	movlw	58
  2496  0009CC  6042               	cpfslt	LCD_Printf@ch,c
  2497  0009CE  D019               	goto	l254
  2498                           
  2499                           ;lcd.c: 703: {
  2500                           ;lcd.c: 704: v_numOfDigitsToDisp_u8 = 0;
  2501  0009D0  0E00               	movlw	0
  2502  0009D2  6E43               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8,c
  2503                           
  2504                           ;lcd.c: 705: while((ch>=0x30) && (ch<=0x39))
  2505  0009D4  D00F               	goto	l2423
  2506  0009D6                     l2417:
  2507                           
  2508                           ;lcd.c: 706: {
  2509                           ;lcd.c: 707: v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
  2510  0009D6  5043               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w,c
  2511  0009D8  0D0A               	mullw	10
  2512  0009DA  50F3               	movf	prodl,w,c
  2513  0009DC  2442               	addwf	LCD_Printf@ch,w,c
  2514  0009DE  0FD0               	addlw	208
  2515  0009E0  6E43               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8,c
  2516                           
  2517                           ;lcd.c: 708: ptr++;
  2518  0009E2  4A40               	infsnz	LCD_Printf@ptr,f,c
  2519  0009E4  2A41               	incf	LCD_Printf@ptr+1,f,c
  2520                           
  2521                           ;lcd.c: 709: ch = *ptr;
  2522  0009E6  C040  FFF6         	movff	LCD_Printf@ptr,tblptrl
  2523  0009EA  C041  FFF7         	movff	LCD_Printf@ptr+1,tblptrh
  2524  0009EE                     	if	0	;tblptru may be non-zero
  2525  0009EE                     	endif
  2526  0009EE                     	if	0	;tblptru may be non-zero
  2527  0009EE                     	endif
  2528  0009EE  0008               	tblrd		*
  2529  0009F0  CFF5 F042          	movff	tablat,LCD_Printf@ch
  2530  0009F4                     l2423:
  2531  0009F4  0E2F               	movlw	47
  2532  0009F6  6442               	cpfsgt	LCD_Printf@ch,c
  2533  0009F8  D126               	goto	l2511
  2534  0009FA  0E39               	movlw	57
  2535  0009FC  6442               	cpfsgt	LCD_Printf@ch,c
  2536  0009FE  D7EB               	goto	l2417
  2537  000A00  D122               	goto	l2511
  2538  000A02                     l254:
  2539                           
  2540                           ;lcd.c: 712: else
  2541                           ;lcd.c: 713: {
  2542                           ;lcd.c: 714: v_numOfDigitsToDisp_u8 = 0xffu;
  2543  000A02  6843               	setf	LCD_Printf@v_numOfDigitsToDisp_u8,c
  2544                           
  2545                           ;lcd.c: 715: }
  2546                           ;lcd.c: 718: switch(ch)
  2547  000A04  D120               	goto	l2511
  2548  000A06                     l2427:
  2549                           
  2550                           ;lcd.c: 721: case 'c':
  2551                           ;lcd.c: 722: ch = (*(int *)__va_arg((*(int **)argp), (int)0));
  2552  000A06  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2553  000A0A  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2554  000A0E  50DF               	movf	indf2,w,c
  2555  000A10  6E42               	movwf	LCD_Printf@ch,c
  2556  000A12  0E02               	movlw	2
  2557  000A14  2644               	addwf	LCD_Printf@argp,f,c
  2558  000A16  0E00               	movlw	0
  2559  000A18  2245               	addwfc	LCD_Printf@argp+1,f,c
  2560                           
  2561                           ;lcd.c: 723: LCD_DisplayChar(ch);
  2562  000A1A  5042               	movf	LCD_Printf@ch,w,c
  2563  000A1C  EC61  F00D         	call	_LCD_DisplayChar
  2564                           
  2565                           ;lcd.c: 724: break;
  2566  000A20  D144               	goto	l2515
  2567  000A22                     l2433:
  2568                           
  2569                           ;lcd.c: 727: v_num_s16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  2570  000A22  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2571  000A26  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2572  000A2A  CFDE F038          	movff	postinc2,LCD_Printf@v_num_s16
  2573  000A2E  CFDD F039          	movff	postdec2,LCD_Printf@v_num_s16+1
  2574  000A32  0E02               	movlw	2
  2575  000A34  2644               	addwf	LCD_Printf@argp,f,c
  2576  000A36  0E00               	movlw	0
  2577  000A38  2245               	addwfc	LCD_Printf@argp+1,f,c
  2578                           
  2579                           ;lcd.c: 728: if(v_num_s16<0)
  2580  000A3A  AE39               	btfss	LCD_Printf@v_num_s16+1,7,c
  2581  000A3C  D007               	goto	l2443
  2582                           
  2583                           ;lcd.c: 729: {
  2584                           ;lcd.c: 730: v_num_s16 = -v_num_s16;
  2585  000A3E  6C38               	negf	LCD_Printf@v_num_s16,c
  2586  000A40  1E39               	comf	LCD_Printf@v_num_s16+1,f,c
  2587  000A42  B0D8               	btfsc	status,0,c
  2588  000A44  2A39               	incf	LCD_Printf@v_num_s16+1,f,c
  2589                           
  2590                           ;lcd.c: 731: LCD_DisplayChar('-');
  2591  000A46  0E2D               	movlw	45
  2592  000A48  EC61  F00D         	call	_LCD_DisplayChar
  2593  000A4C                     l2443:
  2594                           
  2595                           ;lcd.c: 732: }
  2596                           ;lcd.c: 733: LCD_DisplayNumber(10u,v_num_s16,v_numOfDigitsToDisp_u8);
  2597  000A4C  C038  F00E         	movff	LCD_Printf@v_num_s16,LCD_DisplayNumber@v_number_u32
  2598  000A50  C039  F00F         	movff	LCD_Printf@v_num_s16+1,LCD_DisplayNumber@v_number_u32+1
  2599  000A54  0E00               	movlw	0
  2600  000A56  BE0F               	btfsc	LCD_DisplayNumber@v_number_u32+1,7,c
  2601  000A58  0EFF               	movlw	-1
  2602  000A5A  6E10               	movwf	LCD_DisplayNumber@v_number_u32+2,c
  2603  000A5C  6E11               	movwf	LCD_DisplayNumber@v_number_u32+3,c
  2604  000A5E  C043  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  2605  000A62  0E0A               	movlw	10
  2606  000A64  EC49  F007         	call	_LCD_DisplayNumber
  2607                           
  2608                           ;lcd.c: 734: break;
  2609  000A68  D120               	goto	l2515
  2610  000A6A                     l2445:
  2611                           
  2612                           ;lcd.c: 737: v_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  2613  000A6A  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2614  000A6E  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2615  000A72  CFDE F034          	movff	postinc2,LCD_Printf@v_num_s32
  2616  000A76  CFDE F035          	movff	postinc2,LCD_Printf@v_num_s32+1
  2617  000A7A  CFDE F036          	movff	postinc2,LCD_Printf@v_num_s32+2
  2618  000A7E  CFDE F037          	movff	postinc2,LCD_Printf@v_num_s32+3
  2619  000A82  0E04               	movlw	4
  2620  000A84  2644               	addwf	LCD_Printf@argp,f,c
  2621  000A86  0E00               	movlw	0
  2622  000A88  2245               	addwfc	LCD_Printf@argp+1,f,c
  2623                           
  2624                           ;lcd.c: 738: if(v_num_s32<0)
  2625  000A8A  AE37               	btfss	LCD_Printf@v_num_s32+3,7,c
  2626  000A8C  D00B               	goto	l2455
  2627                           
  2628                           ;lcd.c: 739: {
  2629                           ;lcd.c: 740: v_num_s32 = -v_num_s32;
  2630  000A8E  1E37               	comf	LCD_Printf@v_num_s32+3,f,c
  2631  000A90  1E36               	comf	LCD_Printf@v_num_s32+2,f,c
  2632  000A92  1E35               	comf	LCD_Printf@v_num_s32+1,f,c
  2633  000A94  6C34               	negf	LCD_Printf@v_num_s32,c
  2634  000A96  0E00               	movlw	0
  2635  000A98  2235               	addwfc	LCD_Printf@v_num_s32+1,f,c
  2636  000A9A  2236               	addwfc	LCD_Printf@v_num_s32+2,f,c
  2637  000A9C  2237               	addwfc	LCD_Printf@v_num_s32+3,f,c
  2638                           
  2639                           ;lcd.c: 741: LCD_DisplayChar('-');
  2640  000A9E  0E2D               	movlw	45
  2641  000AA0  EC61  F00D         	call	_LCD_DisplayChar
  2642  000AA4                     l2455:
  2643                           
  2644                           ;lcd.c: 742: }
  2645                           ;lcd.c: 743: LCD_DisplayNumber(10u,v_num_s32,v_numOfDigitsToDisp_u8);
  2646  000AA4  C034  F00E         	movff	LCD_Printf@v_num_s32,LCD_DisplayNumber@v_number_u32
  2647  000AA8  C035  F00F         	movff	LCD_Printf@v_num_s32+1,LCD_DisplayNumber@v_number_u32+1
  2648  000AAC  C036  F010         	movff	LCD_Printf@v_num_s32+2,LCD_DisplayNumber@v_number_u32+2
  2649  000AB0  C037  F011         	movff	LCD_Printf@v_num_s32+3,LCD_DisplayNumber@v_number_u32+3
  2650  000AB4  C043  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  2651  000AB8  0E0A               	movlw	10
  2652  000ABA  EC49  F007         	call	_LCD_DisplayNumber
  2653                           
  2654                           ;lcd.c: 744: break;
  2655  000ABE  D0F5               	goto	l2515
  2656  000AC0                     l2457:
  2657                           
  2658                           ;lcd.c: 747: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  2659  000AC0  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2660  000AC4  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2661  000AC8  CFDE F03E          	movff	postinc2,LCD_Printf@v_num_u16
  2662  000ACC  CFDD F03F          	movff	postdec2,LCD_Printf@v_num_u16+1
  2663  000AD0  0E02               	movlw	2
  2664  000AD2  2644               	addwf	LCD_Printf@argp,f,c
  2665  000AD4  0E00               	movlw	0
  2666  000AD6  2245               	addwfc	LCD_Printf@argp+1,f,c
  2667                           
  2668                           ;lcd.c: 748: LCD_DisplayNumber(10u,v_num_u16,v_numOfDigitsToDisp_u8);
  2669  000AD8  C03E  F00E         	movff	LCD_Printf@v_num_u16,LCD_DisplayNumber@v_number_u32
  2670  000ADC  C03F  F00F         	movff	LCD_Printf@v_num_u16+1,LCD_DisplayNumber@v_number_u32+1
  2671  000AE0  6A10               	clrf	LCD_DisplayNumber@v_number_u32+2,c
  2672  000AE2  6A11               	clrf	LCD_DisplayNumber@v_number_u32+3,c
  2673  000AE4  C043  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  2674  000AE8  0E0A               	movlw	10
  2675  000AEA  EC49  F007         	call	_LCD_DisplayNumber
  2676                           
  2677                           ;lcd.c: 749: break;
  2678  000AEE  D0DD               	goto	l2515
  2679  000AF0                     l2463:
  2680                           
  2681                           ;lcd.c: 752: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  2682  000AF0  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2683  000AF4  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2684  000AF8  CFDE F03A          	movff	postinc2,LCD_Printf@v_num_u32
  2685  000AFC  CFDE F03B          	movff	postinc2,LCD_Printf@v_num_u32+1
  2686  000B00  CFDE F03C          	movff	postinc2,LCD_Printf@v_num_u32+2
  2687  000B04  CFDE F03D          	movff	postinc2,LCD_Printf@v_num_u32+3
  2688  000B08  0E04               	movlw	4
  2689  000B0A  2644               	addwf	LCD_Printf@argp,f,c
  2690  000B0C  0E00               	movlw	0
  2691  000B0E  2245               	addwfc	LCD_Printf@argp+1,f,c
  2692                           
  2693                           ;lcd.c: 753: LCD_DisplayNumber(10u,v_num_u32,v_numOfDigitsToDisp_u8);
  2694  000B10  C03A  F00E         	movff	LCD_Printf@v_num_u32,LCD_DisplayNumber@v_number_u32
  2695  000B14  C03B  F00F         	movff	LCD_Printf@v_num_u32+1,LCD_DisplayNumber@v_number_u32+1
  2696  000B18  C03C  F010         	movff	LCD_Printf@v_num_u32+2,LCD_DisplayNumber@v_number_u32+2
  2697  000B1C  C03D  F011         	movff	LCD_Printf@v_num_u32+3,LCD_DisplayNumber@v_number_u32+3
  2698  000B20  C043  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  2699  000B24  0E0A               	movlw	10
  2700  000B26  EC49  F007         	call	_LCD_DisplayNumber
  2701                           
  2702                           ;lcd.c: 754: break;
  2703  000B2A  D0BF               	goto	l2515
  2704  000B2C                     l2469:
  2705                           
  2706                           ;lcd.c: 757: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  2707  000B2C  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2708  000B30  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2709  000B34  CFDE F03E          	movff	postinc2,LCD_Printf@v_num_u16
  2710  000B38  CFDD F03F          	movff	postdec2,LCD_Printf@v_num_u16+1
  2711  000B3C  0E02               	movlw	2
  2712  000B3E  2644               	addwf	LCD_Printf@argp,f,c
  2713  000B40  0E00               	movlw	0
  2714  000B42  2245               	addwfc	LCD_Printf@argp+1,f,c
  2715                           
  2716                           ;lcd.c: 758: LCD_DisplayNumber(16u,v_num_u16,v_numOfDigitsToDisp_u8);
  2717  000B44  C03E  F00E         	movff	LCD_Printf@v_num_u16,LCD_DisplayNumber@v_number_u32
  2718  000B48  C03F  F00F         	movff	LCD_Printf@v_num_u16+1,LCD_DisplayNumber@v_number_u32+1
  2719  000B4C  6A10               	clrf	LCD_DisplayNumber@v_number_u32+2,c
  2720  000B4E  6A11               	clrf	LCD_DisplayNumber@v_number_u32+3,c
  2721  000B50  C043  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  2722  000B54  0E10               	movlw	16
  2723  000B56  EC49  F007         	call	_LCD_DisplayNumber
  2724                           
  2725                           ;lcd.c: 759: break;
  2726  000B5A  D0A7               	goto	l2515
  2727  000B5C                     l2475:
  2728                           
  2729                           ;lcd.c: 762: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  2730  000B5C  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2731  000B60  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2732  000B64  CFDE F03A          	movff	postinc2,LCD_Printf@v_num_u32
  2733  000B68  CFDE F03B          	movff	postinc2,LCD_Printf@v_num_u32+1
  2734  000B6C  CFDE F03C          	movff	postinc2,LCD_Printf@v_num_u32+2
  2735  000B70  CFDE F03D          	movff	postinc2,LCD_Printf@v_num_u32+3
  2736  000B74  0E04               	movlw	4
  2737  000B76  2644               	addwf	LCD_Printf@argp,f,c
  2738  000B78  0E00               	movlw	0
  2739  000B7A  2245               	addwfc	LCD_Printf@argp+1,f,c
  2740                           
  2741                           ;lcd.c: 763: LCD_DisplayNumber(16u,v_num_u32,v_numOfDigitsToDisp_u8);
  2742  000B7C  C03A  F00E         	movff	LCD_Printf@v_num_u32,LCD_DisplayNumber@v_number_u32
  2743  000B80  C03B  F00F         	movff	LCD_Printf@v_num_u32+1,LCD_DisplayNumber@v_number_u32+1
  2744  000B84  C03C  F010         	movff	LCD_Printf@v_num_u32+2,LCD_DisplayNumber@v_number_u32+2
  2745  000B88  C03D  F011         	movff	LCD_Printf@v_num_u32+3,LCD_DisplayNumber@v_number_u32+3
  2746  000B8C  C043  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  2747  000B90  0E10               	movlw	16
  2748  000B92  EC49  F007         	call	_LCD_DisplayNumber
  2749                           
  2750                           ;lcd.c: 764: break;
  2751  000B96  D089               	goto	l2515
  2752  000B98                     l2481:
  2753                           
  2754                           ;lcd.c: 768: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  2755  000B98  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2756  000B9C  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2757  000BA0  CFDE F03E          	movff	postinc2,LCD_Printf@v_num_u16
  2758  000BA4  CFDD F03F          	movff	postdec2,LCD_Printf@v_num_u16+1
  2759  000BA8  0E02               	movlw	2
  2760  000BAA  2644               	addwf	LCD_Printf@argp,f,c
  2761  000BAC  0E00               	movlw	0
  2762  000BAE  2245               	addwfc	LCD_Printf@argp+1,f,c
  2763                           
  2764                           ;lcd.c: 769: if(v_numOfDigitsToDisp_u8 == 0xffu)
  2765  000BB0  2843               	incf	LCD_Printf@v_numOfDigitsToDisp_u8,w,c
  2766  000BB2  A4D8               	btfss	status,2,c
  2767  000BB4  D002               	goto	l2489
  2768                           
  2769                           ;lcd.c: 770: v_numOfDigitsToDisp_u8 = 16;
  2770  000BB6  0E10               	movlw	16
  2771  000BB8  6E43               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8,c
  2772  000BBA                     l2489:
  2773                           
  2774                           ;lcd.c: 771: LCD_DisplayNumber(2u,v_num_u16,v_numOfDigitsToDisp_u8);
  2775  000BBA  C03E  F00E         	movff	LCD_Printf@v_num_u16,LCD_DisplayNumber@v_number_u32
  2776  000BBE  C03F  F00F         	movff	LCD_Printf@v_num_u16+1,LCD_DisplayNumber@v_number_u32+1
  2777  000BC2  6A10               	clrf	LCD_DisplayNumber@v_number_u32+2,c
  2778  000BC4  6A11               	clrf	LCD_DisplayNumber@v_number_u32+3,c
  2779  000BC6  C043  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  2780  000BCA  0E02               	movlw	2
  2781  000BCC  EC49  F007         	call	_LCD_DisplayNumber
  2782                           
  2783                           ;lcd.c: 772: break;
  2784  000BD0  D06C               	goto	l2515
  2785  000BD2                     l2491:
  2786                           
  2787                           ;lcd.c: 775: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  2788  000BD2  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2789  000BD6  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2790  000BDA  CFDE F03A          	movff	postinc2,LCD_Printf@v_num_u32
  2791  000BDE  CFDE F03B          	movff	postinc2,LCD_Printf@v_num_u32+1
  2792  000BE2  CFDE F03C          	movff	postinc2,LCD_Printf@v_num_u32+2
  2793  000BE6  CFDE F03D          	movff	postinc2,LCD_Printf@v_num_u32+3
  2794  000BEA  0E04               	movlw	4
  2795  000BEC  2644               	addwf	LCD_Printf@argp,f,c
  2796  000BEE  0E00               	movlw	0
  2797  000BF0  2245               	addwfc	LCD_Printf@argp+1,f,c
  2798                           
  2799                           ;lcd.c: 776: if(v_numOfDigitsToDisp_u8 == 0xffu)
  2800  000BF2  2843               	incf	LCD_Printf@v_numOfDigitsToDisp_u8,w,c
  2801  000BF4  A4D8               	btfss	status,2,c
  2802  000BF6  D002               	goto	l2499
  2803                           
  2804                           ;lcd.c: 777: v_numOfDigitsToDisp_u8 = 16;
  2805  000BF8  0E10               	movlw	16
  2806  000BFA  6E43               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8,c
  2807  000BFC                     l2499:
  2808                           
  2809                           ;lcd.c: 778: LCD_DisplayNumber(2u,v_num_u32,v_numOfDigitsToDisp_u8);
  2810  000BFC  C03A  F00E         	movff	LCD_Printf@v_num_u32,LCD_DisplayNumber@v_number_u32
  2811  000C00  C03B  F00F         	movff	LCD_Printf@v_num_u32+1,LCD_DisplayNumber@v_number_u32+1
  2812  000C04  C03C  F010         	movff	LCD_Printf@v_num_u32+2,LCD_DisplayNumber@v_number_u32+2
  2813  000C08  C03D  F011         	movff	LCD_Printf@v_num_u32+3,LCD_DisplayNumber@v_number_u32+3
  2814  000C0C  C043  F012         	movff	LCD_Printf@v_numOfDigitsToDisp_u8,LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  2815  000C10  0E02               	movlw	2
  2816  000C12  EC49  F007         	call	_LCD_DisplayNumber
  2817                           
  2818                           ;lcd.c: 783: case 'f':
  2819                           ;lcd.c: 788: break;
  2820                           
  2821                           ;lcd.c: 782: case 'F':
  2822                           
  2823                           ;lcd.c: 779: break;
  2824  000C16  D049               	goto	l2515
  2825  000C18                     l2501:
  2826                           
  2827                           ;lcd.c: 792: case 's':
  2828                           ;lcd.c: 793: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  2829  000C18  C044  FFD9         	movff	LCD_Printf@argp,fsr2l
  2830  000C1C  C045  FFDA         	movff	LCD_Printf@argp+1,fsr2h
  2831  000C20  CFDE F032          	movff	postinc2,LCD_Printf@str
  2832  000C24  CFDD F033          	movff	postdec2,LCD_Printf@str+1
  2833  000C28  0E02               	movlw	2
  2834  000C2A  2644               	addwf	LCD_Printf@argp,f,c
  2835  000C2C  0E00               	movlw	0
  2836  000C2E  2245               	addwfc	LCD_Printf@argp+1,f,c
  2837                           
  2838                           ;lcd.c: 794: LCD_DisplayString(str);
  2839  000C30  C032  F009         	movff	LCD_Printf@str,LCD_DisplayString@ptr_stringPointer_u8
  2840  000C34  C033  F00A         	movff	LCD_Printf@str+1,LCD_DisplayString@ptr_stringPointer_u8+1
  2841  000C38  EC7D  F00C         	call	_LCD_DisplayString	;wreg free
  2842                           
  2843                           ;lcd.c: 795: break;
  2844  000C3C  D036               	goto	l2515
  2845  000C3E                     l2507:
  2846                           
  2847                           ;lcd.c: 798: LCD_DisplayChar('%');
  2848  000C3E  0E25               	movlw	37
  2849  000C40  EC61  F00D         	call	_LCD_DisplayChar
  2850                           
  2851                           ;lcd.c: 800: }
  2852                           
  2853                           ;lcd.c: 799: break;
  2854  000C44  D032               	goto	l2515
  2855  000C46                     l2511:
  2856  000C46  5042               	movf	LCD_Printf@ch,w,c
  2857                           
  2858                           ; Switch size 1, requested type "space"
  2859                           ; Number of cases is 15, Range of values is 37 to 120
  2860                           ; switch strategies available:
  2861                           ; Name         Instructions Cycles
  2862                           ; simple_byte           46    24 (average)
  2863                           ;	Chosen strategy is simple_byte
  2864  000C48  0A25               	xorlw	37	; case 37
  2865  000C4A  B4D8               	btfsc	status,2,c
  2866  000C4C  D7F8               	goto	l2507
  2867  000C4E  0A67               	xorlw	103	; case 66
  2868  000C50  B4D8               	btfsc	status,2,c
  2869  000C52  D7BF               	goto	l2491
  2870  000C54  0A01               	xorlw	1	; case 67
  2871  000C56  B4D8               	btfsc	status,2,c
  2872  000C58  D6D6               	goto	l2427
  2873  000C5A  0A07               	xorlw	7	; case 68
  2874  000C5C  B4D8               	btfsc	status,2,c
  2875  000C5E  D705               	goto	l2445
  2876  000C60  0A02               	xorlw	2	; case 70
  2877  000C62  B4D8               	btfsc	status,2,c
  2878  000C64  D022               	goto	l2515
  2879  000C66  0A15               	xorlw	21	; case 83
  2880  000C68  B4D8               	btfsc	status,2,c
  2881  000C6A  D7D6               	goto	l2501
  2882  000C6C  0A06               	xorlw	6	; case 85
  2883  000C6E  B4D8               	btfsc	status,2,c
  2884  000C70  D73F               	goto	l2463
  2885  000C72  0A0D               	xorlw	13	; case 88
  2886  000C74  B4D8               	btfsc	status,2,c
  2887  000C76  D772               	goto	l2475
  2888  000C78  0A3A               	xorlw	58	; case 98
  2889  000C7A  B4D8               	btfsc	status,2,c
  2890  000C7C  D78D               	goto	l2481
  2891  000C7E  0A01               	xorlw	1	; case 99
  2892  000C80  B4D8               	btfsc	status,2,c
  2893  000C82  D6C1               	goto	l2427
  2894  000C84  0A07               	xorlw	7	; case 100
  2895  000C86  B4D8               	btfsc	status,2,c
  2896  000C88  D6CC               	goto	l2433
  2897  000C8A  0A02               	xorlw	2	; case 102
  2898  000C8C  B4D8               	btfsc	status,2,c
  2899  000C8E  D00D               	goto	l2515
  2900  000C90  0A15               	xorlw	21	; case 115
  2901  000C92  B4D8               	btfsc	status,2,c
  2902  000C94  D7C1               	goto	l2501
  2903  000C96  0A06               	xorlw	6	; case 117
  2904  000C98  B4D8               	btfsc	status,2,c
  2905  000C9A  D712               	goto	l2457
  2906  000C9C  0A0D               	xorlw	13	; case 120
  2907  000C9E  B4D8               	btfsc	status,2,c
  2908  000CA0  D745               	goto	l2469
  2909                           
  2910                           ;lcd.c: 801: }
  2911  000CA2  D003               	goto	l2515
  2912  000CA4                     l2513:
  2913                           
  2914                           ;lcd.c: 802: else
  2915                           ;lcd.c: 803: {
  2916                           ;lcd.c: 805: LCD_DisplayChar(ch);
  2917  000CA4  5042               	movf	LCD_Printf@ch,w,c
  2918  000CA6  EC61  F00D         	call	_LCD_DisplayChar
  2919  000CAA                     l2515:
  2920  000CAA  4A40               	infsnz	LCD_Printf@ptr,f,c
  2921  000CAC  2A41               	incf	LCD_Printf@ptr+1,f,c
  2922  000CAE                     l2517:
  2923  000CAE  C040  FFF6         	movff	LCD_Printf@ptr,tblptrl
  2924  000CB2  C041  FFF7         	movff	LCD_Printf@ptr+1,tblptrh
  2925  000CB6                     	if	0	;tblptru may be non-zero
  2926  000CB6                     	endif
  2927  000CB6                     	if	0	;tblptru may be non-zero
  2928  000CB6                     	endif
  2929  000CB6  0008               	tblrd		*
  2930  000CB8  50F5               	movf	tablat,w,c
  2931  000CBA  0900               	iorlw	0
  2932  000CBC  B4D8               	btfsc	status,2,c
  2933  000CBE  0012               	return	
  2934  000CC0  D66D               	goto	l2403
  2935  000CC2                     __end_of_LCD_Printf:
  2936                           	opt stack 0
  2937                           tblptru	equ	0xFF8
  2938                           tblptrh	equ	0xFF7
  2939                           tblptrl	equ	0xFF6
  2940                           tablat	equ	0xFF5
  2941                           prodh	equ	0xFF4
  2942                           prodl	equ	0xFF3
  2943                           postinc0	equ	0xFEE
  2944                           wreg	equ	0xFE8
  2945                           postdec1	equ	0xFE5
  2946                           fsr1l	equ	0xFE1
  2947                           indf2	equ	0xFDF
  2948                           postinc2	equ	0xFDE
  2949                           postdec2	equ	0xFDD
  2950                           fsr2h	equ	0xFDA
  2951                           fsr2l	equ	0xFD9
  2952                           status	equ	0xFD8
  2953                           
  2954 ;; *************** function _LCD_DisplayString *****************
  2955 ;; Defined at:
  2956 ;;		line 427 in file "../00-libfiles/lcd.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  ptr_stringPo    2    8[COMRAM] PTR const unsigned char 
  2959 ;;		 -> main@str(50), STR_1(32), 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2971 ;;      Params:         2       0       0       0       0       0       0
  2972 ;;      Locals:         0       0       0       0       0       0       0
  2973 ;;      Temps:          0       0       0       0       0       0       0
  2974 ;;      Totals:         2       0       0       0       0       0       0
  2975 ;;Total ram usage:        2 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    6
  2978 ;; This function calls:
  2979 ;;		_LCD_DisplayChar
  2980 ;; This function is called by:
  2981 ;;		_LCD_Printf
  2982 ;;		_main
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text11
  2987  0018FA                     __ptext11:
  2988                           	opt stack 0
  2989  0018FA                     _LCD_DisplayString:
  2990                           	opt stack 23
  2991                           
  2992                           ;lcd.c: 429: while((*ptr_stringPointer_u8)!=0)
  2993                           
  2994                           ;incstack = 0
  2995  0018FA  D014               	goto	l2123
  2996  0018FC                     l2119:
  2997                           
  2998                           ;lcd.c: 430: LCD_DisplayChar(*ptr_stringPointer_u8++);
  2999  0018FC  C009  FFF6         	movff	LCD_DisplayString@ptr_stringPointer_u8,tblptrl
  3000  001900  C00A  FFF7         	movff	LCD_DisplayString@ptr_stringPointer_u8+1,tblptrh
  3001  001904  6AF8               	clrf	tblptru,c
  3002  001906  0E05               	movlw	(high __ramtop+-1)
  3003  001908  64F7               	cpfsgt	tblptrh,c
  3004  00190A  D003               	bra	u2417
  3005  00190C  0008               	tblrd		*
  3006  00190E  50F5               	movf	tablat,w,c
  3007  001910  D005               	bra	u2410
  3008  001912                     u2417:
  3009  001912  CFF6 FFD9          	movff	tblptrl,fsr2l
  3010  001916  CFF7 FFDA          	movff	tblptrh,fsr2h
  3011  00191A  50DF               	movf	indf2,w,c
  3012  00191C                     u2410:
  3013  00191C  EC61  F00D         	call	_LCD_DisplayChar
  3014  001920  4A09               	infsnz	LCD_DisplayString@ptr_stringPointer_u8,f,c
  3015  001922  2A0A               	incf	LCD_DisplayString@ptr_stringPointer_u8+1,f,c
  3016  001924                     l2123:
  3017  001924  C009  FFF6         	movff	LCD_DisplayString@ptr_stringPointer_u8,tblptrl
  3018  001928  C00A  FFF7         	movff	LCD_DisplayString@ptr_stringPointer_u8+1,tblptrh
  3019  00192C  6AF8               	clrf	tblptru,c
  3020  00192E  0E05               	movlw	(high __ramtop+-1)
  3021  001930  64F7               	cpfsgt	tblptrh,c
  3022  001932  D003               	bra	u2427
  3023  001934  0008               	tblrd		*
  3024  001936  50F5               	movf	tablat,w,c
  3025  001938  D005               	bra	u2420
  3026  00193A                     u2427:
  3027  00193A  CFF6 FFD9          	movff	tblptrl,fsr2l
  3028  00193E  CFF7 FFDA          	movff	tblptrh,fsr2h
  3029  001942  50DF               	movf	indf2,w,c
  3030  001944                     u2420:
  3031  001944  0900               	iorlw	0
  3032  001946  B4D8               	btfsc	status,2,c
  3033  001948  0012               	return	
  3034  00194A  D7D8               	goto	l2119
  3035  00194C                     __end_of_LCD_DisplayString:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postdec1	equ	0xFE5
  3046                           fsr1l	equ	0xFE1
  3047                           indf2	equ	0xFDF
  3048                           postinc2	equ	0xFDE
  3049                           postdec2	equ	0xFDD
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function _LCD_DisplayNumber *****************
  3055 ;; Defined at:
  3056 ;;		line 529 in file "../00-libfiles/lcd.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;  v_numericSys    1    wreg     unsigned char 
  3059 ;;  v_number_u32    4   13[COMRAM] unsigned long 
  3060 ;;  v_numOfDigit    1   17[COMRAM] unsigned char 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  v_numericSys    1   41[COMRAM] unsigned char 
  3063 ;;  a              10   29[COMRAM] unsigned char [10]
  3064 ;;  i               1   42[COMRAM] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      void 
  3067 ;; Registers used:
  3068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3074 ;;      Params:         5       0       0       0       0       0       0
  3075 ;;      Locals:        14       0       0       0       0       0       0
  3076 ;;      Temps:         11       0       0       0       0       0       0
  3077 ;;      Totals:        30       0       0       0       0       0       0
  3078 ;;Total ram usage:       30 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    6
  3081 ;; This function calls:
  3082 ;;		_LCD_DisplayChar
  3083 ;;		___lldiv
  3084 ;; This function is called by:
  3085 ;;		_LCD_Printf
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text12
  3090  000E92                     __ptext12:
  3091                           	opt stack 0
  3092  000E92                     _LCD_DisplayNumber:
  3093                           	opt stack 23
  3094                           
  3095                           ;incstack = 0
  3096                           ;LCD_DisplayNumber@v_numericSystem_u8 stored from wreg
  3097  000E92  6E2A               	movwf	LCD_DisplayNumber@v_numericSystem_u8,c
  3098                           
  3099                           ;lcd.c: 531: uint8_t i=0,a[10];
  3100  000E94  0E00               	movlw	0
  3101  000E96  6E2B               	movwf	LCD_DisplayNumber@i,c
  3102                           
  3103                           ;lcd.c: 533: if(2u == v_numericSystem_u8)
  3104  000E98  0E02               	movlw	2
  3105  000E9A  182A               	xorwf	LCD_DisplayNumber@v_numericSystem_u8,w,c
  3106  000E9C  B4D8               	btfsc	status,2,c
  3107  000E9E  D034               	goto	l2137
  3108  000EA0  D037               	goto	l2139
  3109  000EA2                     l2131:
  3110                           
  3111                           ;lcd.c: 536: {
  3112                           ;lcd.c: 539: i = (((v_number_u32)&(((uint8_t)1<<((v_numOfDigitsToDisplay_u8-1)))))!=0u);
  3113  000EA2  C012  F013         	movff	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,??_LCD_DisplayNumber
  3114  000EA6  0EFF               	movlw	-1
  3115  000EA8  2613               	addwf	??_LCD_DisplayNumber,f,c
  3116  000EAA  0E01               	movlw	1
  3117  000EAC  6E14               	movwf	(??_LCD_DisplayNumber+1)& (0+255),c
  3118  000EAE  0E00               	movlw	0
  3119  000EB0  6E15               	movwf	(??_LCD_DisplayNumber+2)& (0+255),c
  3120  000EB2  2A13               	incf	??_LCD_DisplayNumber,f,c
  3121  000EB4  D003               	goto	u2454
  3122  000EB6                     u2455:
  3123  000EB6  90D8               	bcf	status,0,c
  3124  000EB8  3614               	rlcf	??_LCD_DisplayNumber+1,f,c
  3125  000EBA  3615               	rlcf	??_LCD_DisplayNumber+2,f,c
  3126  000EBC                     u2454:
  3127  000EBC  2E13               	decfsz	??_LCD_DisplayNumber,f,c
  3128  000EBE  D7FB               	goto	u2455
  3129  000EC0  C014  F016         	movff	??_LCD_DisplayNumber+1,??_LCD_DisplayNumber+3
  3130  000EC4  C015  F017         	movff	??_LCD_DisplayNumber+2,??_LCD_DisplayNumber+4
  3131  000EC8  0E00               	movlw	0
  3132  000ECA  BE17               	btfsc	(??_LCD_DisplayNumber+4)& (0+255),7,c
  3133  000ECC  0EFF               	movlw	255
  3134  000ECE  6E18               	movwf	(??_LCD_DisplayNumber+5)& (0+255),c
  3135  000ED0  6E19               	movwf	(??_LCD_DisplayNumber+6)& (0+255),c
  3136  000ED2  500E               	movf	LCD_DisplayNumber@v_number_u32,w,c
  3137  000ED4  1416               	andwf	??_LCD_DisplayNumber+3,w,c
  3138  000ED6  6E1A               	movwf	(??_LCD_DisplayNumber+7)& (0+255),c
  3139  000ED8  500F               	movf	LCD_DisplayNumber@v_number_u32+1,w,c
  3140  000EDA  1417               	andwf	??_LCD_DisplayNumber+4,w,c
  3141  000EDC  6E1B               	movwf	(??_LCD_DisplayNumber+8)& (0+255),c
  3142  000EDE  5010               	movf	LCD_DisplayNumber@v_number_u32+2,w,c
  3143  000EE0  1418               	andwf	??_LCD_DisplayNumber+5,w,c
  3144  000EE2  6E1C               	movwf	(??_LCD_DisplayNumber+9)& (0+255),c
  3145  000EE4  5011               	movf	LCD_DisplayNumber@v_number_u32+3,w,c
  3146  000EE6  1419               	andwf	??_LCD_DisplayNumber+6,w,c
  3147  000EE8  6E1D               	movwf	(??_LCD_DisplayNumber+10)& (0+255),c
  3148  000EEA  501A               	movf	??_LCD_DisplayNumber+7,w,c
  3149  000EEC  101B               	iorwf	??_LCD_DisplayNumber+8,w,c
  3150  000EEE  101C               	iorwf	??_LCD_DisplayNumber+9,w,c
  3151  000EF0  101D               	iorwf	??_LCD_DisplayNumber+10,w,c
  3152  000EF2  B4D8               	btfsc	status,2,c
  3153  000EF4  D002               	goto	u2460
  3154  000EF6  0E01               	movlw	1
  3155  000EF8  D001               	goto	u2470
  3156  000EFA                     u2460:
  3157  000EFA  0E00               	movlw	0
  3158  000EFC                     u2470:
  3159  000EFC  6E2B               	movwf	LCD_DisplayNumber@i,c
  3160                           
  3161                           ;lcd.c: 540: LCD_DisplayChar(((i)+0x30));
  3162  000EFE  502B               	movf	LCD_DisplayNumber@i,w,c
  3163  000F00  0F30               	addlw	48
  3164  000F02  EC61  F00D         	call	_LCD_DisplayChar
  3165                           
  3166                           ;lcd.c: 541: v_numOfDigitsToDisplay_u8--;
  3167  000F06  0612               	decf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,f,c
  3168  000F08                     l2137:
  3169  000F08  5012               	movf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w,c
  3170  000F0A  B4D8               	btfsc	status,2,c
  3171  000F0C  0012               	return	
  3172  000F0E  D7C9               	goto	l2131
  3173  000F10                     l2139:
  3174                           
  3175                           ;lcd.c: 544: else if(v_number_u32==0)
  3176  000F10  500E               	movf	LCD_DisplayNumber@v_number_u32,w,c
  3177  000F12  100F               	iorwf	LCD_DisplayNumber@v_number_u32+1,w,c
  3178  000F14  1010               	iorwf	LCD_DisplayNumber@v_number_u32+2,w,c
  3179  000F16  1011               	iorwf	LCD_DisplayNumber@v_number_u32+3,w,c
  3180  000F18  A4D8               	btfss	status,2,c
  3181  000F1A  D004               	goto	l2143
  3182                           
  3183                           ;lcd.c: 545: {
  3184                           ;lcd.c: 549: LCD_DisplayChar('0');
  3185  000F1C  0E30               	movlw	48
  3186  000F1E  EC61  F00D         	call	_LCD_DisplayChar
  3187                           
  3188                           ;lcd.c: 550: }
  3189  000F22  0012               	return	
  3190  000F24                     l2143:
  3191                           
  3192                           ;lcd.c: 551: else
  3193                           ;lcd.c: 552: {
  3194                           ;lcd.c: 553: for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
  3195  000F24  0E00               	movlw	0
  3196  000F26  6E2B               	movwf	LCD_DisplayNumber@i,c
  3197  000F28  D04D               	goto	l2161
  3198  000F2A                     l2145:
  3199                           
  3200                           ;lcd.c: 554: {
  3201                           ;lcd.c: 557: if(v_number_u32!=0)
  3202  000F2A  500E               	movf	LCD_DisplayNumber@v_number_u32,w,c
  3203  000F2C  100F               	iorwf	LCD_DisplayNumber@v_number_u32+1,w,c
  3204  000F2E  1010               	iorwf	LCD_DisplayNumber@v_number_u32+2,w,c
  3205  000F30  1011               	iorwf	LCD_DisplayNumber@v_number_u32+3,w,c
  3206  000F32  B4D8               	btfsc	status,2,c
  3207  000F34  D035               	goto	l2151
  3208                           
  3209                           ;lcd.c: 558: {
  3210                           ;lcd.c: 565: a[i]=(uint32_t)(v_number_u32 - (v_numericSystem_u8 * (uint32_t)(v_number_u3
      +                          2/v_numericSystem_u8)));
  3211  000F36  502B               	movf	LCD_DisplayNumber@i,w,c
  3212  000F38  0D01               	mullw	1
  3213  000F3A  0E1E               	movlw	low LCD_DisplayNumber@a
  3214  000F3C  24F3               	addwf	prodl,w,c
  3215  000F3E  6ED9               	movwf	fsr2l,c
  3216  000F40  0E00               	movlw	high LCD_DisplayNumber@a
  3217  000F42  20F4               	addwfc	prodh,w,c
  3218  000F44  6EDA               	movwf	fsr2h,c
  3219  000F46  C00E  F001         	movff	LCD_DisplayNumber@v_number_u32,___lldiv@dividend
  3220  000F4A  C00F  F002         	movff	LCD_DisplayNumber@v_number_u32+1,___lldiv@dividend+1
  3221  000F4E  C010  F003         	movff	LCD_DisplayNumber@v_number_u32+2,___lldiv@dividend+2
  3222  000F52  C011  F004         	movff	LCD_DisplayNumber@v_number_u32+3,___lldiv@dividend+3
  3223  000F56  502A               	movf	LCD_DisplayNumber@v_numericSystem_u8,w,c
  3224  000F58  6E05               	movwf	___lldiv@divisor,c
  3225  000F5A  6A06               	clrf	___lldiv@divisor+1,c
  3226  000F5C  6A07               	clrf	___lldiv@divisor+2,c
  3227  000F5E  6A08               	clrf	___lldiv@divisor+3,c
  3228  000F60  EC1D  F00B         	call	___lldiv	;wreg free
  3229  000F64  5001               	movf	?___lldiv,w,c
  3230  000F66  022A               	mulwf	LCD_DisplayNumber@v_numericSystem_u8,c
  3231  000F68  50F3               	movf	prodl,w,c
  3232  000F6A  0800               	sublw	0
  3233  000F6C  240E               	addwf	LCD_DisplayNumber@v_number_u32,w,c
  3234  000F6E  6EDF               	movwf	indf2,c
  3235                           
  3236                           ;lcd.c: 566: v_number_u32=v_number_u32/v_numericSystem_u8;
  3237  000F70  C00E  F001         	movff	LCD_DisplayNumber@v_number_u32,___lldiv@dividend
  3238  000F74  C00F  F002         	movff	LCD_DisplayNumber@v_number_u32+1,___lldiv@dividend+1
  3239  000F78  C010  F003         	movff	LCD_DisplayNumber@v_number_u32+2,___lldiv@dividend+2
  3240  000F7C  C011  F004         	movff	LCD_DisplayNumber@v_number_u32+3,___lldiv@dividend+3
  3241  000F80  502A               	movf	LCD_DisplayNumber@v_numericSystem_u8,w,c
  3242  000F82  6E05               	movwf	___lldiv@divisor,c
  3243  000F84  6A06               	clrf	___lldiv@divisor+1,c
  3244  000F86  6A07               	clrf	___lldiv@divisor+2,c
  3245  000F88  6A08               	clrf	___lldiv@divisor+3,c
  3246  000F8A  EC1D  F00B         	call	___lldiv	;wreg free
  3247  000F8E  C001  F00E         	movff	?___lldiv,LCD_DisplayNumber@v_number_u32
  3248  000F92  C002  F00F         	movff	?___lldiv+1,LCD_DisplayNumber@v_number_u32+1
  3249  000F96  C003  F010         	movff	?___lldiv+2,LCD_DisplayNumber@v_number_u32+2
  3250  000F9A  C004  F011         	movff	?___lldiv+3,LCD_DisplayNumber@v_number_u32+3
  3251                           
  3252                           ;lcd.c: 567: }
  3253  000F9E  D011               	goto	l2159
  3254  000FA0                     l2151:
  3255                           
  3256                           ;lcd.c: 568: else if( (v_numOfDigitsToDisplay_u8 == 0xffu) ||
  3257                           ;lcd.c: 569: (v_numOfDigitsToDisplay_u8 > 10u))
  3258  000FA0  2812               	incf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w,c
  3259  000FA2  B4D8               	btfsc	status,2,c
  3260  000FA4  D05A               	goto	l2173
  3261  000FA6  0E0A               	movlw	10
  3262  000FA8  6412               	cpfsgt	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,c
  3263  000FAA  D001               	goto	l2157
  3264  000FAC  D056               	goto	l2173
  3265  000FAE                     l2157:
  3266                           
  3267                           ;lcd.c: 575: else
  3268                           ;lcd.c: 576: {
  3269                           ;lcd.c: 580: a[i]=0;
  3270  000FAE  502B               	movf	LCD_DisplayNumber@i,w,c
  3271  000FB0  0D01               	mullw	1
  3272  000FB2  0E1E               	movlw	low LCD_DisplayNumber@a
  3273  000FB4  24F3               	addwf	prodl,w,c
  3274  000FB6  6ED9               	movwf	fsr2l,c
  3275  000FB8  0E00               	movlw	high LCD_DisplayNumber@a
  3276  000FBA  20F4               	addwfc	prodh,w,c
  3277  000FBC  6EDA               	movwf	fsr2h,c
  3278  000FBE  0E00               	movlw	0
  3279  000FC0  6EDF               	movwf	indf2,c
  3280  000FC2                     l2159:
  3281  000FC2  2A2B               	incf	LCD_DisplayNumber@i,f,c
  3282  000FC4                     l2161:
  3283  000FC4  5012               	movf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w,c
  3284  000FC6  5C2B               	subwf	LCD_DisplayNumber@i,w,c
  3285  000FC8  B0D8               	btfsc	status,0,c
  3286  000FCA  D047               	goto	l2173
  3287  000FCC  D7AE               	goto	l2145
  3288  000FCE                     l2163:
  3289                           
  3290                           ;lcd.c: 585: {
  3291                           ;lcd.c: 587: LCD_DisplayChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  3292  000FCE  0EFF               	movlw	255
  3293  000FD0  6E13               	movwf	??_LCD_DisplayNumber& (0+255),c
  3294  000FD2  0EFF               	movlw	255
  3295  000FD4  6E14               	movwf	(??_LCD_DisplayNumber+1)& (0+255),c
  3296  000FD6  502B               	movf	LCD_DisplayNumber@i,w,c
  3297  000FD8  6E15               	movwf	(??_LCD_DisplayNumber+2)& (0+255),c
  3298  000FDA  6A16               	clrf	(??_LCD_DisplayNumber+3)& (0+255),c
  3299  000FDC  5013               	movf	??_LCD_DisplayNumber,w,c
  3300  000FDE  2615               	addwf	??_LCD_DisplayNumber+2,f,c
  3301  000FE0  5014               	movf	??_LCD_DisplayNumber+1,w,c
  3302  000FE2  2216               	addwfc	??_LCD_DisplayNumber+3,f,c
  3303  000FE4  0E1E               	movlw	low LCD_DisplayNumber@a
  3304  000FE6  2415               	addwf	??_LCD_DisplayNumber+2,w,c
  3305  000FE8  6ED9               	movwf	fsr2l,c
  3306  000FEA  0E00               	movlw	high LCD_DisplayNumber@a
  3307  000FEC  2016               	addwfc	??_LCD_DisplayNumber+3,w,c
  3308  000FEE  6EDA               	movwf	fsr2h,c
  3309  000FF0  0E0A               	movlw	10
  3310  000FF2  60DF               	cpfslt	indf2,c
  3311  000FF4  D015               	goto	l2167
  3312  000FF6  0EFF               	movlw	255
  3313  000FF8  6E13               	movwf	??_LCD_DisplayNumber& (0+255),c
  3314  000FFA  0EFF               	movlw	255
  3315  000FFC  6E14               	movwf	(??_LCD_DisplayNumber+1)& (0+255),c
  3316  000FFE  502B               	movf	LCD_DisplayNumber@i,w,c
  3317  001000  6E15               	movwf	(??_LCD_DisplayNumber+2)& (0+255),c
  3318  001002  6A16               	clrf	(??_LCD_DisplayNumber+3)& (0+255),c
  3319  001004  5013               	movf	??_LCD_DisplayNumber,w,c
  3320  001006  2615               	addwf	??_LCD_DisplayNumber+2,f,c
  3321  001008  5014               	movf	??_LCD_DisplayNumber+1,w,c
  3322  00100A  2216               	addwfc	??_LCD_DisplayNumber+3,f,c
  3323  00100C  0E1E               	movlw	low LCD_DisplayNumber@a
  3324  00100E  2415               	addwf	??_LCD_DisplayNumber+2,w,c
  3325  001010  6ED9               	movwf	fsr2l,c
  3326  001012  0E00               	movlw	high LCD_DisplayNumber@a
  3327  001014  2016               	addwfc	??_LCD_DisplayNumber+3,w,c
  3328  001016  6EDA               	movwf	fsr2h,c
  3329  001018  50DF               	movf	indf2,w,c
  3330  00101A  6E17               	movwf	(??_LCD_DisplayNumber+4)& (0+255),c
  3331  00101C  0E30               	movlw	48
  3332  00101E  D014               	goto	L3
  3333  001020                     l2167:
  3334  001020  0EFF               	movlw	255
  3335  001022  6E13               	movwf	??_LCD_DisplayNumber& (0+255),c
  3336  001024  0EFF               	movlw	255
  3337  001026  6E14               	movwf	(??_LCD_DisplayNumber+1)& (0+255),c
  3338  001028  502B               	movf	LCD_DisplayNumber@i,w,c
  3339  00102A  6E15               	movwf	(??_LCD_DisplayNumber+2)& (0+255),c
  3340  00102C  6A16               	clrf	(??_LCD_DisplayNumber+3)& (0+255),c
  3341  00102E  5013               	movf	??_LCD_DisplayNumber,w,c
  3342  001030  2615               	addwf	??_LCD_DisplayNumber+2,f,c
  3343  001032  5014               	movf	??_LCD_DisplayNumber+1,w,c
  3344  001034  2216               	addwfc	??_LCD_DisplayNumber+3,f,c
  3345  001036  0E1E               	movlw	low LCD_DisplayNumber@a
  3346  001038  2415               	addwf	??_LCD_DisplayNumber+2,w,c
  3347  00103A  6ED9               	movwf	fsr2l,c
  3348  00103C  0E00               	movlw	high LCD_DisplayNumber@a
  3349  00103E  2016               	addwfc	??_LCD_DisplayNumber+3,w,c
  3350  001040  6EDA               	movwf	fsr2h,c
  3351  001042  50DF               	movf	indf2,w,c
  3352  001044  6E17               	movwf	(??_LCD_DisplayNumber+4)& (0+255),c
  3353  001046  0E37               	movlw	55
  3354  001048                     L3:
  3355  001048  2417               	addwf	??_LCD_DisplayNumber+4,w,c
  3356  00104A  6E28               	movwf	_LCD_DisplayNumber$270,c
  3357  00104C  6A29               	clrf	_LCD_DisplayNumber$270+1,c
  3358  00104E  0E00               	movlw	0
  3359  001050  2229               	addwfc	_LCD_DisplayNumber$270+1,f,c
  3360  001052  5028               	movf	_LCD_DisplayNumber$270,w,c
  3361  001054  EC61  F00D         	call	_LCD_DisplayChar
  3362                           
  3363                           ;lcd.c: 588: i--;
  3364  001058  062B               	decf	LCD_DisplayNumber@i,f,c
  3365  00105A                     l2173:
  3366  00105A  502B               	movf	LCD_DisplayNumber@i,w,c
  3367  00105C  B4D8               	btfsc	status,2,c
  3368  00105E  0012               	return	
  3369  001060  D7B6               	goto	l2163
  3370  001062                     __end_of_LCD_DisplayNumber:
  3371                           	opt stack 0
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           postdec1	equ	0xFE5
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           postdec2	equ	0xFDD
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function ___lldiv *****************
  3390 ;; Defined at:
  3391 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.36\sources\common\lldiv.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  dividend        4    0[COMRAM] unsigned long 
  3394 ;;  divisor         4    4[COMRAM] unsigned long 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  quotient        4    8[COMRAM] unsigned long 
  3397 ;;  counter         1   12[COMRAM] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  4    0[COMRAM] unsigned long 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3407 ;;      Params:         8       0       0       0       0       0       0
  3408 ;;      Locals:         5       0       0       0       0       0       0
  3409 ;;      Temps:          0       0       0       0       0       0       0
  3410 ;;      Totals:        13       0       0       0       0       0       0
  3411 ;;Total ram usage:       13 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_UART_SetBaudRate
  3417 ;;		_UART_TxNumber
  3418 ;;		_LCD_DisplayNumber
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text13
  3423  00163A                     __ptext13:
  3424                           	opt stack 0
  3425  00163A                     ___lldiv:
  3426                           	opt stack 28
  3427                           
  3428                           ;incstack = 0
  3429  00163A  0E00               	movlw	0
  3430  00163C  6E09               	movwf	___lldiv@quotient,c
  3431  00163E  0E00               	movlw	0
  3432  001640  6E0A               	movwf	___lldiv@quotient+1,c
  3433  001642  0E00               	movlw	0
  3434  001644  6E0B               	movwf	___lldiv@quotient+2,c
  3435  001646  0E00               	movlw	0
  3436  001648  6E0C               	movwf	___lldiv@quotient+3,c
  3437  00164A  5005               	movf	___lldiv@divisor,w,c
  3438  00164C  1006               	iorwf	___lldiv@divisor+1,w,c
  3439  00164E  1007               	iorwf	___lldiv@divisor+2,w,c
  3440  001650  1008               	iorwf	___lldiv@divisor+3,w,c
  3441  001652  B4D8               	btfsc	status,2,c
  3442  001654  D02A               	goto	l803
  3443  001656  0E01               	movlw	1
  3444  001658  6E0D               	movwf	___lldiv@counter,c
  3445  00165A  D006               	goto	l2029
  3446  00165C                     l2027:
  3447  00165C  90D8               	bcf	status,0,c
  3448  00165E  3605               	rlcf	___lldiv@divisor,f,c
  3449  001660  3606               	rlcf	___lldiv@divisor+1,f,c
  3450  001662  3607               	rlcf	___lldiv@divisor+2,f,c
  3451  001664  3608               	rlcf	___lldiv@divisor+3,f,c
  3452  001666  2A0D               	incf	___lldiv@counter,f,c
  3453  001668                     l2029:
  3454  001668  AE08               	btfss	___lldiv@divisor+3,7,c
  3455  00166A  D7F8               	goto	l2027
  3456  00166C                     l2031:
  3457  00166C  90D8               	bcf	status,0,c
  3458  00166E  3609               	rlcf	___lldiv@quotient,f,c
  3459  001670  360A               	rlcf	___lldiv@quotient+1,f,c
  3460  001672  360B               	rlcf	___lldiv@quotient+2,f,c
  3461  001674  360C               	rlcf	___lldiv@quotient+3,f,c
  3462  001676  5005               	movf	___lldiv@divisor,w,c
  3463  001678  5C01               	subwf	___lldiv@dividend,w,c
  3464  00167A  5006               	movf	___lldiv@divisor+1,w,c
  3465  00167C  5802               	subwfb	___lldiv@dividend+1,w,c
  3466  00167E  5007               	movf	___lldiv@divisor+2,w,c
  3467  001680  5803               	subwfb	___lldiv@dividend+2,w,c
  3468  001682  5008               	movf	___lldiv@divisor+3,w,c
  3469  001684  5804               	subwfb	___lldiv@dividend+3,w,c
  3470  001686  A0D8               	btfss	status,0,c
  3471  001688  D009               	goto	l2039
  3472  00168A  5005               	movf	___lldiv@divisor,w,c
  3473  00168C  5E01               	subwf	___lldiv@dividend,f,c
  3474  00168E  5006               	movf	___lldiv@divisor+1,w,c
  3475  001690  5A02               	subwfb	___lldiv@dividend+1,f,c
  3476  001692  5007               	movf	___lldiv@divisor+2,w,c
  3477  001694  5A03               	subwfb	___lldiv@dividend+2,f,c
  3478  001696  5008               	movf	___lldiv@divisor+3,w,c
  3479  001698  5A04               	subwfb	___lldiv@dividend+3,f,c
  3480  00169A  8009               	bsf	___lldiv@quotient,0,c
  3481  00169C                     l2039:
  3482  00169C  90D8               	bcf	status,0,c
  3483  00169E  3208               	rrcf	___lldiv@divisor+3,f,c
  3484  0016A0  3207               	rrcf	___lldiv@divisor+2,f,c
  3485  0016A2  3206               	rrcf	___lldiv@divisor+1,f,c
  3486  0016A4  3205               	rrcf	___lldiv@divisor,f,c
  3487  0016A6  2E0D               	decfsz	___lldiv@counter,f,c
  3488  0016A8  D7E1               	goto	l2031
  3489  0016AA                     l803:
  3490  0016AA  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3491  0016AE  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3492  0016B2  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3493  0016B6  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3494  0016BA  0012               	return		;funcret
  3495  0016BC                     __end_of___lldiv:
  3496                           	opt stack 0
  3497                           tblptru	equ	0xFF8
  3498                           tblptrh	equ	0xFF7
  3499                           tblptrl	equ	0xFF6
  3500                           tablat	equ	0xFF5
  3501                           prodh	equ	0xFF4
  3502                           prodl	equ	0xFF3
  3503                           postinc0	equ	0xFEE
  3504                           wreg	equ	0xFE8
  3505                           postdec1	equ	0xFE5
  3506                           fsr1l	equ	0xFE1
  3507                           indf2	equ	0xFDF
  3508                           postinc2	equ	0xFDE
  3509                           postdec2	equ	0xFDD
  3510                           fsr2h	equ	0xFDA
  3511                           fsr2l	equ	0xFD9
  3512                           status	equ	0xFD8
  3513                           
  3514 ;; *************** function _LCD_DisplayChar *****************
  3515 ;; Defined at:
  3516 ;;		line 392 in file "../00-libfiles/lcd.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  v_lcdData_u8    1    wreg     unsigned char 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  v_lcdData_u8    1    7[COMRAM] unsigned char 
  3521 ;; Return value:  Size  Location     Type
  3522 ;;                  1    wreg      void 
  3523 ;; Registers used:
  3524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3530 ;;      Params:         0       0       0       0       0       0       0
  3531 ;;      Locals:         1       0       0       0       0       0       0
  3532 ;;      Temps:          0       0       0       0       0       0       0
  3533 ;;      Totals:         1       0       0       0       0       0       0
  3534 ;;Total ram usage:        1 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    5
  3537 ;; This function calls:
  3538 ;;		_LCD_GoToNextLine
  3539 ;;		_lcd_DataWrite
  3540 ;; This function is called by:
  3541 ;;		_LCD_DisplayString
  3542 ;;		_LCD_DisplayNumber
  3543 ;;		_LCD_Printf
  3544 ;;		_LCD_ScrollMessage
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text14
  3549  001AC2                     __ptext14:
  3550                           	opt stack 0
  3551  001AC2                     _LCD_DisplayChar:
  3552                           	opt stack 23
  3553                           
  3554                           ;incstack = 0
  3555                           ;LCD_DisplayChar@v_lcdData_u8 stored from wreg
  3556  001AC2  6E08               	movwf	LCD_DisplayChar@v_lcdData_u8,c
  3557                           
  3558                           ;lcd.c: 394: if((v_LcdTrackCursorPos_U8>=LCDConfig.v_MaxSupportedChars_U8) || (v_lcdData
      +                          _u8=='\n'))
  3559  001AC4  0100               	movlb	0	; () banked
  3560  001AC6  5181               	movf	(_LCDConfig+1)& (0+255),w,b
  3561  001AC8  5C7B               	subwf	_v_LcdTrackCursorPos_U8,w,c
  3562  001ACA  B0D8               	btfsc	status,0,c
  3563  001ACC  D003               	goto	l2013
  3564                           
  3565                           ; BSR set to: 0
  3566  001ACE  0E0A               	movlw	10
  3567  001AD0  1808               	xorwf	LCD_DisplayChar@v_lcdData_u8,w,c
  3568  001AD2  B4D8               	btfsc	status,2,c
  3569  001AD4                     l2013:
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;lcd.c: 395: {
  3573                           ;lcd.c: 398: LCD_GoToNextLine();
  3574  001AD4  EC35  F00D         	call	_LCD_GoToNextLine	;wreg free
  3575                           
  3576                           ;lcd.c: 399: }
  3577                           ;lcd.c: 400: if(v_lcdData_u8!='\n')
  3578  001AD8  0E0A               	movlw	10
  3579  001ADA  1808               	xorwf	LCD_DisplayChar@v_lcdData_u8,w,c
  3580  001ADC  B4D8               	btfsc	status,2,c
  3581  001ADE  0012               	return	
  3582                           
  3583                           ;lcd.c: 401: {
  3584                           ;lcd.c: 403: lcd_DataWrite(v_lcdData_u8);
  3585  001AE0  5008               	movf	LCD_DisplayChar@v_lcdData_u8,w,c
  3586  001AE2  EC01  F00D         	call	_lcd_DataWrite
  3587                           
  3588                           ;lcd.c: 404: v_LcdTrackCursorPos_U8++;
  3589  001AE6  2A7B               	incf	_v_LcdTrackCursorPos_U8,f,c
  3590  001AE8  0012               	return	
  3591  001AEA                     __end_of_LCD_DisplayChar:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           prodh	equ	0xFF4
  3598                           prodl	equ	0xFF3
  3599                           postinc0	equ	0xFEE
  3600                           wreg	equ	0xFE8
  3601                           postdec1	equ	0xFE5
  3602                           fsr1l	equ	0xFE1
  3603                           indf2	equ	0xFDF
  3604                           postinc2	equ	0xFDE
  3605                           postdec2	equ	0xFDD
  3606                           fsr2h	equ	0xFDA
  3607                           fsr2l	equ	0xFD9
  3608                           status	equ	0xFD8
  3609                           
  3610 ;; *************** function _lcd_DataWrite *****************
  3611 ;; Defined at:
  3612 ;;		line 826 in file "../00-libfiles/lcd.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  dataByte        1    wreg     unsigned char 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  dataByte        1    6[COMRAM] unsigned char 
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, status,2, status,0, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3626 ;;      Params:         0       0       0       0       0       0       0
  3627 ;;      Locals:         1       0       0       0       0       0       0
  3628 ;;      Temps:          0       0       0       0       0       0       0
  3629 ;;      Totals:         1       0       0       0       0       0       0
  3630 ;;Total ram usage:        1 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    3
  3633 ;; This function calls:
  3634 ;;		_lcd_BusyCheck
  3635 ;;		_lcd_SendDataSignals
  3636 ;;		_lcd_SendHigherNibble
  3637 ;;		_lcd_SendLowerNibble
  3638 ;; This function is called by:
  3639 ;;		_LCD_DisplayChar
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text15
  3644  001A02                     __ptext15:
  3645                           	opt stack 0
  3646  001A02                     _lcd_DataWrite:
  3647                           	opt stack 24
  3648                           
  3649                           ;incstack = 0
  3650                           ;lcd_DataWrite@dataByte stored from wreg
  3651  001A02  6E07               	movwf	lcd_DataWrite@dataByte,c
  3652                           
  3653                           ;lcd.c: 828: lcd_BusyCheck();
  3654  001A04  EC5C  F00A         	call	_lcd_BusyCheck	;wreg free
  3655                           
  3656                           ;lcd.c: 829: if(LCDConfig.v_LcdMode_U8 == 8u)
  3657  001A08  0E08               	movlw	8
  3658  001A0A  0100               	movlb	0	; () banked
  3659  001A0C  1982               	xorwf	(_LCDConfig+2)& (0+255),w,b
  3660  001A0E  A4D8               	btfss	status,2,c
  3661  001A10  D004               	goto	l1989
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;lcd.c: 830: {
  3665                           ;lcd.c: 831: lcd_SendLowerNibble(dataByte);
  3666  001A12  5007               	movf	lcd_DataWrite@dataByte,w,c
  3667  001A14  EC29  F00C         	call	_lcd_SendLowerNibble
  3668                           
  3669                           ;lcd.c: 832: }
  3670  001A18  D008               	goto	l1993
  3671  001A1A                     l1989:
  3672                           
  3673                           ;lcd.c: 833: else
  3674                           ;lcd.c: 834: {
  3675                           ;lcd.c: 835: lcd_SendHigherNibble(dataByte);
  3676  001A1A  5007               	movf	lcd_DataWrite@dataByte,w,c
  3677  001A1C  EC53  F00C         	call	_lcd_SendHigherNibble
  3678                           
  3679                           ;lcd.c: 836: lcd_SendDataSignals();
  3680  001A20  ECA6  F00C         	call	_lcd_SendDataSignals	;wreg free
  3681                           
  3682                           ;lcd.c: 837: dataByte = dataByte << 4;
  3683  001A24  3807               	swapf	lcd_DataWrite@dataByte,w,c
  3684  001A26  0BF0               	andlw	240
  3685  001A28  6E07               	movwf	lcd_DataWrite@dataByte,c
  3686  001A2A                     l1993:
  3687                           
  3688                           ;lcd.c: 838: }
  3689                           ;lcd.c: 840: lcd_SendHigherNibble(dataByte);
  3690  001A2A  5007               	movf	lcd_DataWrite@dataByte,w,c
  3691  001A2C  EC53  F00C         	call	_lcd_SendHigherNibble
  3692                           
  3693                           ;lcd.c: 841: lcd_SendDataSignals();
  3694  001A30  ECA6  F00C         	call	_lcd_SendDataSignals	;wreg free
  3695  001A34  0012               	return		;funcret
  3696  001A36                     __end_of_lcd_DataWrite:
  3697                           	opt stack 0
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           postinc0	equ	0xFEE
  3705                           wreg	equ	0xFE8
  3706                           postdec1	equ	0xFE5
  3707                           fsr1l	equ	0xFE1
  3708                           indf2	equ	0xFDF
  3709                           postinc2	equ	0xFDE
  3710                           postdec2	equ	0xFDD
  3711                           fsr2h	equ	0xFDA
  3712                           fsr2l	equ	0xFD9
  3713                           status	equ	0xFD8
  3714                           
  3715 ;; *************** function _lcd_SendDataSignals *****************
  3716 ;; Defined at:
  3717 ;;		line 1002 in file "../00-libfiles/lcd.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;		None
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;		None
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  1    wreg      void 
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, status,0, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3731 ;;      Params:         0       0       0       0       0       0       0
  3732 ;;      Locals:         0       0       0       0       0       0       0
  3733 ;;      Temps:          0       0       0       0       0       0       0
  3734 ;;      Totals:         0       0       0       0       0       0       0
  3735 ;;Total ram usage:        0 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    1
  3738 ;; This function calls:
  3739 ;;		_DELAY_us
  3740 ;;		_GPIO_PinWrite
  3741 ;; This function is called by:
  3742 ;;		_lcd_DataWrite
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text16
  3747  00194C                     __ptext16:
  3748                           	opt stack 0
  3749  00194C                     _lcd_SendDataSignals:
  3750                           	opt stack 25
  3751                           
  3752                           ;lcd.c: 1004: GPIO_PinWrite(LCDConfig.RS,1);
  3753                           
  3754                           ;incstack = 0
  3755  00194C  0E01               	movlw	1
  3756  00194E  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3757  001950  0100               	movlb	0	; () banked
  3758  001952  5183               	movf	(_LCDConfig+3)& (0+255),w,b
  3759  001954  EC31  F008         	call	_GPIO_PinWrite
  3760                           
  3761                           ;lcd.c: 1005: GPIO_PinWrite(LCDConfig.RW,0);
  3762  001958  0E00               	movlw	0
  3763  00195A  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3764  00195C  0100               	movlb	0	; () banked
  3765  00195E  5184               	movf	(_LCDConfig+4)& (0+255),w,b
  3766  001960  EC31  F008         	call	_GPIO_PinWrite
  3767                           
  3768                           ;lcd.c: 1006: GPIO_PinWrite(LCDConfig.EN,1);
  3769  001964  0E01               	movlw	1
  3770  001966  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3771  001968  0100               	movlb	0	; () banked
  3772  00196A  5185               	movf	(_LCDConfig+5)& (0+255),w,b
  3773  00196C  EC31  F008         	call	_GPIO_PinWrite
  3774                           
  3775                           ;lcd.c: 1007: DELAY_us(10);
  3776  001970  0E00               	movlw	0
  3777  001972  6E02               	movwf	DELAY_us@us_count+1,c
  3778  001974  0E0A               	movlw	10
  3779  001976  6E01               	movwf	DELAY_us@us_count,c
  3780  001978  ECA7  F00D         	call	_DELAY_us	;wreg free
  3781                           
  3782                           ;lcd.c: 1008: GPIO_PinWrite(LCDConfig.EN,0);
  3783  00197C  0E00               	movlw	0
  3784  00197E  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  3785  001980  0100               	movlb	0	; () banked
  3786  001982  5185               	movf	(_LCDConfig+5)& (0+255),w,b
  3787  001984  EC31  F008         	call	_GPIO_PinWrite
  3788  001988  0012               	return		;funcret
  3789  00198A                     __end_of_lcd_SendDataSignals:
  3790                           	opt stack 0
  3791                           tblptru	equ	0xFF8
  3792                           tblptrh	equ	0xFF7
  3793                           tblptrl	equ	0xFF6
  3794                           tablat	equ	0xFF5
  3795                           prodh	equ	0xFF4
  3796                           prodl	equ	0xFF3
  3797                           postinc0	equ	0xFEE
  3798                           wreg	equ	0xFE8
  3799                           postdec1	equ	0xFE5
  3800                           fsr1l	equ	0xFE1
  3801                           indf2	equ	0xFDF
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           fsr2h	equ	0xFDA
  3805                           fsr2l	equ	0xFD9
  3806                           status	equ	0xFD8
  3807                           
  3808 ;; *************** function _LCD_GoToNextLine *****************
  3809 ;; Defined at:
  3810 ;;		line 292 in file "../00-libfiles/lcd.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;		None
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3824 ;;      Params:         0       0       0       0       0       0       0
  3825 ;;      Locals:         0       0       0       0       0       0       0
  3826 ;;      Temps:          0       0       0       0       0       0       0
  3827 ;;      Totals:         0       0       0       0       0       0       0
  3828 ;;Total ram usage:        0 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    4
  3831 ;; This function calls:
  3832 ;;		_LCD_CmdWrite
  3833 ;; This function is called by:
  3834 ;;		_LCD_DisplayChar
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text17
  3839  001A6A                     __ptext17:
  3840                           	opt stack 0
  3841  001A6A                     _LCD_GoToNextLine:
  3842                           	opt stack 23
  3843                           
  3844                           ;lcd.c: 296: v_LcdTrackLineNum_U8++;
  3845                           
  3846                           ;incstack = 0
  3847  001A6A  2A7C               	incf	_v_LcdTrackLineNum_U8,f,c
  3848                           
  3849                           ;lcd.c: 297: v_LcdTrackCursorPos_U8 = 0x00;
  3850  001A6C  0E00               	movlw	0
  3851  001A6E  6E7B               	movwf	_v_LcdTrackCursorPos_U8,c
  3852                           
  3853                           ;lcd.c: 298: if(v_LcdTrackLineNum_U8 >= LCDConfig.v_MaxSupportedLines_U8)
  3854  001A70  0100               	movlb	0	; () banked
  3855  001A72  5180               	movf	_LCDConfig& (0+255),w,b
  3856  001A74  5C7C               	subwf	_v_LcdTrackLineNum_U8,w,c
  3857  001A76  A0D8               	btfss	status,0,c
  3858  001A78  D002               	goto	l1981
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;lcd.c: 299: v_LcdTrackLineNum_U8 = 0x00;
  3862  001A7A  0E00               	movlw	0
  3863  001A7C  6E7C               	movwf	_v_LcdTrackLineNum_U8,c
  3864  001A7E                     l1981:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;lcd.c: 300: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_LcdTrackLineNum_U8]);
  3868  001A7E  507C               	movf	_v_LcdTrackLineNum_U8,w,c
  3869  001A80  0D01               	mullw	1
  3870  001A82  0E8E               	movlw	low _ARR_LcdLineNumAddress_U8
  3871  001A84  24F3               	addwf	prodl,w,c
  3872  001A86  6ED9               	movwf	fsr2l,c
  3873  001A88  0E00               	movlw	high _ARR_LcdLineNumAddress_U8
  3874  001A8A  20F4               	addwfc	prodh,w,c
  3875  001A8C  6EDA               	movwf	fsr2h,c
  3876  001A8E  50DF               	movf	indf2,w,c
  3877  001A90  EC1B  F00D         	call	_LCD_CmdWrite
  3878  001A94  0012               	return		;funcret
  3879  001A96                     __end_of_LCD_GoToNextLine:
  3880                           	opt stack 0
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           prodh	equ	0xFF4
  3886                           prodl	equ	0xFF3
  3887                           postinc0	equ	0xFEE
  3888                           wreg	equ	0xFE8
  3889                           postdec1	equ	0xFE5
  3890                           fsr1l	equ	0xFE1
  3891                           indf2	equ	0xFDF
  3892                           postinc2	equ	0xFDE
  3893                           postdec2	equ	0xFDD
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _LCD_Init *****************
  3899 ;; Defined at:
  3900 ;;		line 198 in file "../00-libfiles/lcd.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  v_lcdNoOfLin    1    wreg     unsigned char 
  3903 ;;  v_MaxCharsPe    1    8[COMRAM] unsigned char 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  v_lcdNoOfLin    1    9[COMRAM] unsigned char 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3915 ;;      Params:         1       0       0       0       0       0       0
  3916 ;;      Locals:         1       0       0       0       0       0       0
  3917 ;;      Temps:          0       0       0       0       0       0       0
  3918 ;;      Totals:         2       0       0       0       0       0       0
  3919 ;;Total ram usage:        2 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    6
  3922 ;; This function calls:
  3923 ;;		_DELAY_ms
  3924 ;;		_LCD_Clear
  3925 ;;		_LCD_CmdWrite
  3926 ;;		_lcd_Reset
  3927 ;; This function is called by:
  3928 ;;		_main
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text18
  3933  001796                     __ptext18:
  3934                           	opt stack 0
  3935  001796                     _LCD_Init:
  3936                           	opt stack 24
  3937                           
  3938                           ;incstack = 0
  3939                           ;LCD_Init@v_lcdNoOfLines_u8 stored from wreg
  3940  001796  6E0A               	movwf	LCD_Init@v_lcdNoOfLines_u8,c
  3941                           
  3942                           ;lcd.c: 202: LCDConfig.v_MaxSupportedChars_U8 = v_MaxCharsPerLine_u8;
  3943  001798  C009  F081         	movff	LCD_Init@v_MaxCharsPerLine_u8,_LCDConfig+1
  3944                           
  3945                           ;lcd.c: 203: LCDConfig.v_MaxSupportedLines_U8 = v_lcdNoOfLines_u8;
  3946  00179C  C00A  F080         	movff	LCD_Init@v_lcdNoOfLines_u8,_LCDConfig
  3947                           
  3948                           ;lcd.c: 204: if(v_lcdNoOfLines_u8 > 0x02)
  3949  0017A0  0E02               	movlw	2
  3950  0017A2  640A               	cpfsgt	LCD_Init@v_lcdNoOfLines_u8,c
  3951  0017A4  D00A               	goto	l2389
  3952                           
  3953                           ;lcd.c: 205: {
  3954                           ;lcd.c: 206: ARR_LcdLineNumAddress_U8[0x02] = 0x90 + (v_MaxCharsPerLine_u8 & 0x0fu);
  3955  0017A6  5009               	movf	LCD_Init@v_MaxCharsPerLine_u8,w,c
  3956  0017A8  0B0F               	andlw	15
  3957  0017AA  0F90               	addlw	144
  3958  0017AC  0100               	movlb	0	; () banked
  3959  0017AE  6F90               	movwf	(_ARR_LcdLineNumAddress_U8+2)& (0+255),b
  3960                           
  3961                           ;lcd.c: 207: ARR_LcdLineNumAddress_U8[0x03] = 0xd0 + (v_MaxCharsPerLine_u8 & 0x0fu);
  3962  0017B0  5009               	movf	LCD_Init@v_MaxCharsPerLine_u8,w,c
  3963  0017B2  0B0F               	andlw	15
  3964  0017B4  0FD0               	addlw	208
  3965  0017B6  0100               	movlb	0	; () banked
  3966  0017B8  6F91               	movwf	(_ARR_LcdLineNumAddress_U8+3)& (0+255),b
  3967  0017BA                     l2389:
  3968                           
  3969                           ;lcd.c: 208: }
  3970                           ;lcd.c: 210: DELAY_ms(100);
  3971  0017BA  0E00               	movlw	0
  3972  0017BC  6E04               	movwf	DELAY_ms@ms_count+1,c
  3973  0017BE  0E64               	movlw	100
  3974  0017C0  6E03               	movwf	DELAY_ms@ms_count,c
  3975  0017C2  EC98  F00D         	call	_DELAY_ms	;wreg free
  3976                           
  3977                           ;lcd.c: 212: if(LCDConfig.v_LcdMode_U8 == 8u)
  3978  0017C6  0E08               	movlw	8
  3979  0017C8  0100               	movlb	0	; () banked
  3980  0017CA  1982               	xorwf	(_LCDConfig+2)& (0+255),w,b
  3981  0017CC  A4D8               	btfss	status,2,c
  3982  0017CE  D004               	goto	l2395
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;lcd.c: 213: {
  3986                           ;lcd.c: 214: LCD_CmdWrite(0x38u);
  3987  0017D0  0E38               	movlw	56
  3988  0017D2  EC1B  F00D         	call	_LCD_CmdWrite
  3989                           
  3990                           ;lcd.c: 215: }
  3991  0017D6  D00A               	goto	l176
  3992  0017D8                     l2395:
  3993                           
  3994                           ;lcd.c: 216: else if(LCDConfig.v_LcdMode_U8 == 4u)
  3995  0017D8  0E04               	movlw	4
  3996  0017DA  0100               	movlb	0	; () banked
  3997  0017DC  1982               	xorwf	(_LCDConfig+2)& (0+255),w,b
  3998  0017DE  A4D8               	btfss	status,2,c
  3999  0017E0  D005               	goto	l176
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;lcd.c: 217: {
  4003                           ;lcd.c: 218: lcd_Reset();
  4004  0017E2  ECFC  F00B         	call	_lcd_Reset	;wreg free
  4005                           
  4006                           ;lcd.c: 219: LCD_CmdWrite(0x28u);
  4007  0017E6  0E28               	movlw	40
  4008  0017E8  EC1B  F00D         	call	_LCD_CmdWrite
  4009  0017EC                     l176:
  4010                           
  4011                           ;lcd.c: 220: }
  4012                           ;lcd.c: 222: LCD_CmdWrite(0x0Eu);
  4013  0017EC  0E0E               	movlw	14
  4014  0017EE  EC1B  F00D         	call	_LCD_CmdWrite
  4015                           
  4016                           ;lcd.c: 223: LCD_Clear();
  4017  0017F2  ECB7  F00D         	call	_LCD_Clear	;wreg free
  4018  0017F6  0012               	return		;funcret
  4019  0017F8                     __end_of_LCD_Init:
  4020                           	opt stack 0
  4021                           tblptru	equ	0xFF8
  4022                           tblptrh	equ	0xFF7
  4023                           tblptrl	equ	0xFF6
  4024                           tablat	equ	0xFF5
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           postdec1	equ	0xFE5
  4030                           fsr1l	equ	0xFE1
  4031                           indf2	equ	0xFDF
  4032                           postinc2	equ	0xFDE
  4033                           postdec2	equ	0xFDD
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _lcd_Reset *****************
  4039 ;; Defined at:
  4040 ;;		line 913 in file "../00-libfiles/lcd.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;		None
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;		None
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg, status,2, status,0, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4054 ;;      Params:         0       0       0       0       0       0       0
  4055 ;;      Locals:         0       0       0       0       0       0       0
  4056 ;;      Temps:          0       0       0       0       0       0       0
  4057 ;;      Totals:         0       0       0       0       0       0       0
  4058 ;;Total ram usage:        0 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    2
  4061 ;; This function calls:
  4062 ;;		_DELAY_ms
  4063 ;;		_DELAY_us
  4064 ;;		_lcd_SendCmdSignals
  4065 ;;		_lcd_SendHigherNibble
  4066 ;; This function is called by:
  4067 ;;		_LCD_Init
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           	psect	text19
  4072  0017F8                     __ptext19:
  4073                           	opt stack 0
  4074  0017F8                     _lcd_Reset:
  4075                           	opt stack 27
  4076                           
  4077                           ;lcd.c: 916: lcd_SendHigherNibble(0x30);
  4078                           
  4079                           ;incstack = 0
  4080  0017F8  0E30               	movlw	48
  4081  0017FA  EC53  F00C         	call	_lcd_SendHigherNibble
  4082                           
  4083                           ;lcd.c: 917: lcd_SendCmdSignals();
  4084  0017FE  ECC5  F00C         	call	_lcd_SendCmdSignals	;wreg free
  4085                           
  4086                           ;lcd.c: 918: DELAY_ms(100);
  4087  001802  0E00               	movlw	0
  4088  001804  6E04               	movwf	DELAY_ms@ms_count+1,c
  4089  001806  0E64               	movlw	100
  4090  001808  6E03               	movwf	DELAY_ms@ms_count,c
  4091  00180A  EC98  F00D         	call	_DELAY_ms	;wreg free
  4092                           
  4093                           ;lcd.c: 919: lcd_SendHigherNibble(0x30);
  4094  00180E  0E30               	movlw	48
  4095  001810  EC53  F00C         	call	_lcd_SendHigherNibble
  4096                           
  4097                           ;lcd.c: 920: lcd_SendCmdSignals();
  4098  001814  ECC5  F00C         	call	_lcd_SendCmdSignals	;wreg free
  4099                           
  4100                           ;lcd.c: 921: DELAY_us(200);
  4101  001818  0E00               	movlw	0
  4102  00181A  6E02               	movwf	DELAY_us@us_count+1,c
  4103  00181C  0EC8               	movlw	200
  4104  00181E  6E01               	movwf	DELAY_us@us_count,c
  4105  001820  ECA7  F00D         	call	_DELAY_us	;wreg free
  4106                           
  4107                           ;lcd.c: 922: lcd_SendHigherNibble(0x30);
  4108  001824  0E30               	movlw	48
  4109  001826  EC53  F00C         	call	_lcd_SendHigherNibble
  4110                           
  4111                           ;lcd.c: 923: lcd_SendCmdSignals();
  4112  00182A  ECC5  F00C         	call	_lcd_SendCmdSignals	;wreg free
  4113                           
  4114                           ;lcd.c: 924: DELAY_us(200);
  4115  00182E  0E00               	movlw	0
  4116  001830  6E02               	movwf	DELAY_us@us_count+1,c
  4117  001832  0EC8               	movlw	200
  4118  001834  6E01               	movwf	DELAY_us@us_count,c
  4119  001836  ECA7  F00D         	call	_DELAY_us	;wreg free
  4120                           
  4121                           ;lcd.c: 925: lcd_SendHigherNibble(0x20);
  4122  00183A  0E20               	movlw	32
  4123  00183C  EC53  F00C         	call	_lcd_SendHigherNibble
  4124                           
  4125                           ;lcd.c: 926: lcd_SendCmdSignals();
  4126  001840  ECC5  F00C         	call	_lcd_SendCmdSignals	;wreg free
  4127                           
  4128                           ;lcd.c: 927: DELAY_us(200);
  4129  001844  0E00               	movlw	0
  4130  001846  6E02               	movwf	DELAY_us@us_count+1,c
  4131  001848  0EC8               	movlw	200
  4132  00184A  6E01               	movwf	DELAY_us@us_count,c
  4133  00184C  ECA7  F00D         	call	_DELAY_us	;wreg free
  4134  001850  0012               	return		;funcret
  4135  001852                     __end_of_lcd_Reset:
  4136                           	opt stack 0
  4137                           tblptru	equ	0xFF8
  4138                           tblptrh	equ	0xFF7
  4139                           tblptrl	equ	0xFF6
  4140                           tablat	equ	0xFF5
  4141                           prodh	equ	0xFF4
  4142                           prodl	equ	0xFF3
  4143                           postinc0	equ	0xFEE
  4144                           wreg	equ	0xFE8
  4145                           postdec1	equ	0xFE5
  4146                           fsr1l	equ	0xFE1
  4147                           indf2	equ	0xFDF
  4148                           postinc2	equ	0xFDE
  4149                           postdec2	equ	0xFDD
  4150                           fsr2h	equ	0xFDA
  4151                           fsr2l	equ	0xFD9
  4152                           status	equ	0xFD8
  4153                           
  4154 ;; *************** function _LCD_Clear *****************
  4155 ;; Defined at:
  4156 ;;		line 237 in file "../00-libfiles/lcd.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;		None
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;		None
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4170 ;;      Params:         0       0       0       0       0       0       0
  4171 ;;      Locals:         0       0       0       0       0       0       0
  4172 ;;      Temps:          0       0       0       0       0       0       0
  4173 ;;      Totals:         0       0       0       0       0       0       0
  4174 ;;Total ram usage:        0 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:    5
  4177 ;; This function calls:
  4178 ;;		_LCD_CmdWrite
  4179 ;;		_LCD_GoToLine
  4180 ;; This function is called by:
  4181 ;;		_LCD_Init
  4182 ;;		_main
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text20
  4187  001B6E                     __ptext20:
  4188                           	opt stack 0
  4189  001B6E                     _LCD_Clear:
  4190                           	opt stack 24
  4191                           
  4192                           ;lcd.c: 239: LCD_CmdWrite(0x01u);
  4193                           
  4194                           ;incstack = 0
  4195  001B6E  0E01               	movlw	1
  4196  001B70  EC1B  F00D         	call	_LCD_CmdWrite
  4197                           
  4198                           ;lcd.c: 240: LCD_GoToLine(0x00);
  4199  001B74  0E00               	movlw	0
  4200  001B76  EC4B  F00D         	call	_LCD_GoToLine
  4201  001B7A  0012               	return		;funcret
  4202  001B7C                     __end_of_LCD_Clear:
  4203                           	opt stack 0
  4204                           tblptru	equ	0xFF8
  4205                           tblptrh	equ	0xFF7
  4206                           tblptrl	equ	0xFF6
  4207                           tablat	equ	0xFF5
  4208                           prodh	equ	0xFF4
  4209                           prodl	equ	0xFF3
  4210                           postinc0	equ	0xFEE
  4211                           wreg	equ	0xFE8
  4212                           postdec1	equ	0xFE5
  4213                           fsr1l	equ	0xFE1
  4214                           indf2	equ	0xFDF
  4215                           postinc2	equ	0xFDE
  4216                           postdec2	equ	0xFDD
  4217                           fsr2h	equ	0xFDA
  4218                           fsr2l	equ	0xFD9
  4219                           status	equ	0xFD8
  4220                           
  4221 ;; *************** function _LCD_GoToLine *****************
  4222 ;; Defined at:
  4223 ;;		line 265 in file "../00-libfiles/lcd.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  v_lineNumber    1    wreg     unsigned char 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  v_lineNumber    1    7[COMRAM] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4237 ;;      Params:         0       0       0       0       0       0       0
  4238 ;;      Locals:         1       0       0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0
  4240 ;;      Totals:         1       0       0       0       0       0       0
  4241 ;;Total ram usage:        1 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    4
  4244 ;; This function calls:
  4245 ;;		_LCD_CmdWrite
  4246 ;; This function is called by:
  4247 ;;		_LCD_Clear
  4248 ;;		_LCD_ScrollMessage
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text21
  4253  001A96                     __ptext21:
  4254                           	opt stack 0
  4255  001A96                     _LCD_GoToLine:
  4256                           	opt stack 24
  4257                           
  4258                           ;incstack = 0
  4259                           ;LCD_GoToLine@v_lineNumber_u8 stored from wreg
  4260  001A96  6E08               	movwf	LCD_GoToLine@v_lineNumber_u8,c
  4261                           
  4262                           ;lcd.c: 267: if(v_lineNumber_u8 < LCDConfig.v_MaxSupportedLines_U8)
  4263  001A98  0100               	movlb	0	; () banked
  4264  001A9A  5180               	movf	_LCDConfig& (0+255),w,b
  4265  001A9C  5C08               	subwf	LCD_GoToLine@v_lineNumber_u8,w,c
  4266  001A9E  B0D8               	btfsc	status,0,c
  4267  001AA0  0012               	return	
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;lcd.c: 268: {
  4271                           ;lcd.c: 271: v_LcdTrackCursorPos_U8 = 0x00;
  4272  001AA2  0E00               	movlw	0
  4273  001AA4  6E7B               	movwf	_v_LcdTrackCursorPos_U8,c
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;lcd.c: 272: v_LcdTrackLineNum_U8 = v_lineNumber_u8;
  4277  001AA6  C008  F07C         	movff	LCD_GoToLine@v_lineNumber_u8,_v_LcdTrackLineNum_U8
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;lcd.c: 273: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_lineNumber_u8]);
  4281  001AAA  5008               	movf	LCD_GoToLine@v_lineNumber_u8,w,c
  4282  001AAC  0D01               	mullw	1
  4283  001AAE  0E8E               	movlw	low _ARR_LcdLineNumAddress_U8
  4284  001AB0  24F3               	addwf	prodl,w,c
  4285  001AB2  6ED9               	movwf	fsr2l,c
  4286  001AB4  0E00               	movlw	high _ARR_LcdLineNumAddress_U8
  4287  001AB6  20F4               	addwfc	prodh,w,c
  4288  001AB8  6EDA               	movwf	fsr2h,c
  4289  001ABA  50DF               	movf	indf2,w,c
  4290  001ABC  EC1B  F00D         	call	_LCD_CmdWrite
  4291  001AC0  0012               	return	
  4292  001AC2                     __end_of_LCD_GoToLine:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1l	equ	0xFE1
  4304                           indf2	equ	0xFDF
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _LCD_CmdWrite *****************
  4312 ;; Defined at:
  4313 ;;		line 358 in file "../00-libfiles/lcd.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  v_lcdCmd_u8     1    wreg     unsigned char 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  v_lcdCmd_u8     1    6[COMRAM] unsigned char 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, status,0, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4327 ;;      Params:         0       0       0       0       0       0       0
  4328 ;;      Locals:         1       0       0       0       0       0       0
  4329 ;;      Temps:          0       0       0       0       0       0       0
  4330 ;;      Totals:         1       0       0       0       0       0       0
  4331 ;;Total ram usage:        1 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    3
  4334 ;; This function calls:
  4335 ;;		_lcd_BusyCheck
  4336 ;;		_lcd_SendCmdSignals
  4337 ;;		_lcd_SendHigherNibble
  4338 ;;		_lcd_SendLowerNibble
  4339 ;; This function is called by:
  4340 ;;		_LCD_Init
  4341 ;;		_LCD_Clear
  4342 ;;		_LCD_GoToLine
  4343 ;;		_LCD_GoToNextLine
  4344 ;;		_LCD_ScrollMessage
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           	psect	text22
  4349  001A36                     __ptext22:
  4350                           	opt stack 0
  4351  001A36                     _LCD_CmdWrite:
  4352                           	opt stack 23
  4353                           
  4354                           ;incstack = 0
  4355                           ;LCD_CmdWrite@v_lcdCmd_u8 stored from wreg
  4356  001A36  6E07               	movwf	LCD_CmdWrite@v_lcdCmd_u8,c
  4357                           
  4358                           ;lcd.c: 360: lcd_BusyCheck();
  4359  001A38  EC5C  F00A         	call	_lcd_BusyCheck	;wreg free
  4360                           
  4361                           ;lcd.c: 361: if(LCDConfig.v_LcdMode_U8 == 8u)
  4362  001A3C  0E08               	movlw	8
  4363  001A3E  0100               	movlb	0	; () banked
  4364  001A40  1982               	xorwf	(_LCDConfig+2)& (0+255),w,b
  4365  001A42  A4D8               	btfss	status,2,c
  4366  001A44  D004               	goto	l1963
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;lcd.c: 362: {
  4370                           ;lcd.c: 363: lcd_SendLowerNibble(v_lcdCmd_u8);
  4371  001A46  5007               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  4372  001A48  EC29  F00C         	call	_lcd_SendLowerNibble
  4373                           
  4374                           ;lcd.c: 364: }
  4375  001A4C  D008               	goto	l1967
  4376  001A4E                     l1963:
  4377                           
  4378                           ;lcd.c: 365: else
  4379                           ;lcd.c: 366: {
  4380                           ;lcd.c: 367: lcd_SendHigherNibble(v_lcdCmd_u8);
  4381  001A4E  5007               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  4382  001A50  EC53  F00C         	call	_lcd_SendHigherNibble
  4383                           
  4384                           ;lcd.c: 368: lcd_SendCmdSignals();
  4385  001A54  ECC5  F00C         	call	_lcd_SendCmdSignals	;wreg free
  4386                           
  4387                           ;lcd.c: 369: v_lcdCmd_u8 = v_lcdCmd_u8 << 4;
  4388  001A58  3807               	swapf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  4389  001A5A  0BF0               	andlw	240
  4390  001A5C  6E07               	movwf	LCD_CmdWrite@v_lcdCmd_u8,c
  4391  001A5E                     l1967:
  4392                           
  4393                           ;lcd.c: 370: }
  4394                           ;lcd.c: 372: lcd_SendHigherNibble(v_lcdCmd_u8);
  4395  001A5E  5007               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  4396  001A60  EC53  F00C         	call	_lcd_SendHigherNibble
  4397                           
  4398                           ;lcd.c: 373: lcd_SendCmdSignals();
  4399  001A64  ECC5  F00C         	call	_lcd_SendCmdSignals	;wreg free
  4400  001A68  0012               	return		;funcret
  4401  001A6A                     __end_of_LCD_CmdWrite:
  4402                           	opt stack 0
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           prodh	equ	0xFF4
  4408                           prodl	equ	0xFF3
  4409                           postinc0	equ	0xFEE
  4410                           wreg	equ	0xFE8
  4411                           postdec1	equ	0xFE5
  4412                           fsr1l	equ	0xFE1
  4413                           indf2	equ	0xFDF
  4414                           postinc2	equ	0xFDE
  4415                           postdec2	equ	0xFDD
  4416                           fsr2h	equ	0xFDA
  4417                           fsr2l	equ	0xFD9
  4418                           status	equ	0xFD8
  4419                           
  4420 ;; *************** function _lcd_SendLowerNibble *****************
  4421 ;; Defined at:
  4422 ;;		line 962 in file "../00-libfiles/lcd.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  dataByte        1    wreg     unsigned char 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  dataByte        1    5[COMRAM] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4436 ;;      Params:         0       0       0       0       0       0       0
  4437 ;;      Locals:         1       0       0       0       0       0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0
  4439 ;;      Totals:         1       0       0       0       0       0       0
  4440 ;;Total ram usage:        1 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    1
  4443 ;; This function calls:
  4444 ;;		_GPIO_PinWrite
  4445 ;; This function is called by:
  4446 ;;		_LCD_CmdWrite
  4447 ;;		_lcd_DataWrite
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text23
  4452  001852                     __ptext23:
  4453                           	opt stack 0
  4454  001852                     _lcd_SendLowerNibble:
  4455                           	opt stack 25
  4456                           
  4457                           ;incstack = 0
  4458                           ;lcd_SendLowerNibble@dataByte stored from wreg
  4459  001852  6E06               	movwf	lcd_SendLowerNibble@dataByte,c
  4460                           
  4461                           ;lcd.c: 964: GPIO_PinWrite(LCDConfig.D0,(((dataByte)&(((uint8_t)1<<(0))))!=0u));
  4462  001854  A006               	btfss	lcd_SendLowerNibble@dataByte,0,c
  4463  001856  D002               	goto	u1980
  4464  001858  0E01               	movlw	1
  4465  00185A  D001               	goto	u1990
  4466  00185C                     u1980:
  4467  00185C  0E00               	movlw	0
  4468  00185E                     u1990:
  4469  00185E  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4470  001860  0100               	movlb	0	; () banked
  4471  001862  5186               	movf	(_LCDConfig+6)& (0+255),w,b
  4472  001864  EC31  F008         	call	_GPIO_PinWrite
  4473                           
  4474                           ;lcd.c: 965: GPIO_PinWrite(LCDConfig.D1,(((dataByte)&(((uint8_t)1<<(1))))!=0u));
  4475  001868  A206               	btfss	lcd_SendLowerNibble@dataByte,1,c
  4476  00186A  D002               	goto	u2000
  4477  00186C  0E01               	movlw	1
  4478  00186E  D001               	goto	u2010
  4479  001870                     u2000:
  4480  001870  0E00               	movlw	0
  4481  001872                     u2010:
  4482  001872  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4483  001874  0100               	movlb	0	; () banked
  4484  001876  5187               	movf	(_LCDConfig+7)& (0+255),w,b
  4485  001878  EC31  F008         	call	_GPIO_PinWrite
  4486                           
  4487                           ;lcd.c: 966: GPIO_PinWrite(LCDConfig.D2,(((dataByte)&(((uint8_t)1<<(2))))!=0u));
  4488  00187C  A406               	btfss	lcd_SendLowerNibble@dataByte,2,c
  4489  00187E  D002               	goto	u2020
  4490  001880  0E01               	movlw	1
  4491  001882  D001               	goto	u2030
  4492  001884                     u2020:
  4493  001884  0E00               	movlw	0
  4494  001886                     u2030:
  4495  001886  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4496  001888  0100               	movlb	0	; () banked
  4497  00188A  5188               	movf	(_LCDConfig+8)& (0+255),w,b
  4498  00188C  EC31  F008         	call	_GPIO_PinWrite
  4499                           
  4500                           ;lcd.c: 967: GPIO_PinWrite(LCDConfig.D3,(((dataByte)&(((uint8_t)1<<(3))))!=0u));
  4501  001890  A606               	btfss	lcd_SendLowerNibble@dataByte,3,c
  4502  001892  D002               	goto	u2040
  4503  001894  0E01               	movlw	1
  4504  001896  D001               	goto	u2050
  4505  001898                     u2040:
  4506  001898  0E00               	movlw	0
  4507  00189A                     u2050:
  4508  00189A  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4509  00189C  0100               	movlb	0	; () banked
  4510  00189E  5189               	movf	(_LCDConfig+9)& (0+255),w,b
  4511  0018A0  EC31  F008         	call	_GPIO_PinWrite
  4512  0018A4  0012               	return		;funcret
  4513  0018A6                     __end_of_lcd_SendLowerNibble:
  4514                           	opt stack 0
  4515                           tblptru	equ	0xFF8
  4516                           tblptrh	equ	0xFF7
  4517                           tblptrl	equ	0xFF6
  4518                           tablat	equ	0xFF5
  4519                           prodh	equ	0xFF4
  4520                           prodl	equ	0xFF3
  4521                           postinc0	equ	0xFEE
  4522                           wreg	equ	0xFE8
  4523                           postdec1	equ	0xFE5
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8
  4531                           
  4532 ;; *************** function _lcd_SendHigherNibble *****************
  4533 ;; Defined at:
  4534 ;;		line 943 in file "../00-libfiles/lcd.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  dataByte        1    wreg     unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  dataByte        1    5[COMRAM] unsigned char 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4548 ;;      Params:         0       0       0       0       0       0       0
  4549 ;;      Locals:         1       0       0       0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0
  4551 ;;      Totals:         1       0       0       0       0       0       0
  4552 ;;Total ram usage:        1 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    1
  4555 ;; This function calls:
  4556 ;;		_GPIO_PinWrite
  4557 ;; This function is called by:
  4558 ;;		_LCD_CmdWrite
  4559 ;;		_lcd_DataWrite
  4560 ;;		_lcd_Reset
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text24
  4565  0018A6                     __ptext24:
  4566                           	opt stack 0
  4567  0018A6                     _lcd_SendHigherNibble:
  4568                           	opt stack 25
  4569                           
  4570                           ;incstack = 0
  4571                           ;lcd_SendHigherNibble@dataByte stored from wreg
  4572  0018A6  6E06               	movwf	lcd_SendHigherNibble@dataByte,c
  4573                           
  4574                           ;lcd.c: 945: GPIO_PinWrite(LCDConfig.D4,(((dataByte)&(((uint8_t)1<<(4))))!=0u));
  4575  0018A8  A806               	btfss	lcd_SendHigherNibble@dataByte,4,c
  4576  0018AA  D002               	goto	u2060
  4577  0018AC  0E01               	movlw	1
  4578  0018AE  D001               	goto	u2070
  4579  0018B0                     u2060:
  4580  0018B0  0E00               	movlw	0
  4581  0018B2                     u2070:
  4582  0018B2  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4583  0018B4  0100               	movlb	0	; () banked
  4584  0018B6  518A               	movf	(_LCDConfig+10)& (0+255),w,b
  4585  0018B8  EC31  F008         	call	_GPIO_PinWrite
  4586                           
  4587                           ;lcd.c: 946: GPIO_PinWrite(LCDConfig.D5,(((dataByte)&(((uint8_t)1<<(5))))!=0u));
  4588  0018BC  AA06               	btfss	lcd_SendHigherNibble@dataByte,5,c
  4589  0018BE  D002               	goto	u2080
  4590  0018C0  0E01               	movlw	1
  4591  0018C2  D001               	goto	u2090
  4592  0018C4                     u2080:
  4593  0018C4  0E00               	movlw	0
  4594  0018C6                     u2090:
  4595  0018C6  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4596  0018C8  0100               	movlb	0	; () banked
  4597  0018CA  518B               	movf	(_LCDConfig+11)& (0+255),w,b
  4598  0018CC  EC31  F008         	call	_GPIO_PinWrite
  4599                           
  4600                           ;lcd.c: 947: GPIO_PinWrite(LCDConfig.D6,(((dataByte)&(((uint8_t)1<<(6))))!=0u));
  4601  0018D0  AC06               	btfss	lcd_SendHigherNibble@dataByte,6,c
  4602  0018D2  D002               	goto	u2100
  4603  0018D4  0E01               	movlw	1
  4604  0018D6  D001               	goto	u2110
  4605  0018D8                     u2100:
  4606  0018D8  0E00               	movlw	0
  4607  0018DA                     u2110:
  4608  0018DA  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4609  0018DC  0100               	movlb	0	; () banked
  4610  0018DE  518C               	movf	(_LCDConfig+12)& (0+255),w,b
  4611  0018E0  EC31  F008         	call	_GPIO_PinWrite
  4612                           
  4613                           ;lcd.c: 948: GPIO_PinWrite(LCDConfig.D7,(((dataByte)&(((uint8_t)1<<(7))))!=0u));
  4614  0018E4  AE06               	btfss	lcd_SendHigherNibble@dataByte,7,c
  4615  0018E6  D002               	goto	u2120
  4616  0018E8  0E01               	movlw	1
  4617  0018EA  D001               	goto	u2130
  4618  0018EC                     u2120:
  4619  0018EC  0E00               	movlw	0
  4620  0018EE                     u2130:
  4621  0018EE  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4622  0018F0  0100               	movlb	0	; () banked
  4623  0018F2  518D               	movf	(_LCDConfig+13)& (0+255),w,b
  4624  0018F4  EC31  F008         	call	_GPIO_PinWrite
  4625  0018F8  0012               	return		;funcret
  4626  0018FA                     __end_of_lcd_SendHigherNibble:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           postinc0	equ	0xFEE
  4635                           wreg	equ	0xFE8
  4636                           postdec1	equ	0xFE5
  4637                           fsr1l	equ	0xFE1
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function _lcd_SendCmdSignals *****************
  4646 ;; Defined at:
  4647 ;;		line 981 in file "../00-libfiles/lcd.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;		None
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  1    wreg      void 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2, status,0, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4661 ;;      Params:         0       0       0       0       0       0       0
  4662 ;;      Locals:         0       0       0       0       0       0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0
  4664 ;;      Totals:         0       0       0       0       0       0       0
  4665 ;;Total ram usage:        0 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    1
  4668 ;; This function calls:
  4669 ;;		_DELAY_us
  4670 ;;		_GPIO_PinWrite
  4671 ;; This function is called by:
  4672 ;;		_LCD_CmdWrite
  4673 ;;		_lcd_Reset
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text25
  4678  00198A                     __ptext25:
  4679                           	opt stack 0
  4680  00198A                     _lcd_SendCmdSignals:
  4681                           	opt stack 24
  4682                           
  4683                           ;lcd.c: 983: GPIO_PinWrite(LCDConfig.RS,0);
  4684                           
  4685                           ;incstack = 0
  4686  00198A  0E00               	movlw	0
  4687  00198C  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4688  00198E  0100               	movlb	0	; () banked
  4689  001990  5183               	movf	(_LCDConfig+3)& (0+255),w,b
  4690  001992  EC31  F008         	call	_GPIO_PinWrite
  4691                           
  4692                           ;lcd.c: 984: GPIO_PinWrite(LCDConfig.RW,0);
  4693  001996  0E00               	movlw	0
  4694  001998  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4695  00199A  0100               	movlb	0	; () banked
  4696  00199C  5184               	movf	(_LCDConfig+4)& (0+255),w,b
  4697  00199E  EC31  F008         	call	_GPIO_PinWrite
  4698                           
  4699                           ;lcd.c: 985: GPIO_PinWrite(LCDConfig.EN,1);
  4700  0019A2  0E01               	movlw	1
  4701  0019A4  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4702  0019A6  0100               	movlb	0	; () banked
  4703  0019A8  5185               	movf	(_LCDConfig+5)& (0+255),w,b
  4704  0019AA  EC31  F008         	call	_GPIO_PinWrite
  4705                           
  4706                           ;lcd.c: 986: DELAY_us(10);
  4707  0019AE  0E00               	movlw	0
  4708  0019B0  6E02               	movwf	DELAY_us@us_count+1,c
  4709  0019B2  0E0A               	movlw	10
  4710  0019B4  6E01               	movwf	DELAY_us@us_count,c
  4711  0019B6  ECA7  F00D         	call	_DELAY_us	;wreg free
  4712                           
  4713                           ;lcd.c: 987: GPIO_PinWrite(LCDConfig.EN,0);
  4714  0019BA  0E00               	movlw	0
  4715  0019BC  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4716  0019BE  0100               	movlb	0	; () banked
  4717  0019C0  5185               	movf	(_LCDConfig+5)& (0+255),w,b
  4718  0019C2  EC31  F008         	call	_GPIO_PinWrite
  4719  0019C6  0012               	return		;funcret
  4720  0019C8                     __end_of_lcd_SendCmdSignals:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           prodh	equ	0xFF4
  4727                           prodl	equ	0xFF3
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           postdec1	equ	0xFE5
  4731                           fsr1l	equ	0xFE1
  4732                           indf2	equ	0xFDF
  4733                           postinc2	equ	0xFDE
  4734                           postdec2	equ	0xFDD
  4735                           fsr2h	equ	0xFDA
  4736                           fsr2l	equ	0xFD9
  4737                           status	equ	0xFD8
  4738                           
  4739 ;; *************** function _lcd_BusyCheck *****************
  4740 ;; Defined at:
  4741 ;;		line 860 in file "../00-libfiles/lcd.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  busyflag        1    5[COMRAM] unsigned char 
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, status,2, status,0, cstack
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4755 ;;      Params:         0       0       0       0       0       0       0
  4756 ;;      Locals:         1       0       0       0       0       0       0
  4757 ;;      Temps:          0       0       0       0       0       0       0
  4758 ;;      Totals:         1       0       0       0       0       0       0
  4759 ;;Total ram usage:        1 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:    2
  4762 ;; This function calls:
  4763 ;;		_DELAY_ms
  4764 ;;		_DELAY_us
  4765 ;;		_GPIO_PinDirection
  4766 ;;		_GPIO_PinRead
  4767 ;;		_GPIO_PinWrite
  4768 ;; This function is called by:
  4769 ;;		_LCD_CmdWrite
  4770 ;;		_lcd_DataWrite
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text26
  4775  0014B8                     __ptext26:
  4776                           	opt stack 0
  4777  0014B8                     _lcd_BusyCheck:
  4778                           	opt stack 24
  4779                           
  4780                           ;lcd.c: 862: uint8_t busyflag;
  4781                           ;lcd.c: 864: if(LCDConfig.RW != P_NC)
  4782                           
  4783                           ;incstack = 0
  4784  0014B8  0100               	movlb	0	; () banked
  4785  0014BA  2984               	incf	(_LCDConfig+4)& (0+255),w,b
  4786  0014BC  B4D8               	btfsc	status,2,c
  4787  0014BE  D056               	goto	l1949
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;lcd.c: 865: {
  4791                           ;lcd.c: 866: GPIO_PinDirection(LCDConfig.D7,0x01u);
  4792  0014C0  0E01               	movlw	1
  4793  0014C2  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  4794  0014C4  0100               	movlb	0	; () banked
  4795  0014C6  518D               	movf	(_LCDConfig+13)& (0+255),w,b
  4796  0014C8  ECE1  F008         	call	_GPIO_PinDirection
  4797                           
  4798                           ;lcd.c: 867: GPIO_PinWrite(LCDConfig.RS,0);
  4799  0014CC  0E00               	movlw	0
  4800  0014CE  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4801  0014D0  0100               	movlb	0	; () banked
  4802  0014D2  5183               	movf	(_LCDConfig+3)& (0+255),w,b
  4803  0014D4  EC31  F008         	call	_GPIO_PinWrite
  4804                           
  4805                           ;lcd.c: 868: GPIO_PinWrite(LCDConfig.RW,1);
  4806  0014D8  0E01               	movlw	1
  4807  0014DA  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4808  0014DC  0100               	movlb	0	; () banked
  4809  0014DE  5184               	movf	(_LCDConfig+4)& (0+255),w,b
  4810  0014E0  EC31  F008         	call	_GPIO_PinWrite
  4811  0014E4                     l293:
  4812                           
  4813                           ;lcd.c: 870: {
  4814                           ;lcd.c: 872: GPIO_PinWrite(LCDConfig.EN,0);
  4815  0014E4  0E00               	movlw	0
  4816  0014E6  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4817  0014E8  0100               	movlb	0	; () banked
  4818  0014EA  5185               	movf	(_LCDConfig+5)& (0+255),w,b
  4819  0014EC  EC31  F008         	call	_GPIO_PinWrite
  4820                           
  4821                           ;lcd.c: 873: DELAY_us(10);
  4822  0014F0  0E00               	movlw	0
  4823  0014F2  6E02               	movwf	DELAY_us@us_count+1,c
  4824  0014F4  0E0A               	movlw	10
  4825  0014F6  6E01               	movwf	DELAY_us@us_count,c
  4826  0014F8  ECA7  F00D         	call	_DELAY_us	;wreg free
  4827                           
  4828                           ;lcd.c: 874: GPIO_PinWrite(LCDConfig.EN,1);
  4829  0014FC  0E01               	movlw	1
  4830  0014FE  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4831  001500  0100               	movlb	0	; () banked
  4832  001502  5185               	movf	(_LCDConfig+5)& (0+255),w,b
  4833  001504  EC31  F008         	call	_GPIO_PinWrite
  4834                           
  4835                           ;lcd.c: 875: DELAY_us(10);
  4836  001508  0E00               	movlw	0
  4837  00150A  6E02               	movwf	DELAY_us@us_count+1,c
  4838  00150C  0E0A               	movlw	10
  4839  00150E  6E01               	movwf	DELAY_us@us_count,c
  4840  001510  ECA7  F00D         	call	_DELAY_us	;wreg free
  4841                           
  4842                           ;lcd.c: 876: busyflag = GPIO_PinRead(LCDConfig.D7);
  4843  001514  0100               	movlb	0	; () banked
  4844  001516  518D               	movf	(_LCDConfig+13)& (0+255),w,b
  4845  001518  EC91  F009         	call	_GPIO_PinRead
  4846  00151C  6E06               	movwf	lcd_BusyCheck@busyflag,c
  4847                           
  4848                           ;lcd.c: 879: if(LCDConfig.v_LcdMode_U8 == 4)
  4849  00151E  0E04               	movlw	4
  4850  001520  0100               	movlb	0	; () banked
  4851  001522  1982               	xorwf	(_LCDConfig+2)& (0+255),w,b
  4852  001524  A4D8               	btfss	status,2,c
  4853  001526  D018               	goto	l1945
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;lcd.c: 880: {
  4857                           ;lcd.c: 882: GPIO_PinWrite(LCDConfig.EN,0);
  4858  001528  0E00               	movlw	0
  4859  00152A  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4860  00152C  0100               	movlb	0	; () banked
  4861  00152E  5185               	movf	(_LCDConfig+5)& (0+255),w,b
  4862  001530  EC31  F008         	call	_GPIO_PinWrite
  4863                           
  4864                           ;lcd.c: 883: DELAY_us(10);
  4865  001534  0E00               	movlw	0
  4866  001536  6E02               	movwf	DELAY_us@us_count+1,c
  4867  001538  0E0A               	movlw	10
  4868  00153A  6E01               	movwf	DELAY_us@us_count,c
  4869  00153C  ECA7  F00D         	call	_DELAY_us	;wreg free
  4870                           
  4871                           ;lcd.c: 884: GPIO_PinWrite(LCDConfig.EN,1);
  4872  001540  0E01               	movlw	1
  4873  001542  6E01               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  4874  001544  0100               	movlb	0	; () banked
  4875  001546  5185               	movf	(_LCDConfig+5)& (0+255),w,b
  4876  001548  EC31  F008         	call	_GPIO_PinWrite
  4877                           
  4878                           ;lcd.c: 885: DELAY_us(10);
  4879  00154C  0E00               	movlw	0
  4880  00154E  6E02               	movwf	DELAY_us@us_count+1,c
  4881  001550  0E0A               	movlw	10
  4882  001552  6E01               	movwf	DELAY_us@us_count,c
  4883  001554  ECA7  F00D         	call	_DELAY_us	;wreg free
  4884  001558                     l1945:
  4885                           
  4886                           ;lcd.c: 886: }
  4887                           ;lcd.c: 887: }while(busyflag!=0);
  4888  001558  5006               	movf	lcd_BusyCheck@busyflag,w,c
  4889  00155A  A4D8               	btfss	status,2,c
  4890  00155C  D7C3               	goto	l293
  4891                           
  4892                           ;lcd.c: 889: GPIO_PinDirection(LCDConfig.D7,0x00u);
  4893  00155E  0E00               	movlw	0
  4894  001560  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  4895  001562  0100               	movlb	0	; () banked
  4896  001564  518D               	movf	(_LCDConfig+13)& (0+255),w,b
  4897  001566  ECE1  F008         	call	_GPIO_PinDirection
  4898                           
  4899                           ;lcd.c: 890: }
  4900  00156A  0012               	return	
  4901  00156C                     l1949:
  4902                           
  4903                           ;lcd.c: 891: else
  4904                           ;lcd.c: 892: {
  4905                           ;lcd.c: 895: DELAY_ms(1);
  4906  00156C  0E00               	movlw	0
  4907  00156E  6E04               	movwf	DELAY_ms@ms_count+1,c
  4908  001570  0E01               	movlw	1
  4909  001572  6E03               	movwf	DELAY_ms@ms_count,c
  4910  001574  EC98  F00D         	call	_DELAY_ms	;wreg free
  4911  001578  0012               	return	
  4912  00157A                     __end_of_lcd_BusyCheck:
  4913                           	opt stack 0
  4914                           tblptru	equ	0xFF8
  4915                           tblptrh	equ	0xFF7
  4916                           tblptrl	equ	0xFF6
  4917                           tablat	equ	0xFF5
  4918                           prodh	equ	0xFF4
  4919                           prodl	equ	0xFF3
  4920                           postinc0	equ	0xFEE
  4921                           wreg	equ	0xFE8
  4922                           postdec1	equ	0xFE5
  4923                           fsr1l	equ	0xFE1
  4924                           indf2	equ	0xFDF
  4925                           postinc2	equ	0xFDE
  4926                           postdec2	equ	0xFDD
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _GPIO_PinWrite *****************
  4932 ;; Defined at:
  4933 ;;		line 127 in file "../00-libfiles/gpio.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  enm_pinNumbe    1    wreg     enum E3211
  4936 ;;  var_pinValue    1    0[COMRAM] unsigned char 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  4939 ;;  var_portNumb    1    3[COMRAM] unsigned char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  1    wreg      void 
  4942 ;; Registers used:
  4943 ;;		wreg, status,2, status,0
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4949 ;;      Params:         1       0       0       0       0       0       0
  4950 ;;      Locals:         2       0       0       0       0       0       0
  4951 ;;      Temps:          2       0       0       0       0       0       0
  4952 ;;      Totals:         5       0       0       0       0       0       0
  4953 ;;Total ram usage:        5 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; This function calls:
  4956 ;;		Nothing
  4957 ;; This function is called by:
  4958 ;;		_lcd_BusyCheck
  4959 ;;		_lcd_SendHigherNibble
  4960 ;;		_lcd_SendLowerNibble
  4961 ;;		_lcd_SendCmdSignals
  4962 ;;		_lcd_SendDataSignals
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           	psect	text27
  4967  001062                     __ptext27:
  4968                           	opt stack 0
  4969  001062                     _GPIO_PinWrite:
  4970                           	opt stack 25
  4971                           
  4972                           ;incstack = 0
  4973                           ;GPIO_PinWrite@enm_pinNumber stored from wreg
  4974  001062  6E05               	movwf	GPIO_PinWrite@enm_pinNumber,c
  4975                           
  4976                           ;gpio.c: 130: uint8_t var_portNumber_u8;
  4977                           ;gpio.c: 133: var_portNumber_u8 = (enm_pinNumber>>3);
  4978  001064  3805               	swapf	GPIO_PinWrite@enm_pinNumber,w,c
  4979  001066  46E8               	rlncf	wreg,f,c
  4980  001068  0B1F               	andlw	31
  4981  00106A  6E04               	movwf	GPIO_PinWrite@var_portNumber_u8,c
  4982                           
  4983                           ;gpio.c: 134: enm_pinNumber = enm_pinNumber & 0x07;
  4984  00106C  5005               	movf	GPIO_PinWrite@enm_pinNumber,w,c
  4985  00106E  0B07               	andlw	7
  4986  001070  6E05               	movwf	GPIO_PinWrite@enm_pinNumber,c
  4987                           
  4988                           ;gpio.c: 138: switch(var_portNumber_u8)
  4989  001072  D096               	goto	l1911
  4990  001074                     l1879:
  4991                           
  4992                           ;gpio.c: 142: ((var_pinValue_u8)? ((LATA) |= ((uint8_t)1<<(enm_pinNumber))): ((LATA) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  4993  001074  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  4994  001076  B4D8               	btfsc	status,2,c
  4995  001078  D00D               	goto	l1883
  4996  00107A  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  4997  00107E  0E01               	movlw	1
  4998  001080  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  4999  001082  2A02               	incf	??_GPIO_PinWrite,f,c
  5000  001084  D002               	goto	u1664
  5001  001086                     u1665:
  5002  001086  90D8               	bcf	status,0,c
  5003  001088  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5004  00108A                     u1664:
  5005  00108A  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5006  00108C  D7FC               	goto	u1665
  5007  00108E  5003               	movf	??_GPIO_PinWrite+1,w,c
  5008  001090  1289               	iorwf	3977,f,c	;volatile
  5009  001092  0012               	return	
  5010  001094                     l1883:
  5011  001094  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5012  001098  0E01               	movlw	1
  5013  00109A  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5014  00109C  2A02               	incf	??_GPIO_PinWrite,f,c
  5015  00109E  D002               	goto	u1674
  5016  0010A0                     u1675:
  5017  0010A0  90D8               	bcf	status,0,c
  5018  0010A2  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5019  0010A4                     u1674:
  5020  0010A4  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5021  0010A6  D7FC               	goto	u1675
  5022  0010A8  5003               	movf	??_GPIO_PinWrite+1,w,c
  5023  0010AA  0AFF               	xorlw	255
  5024  0010AC  1689               	andwf	3977,f,c	;volatile
  5025                           
  5026                           ;gpio.c: 143: break;
  5027  0010AE  0012               	return	
  5028  0010B0                     l1885:
  5029                           
  5030                           ;gpio.c: 148: ((var_pinValue_u8)? ((LATB) |= ((uint8_t)1<<(enm_pinNumber))): ((LATB) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5031  0010B0  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  5032  0010B2  B4D8               	btfsc	status,2,c
  5033  0010B4  D00D               	goto	l1889
  5034  0010B6  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5035  0010BA  0E01               	movlw	1
  5036  0010BC  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5037  0010BE  2A02               	incf	??_GPIO_PinWrite,f,c
  5038  0010C0  D002               	goto	u1694
  5039  0010C2                     u1695:
  5040  0010C2  90D8               	bcf	status,0,c
  5041  0010C4  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5042  0010C6                     u1694:
  5043  0010C6  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5044  0010C8  D7FC               	goto	u1695
  5045  0010CA  5003               	movf	??_GPIO_PinWrite+1,w,c
  5046  0010CC  128A               	iorwf	3978,f,c	;volatile
  5047  0010CE  0012               	return	
  5048  0010D0                     l1889:
  5049  0010D0  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5050  0010D4  0E01               	movlw	1
  5051  0010D6  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5052  0010D8  2A02               	incf	??_GPIO_PinWrite,f,c
  5053  0010DA  D002               	goto	u1704
  5054  0010DC                     u1705:
  5055  0010DC  90D8               	bcf	status,0,c
  5056  0010DE  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5057  0010E0                     u1704:
  5058  0010E0  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5059  0010E2  D7FC               	goto	u1705
  5060  0010E4  5003               	movf	??_GPIO_PinWrite+1,w,c
  5061  0010E6  0AFF               	xorlw	255
  5062  0010E8  168A               	andwf	3978,f,c	;volatile
  5063                           
  5064                           ;gpio.c: 149: break;
  5065  0010EA  0012               	return	
  5066  0010EC                     l1891:
  5067                           
  5068                           ;gpio.c: 154: ((var_pinValue_u8)? ((LATC) |= ((uint8_t)1<<(enm_pinNumber))): ((LATC) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5069  0010EC  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  5070  0010EE  B4D8               	btfsc	status,2,c
  5071  0010F0  D00D               	goto	l1895
  5072  0010F2  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5073  0010F6  0E01               	movlw	1
  5074  0010F8  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5075  0010FA  2A02               	incf	??_GPIO_PinWrite,f,c
  5076  0010FC  D002               	goto	u1724
  5077  0010FE                     u1725:
  5078  0010FE  90D8               	bcf	status,0,c
  5079  001100  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5080  001102                     u1724:
  5081  001102  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5082  001104  D7FC               	goto	u1725
  5083  001106  5003               	movf	??_GPIO_PinWrite+1,w,c
  5084  001108  128B               	iorwf	3979,f,c	;volatile
  5085  00110A  0012               	return	
  5086  00110C                     l1895:
  5087  00110C  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5088  001110  0E01               	movlw	1
  5089  001112  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5090  001114  2A02               	incf	??_GPIO_PinWrite,f,c
  5091  001116  D002               	goto	u1734
  5092  001118                     u1735:
  5093  001118  90D8               	bcf	status,0,c
  5094  00111A  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5095  00111C                     u1734:
  5096  00111C  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5097  00111E  D7FC               	goto	u1735
  5098  001120  5003               	movf	??_GPIO_PinWrite+1,w,c
  5099  001122  0AFF               	xorlw	255
  5100  001124  168B               	andwf	3979,f,c	;volatile
  5101                           
  5102                           ;gpio.c: 155: break;
  5103  001126  0012               	return	
  5104  001128                     l1897:
  5105                           
  5106                           ;gpio.c: 160: ((var_pinValue_u8)? ((LATD) |= ((uint8_t)1<<(enm_pinNumber))): ((LATD) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5107  001128  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  5108  00112A  B4D8               	btfsc	status,2,c
  5109  00112C  D00D               	goto	l1901
  5110  00112E  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5111  001132  0E01               	movlw	1
  5112  001134  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5113  001136  2A02               	incf	??_GPIO_PinWrite,f,c
  5114  001138  D002               	goto	u1754
  5115  00113A                     u1755:
  5116  00113A  90D8               	bcf	status,0,c
  5117  00113C  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5118  00113E                     u1754:
  5119  00113E  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5120  001140  D7FC               	goto	u1755
  5121  001142  5003               	movf	??_GPIO_PinWrite+1,w,c
  5122  001144  128C               	iorwf	3980,f,c	;volatile
  5123  001146  0012               	return	
  5124  001148                     l1901:
  5125  001148  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5126  00114C  0E01               	movlw	1
  5127  00114E  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5128  001150  2A02               	incf	??_GPIO_PinWrite,f,c
  5129  001152  D002               	goto	u1764
  5130  001154                     u1765:
  5131  001154  90D8               	bcf	status,0,c
  5132  001156  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5133  001158                     u1764:
  5134  001158  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5135  00115A  D7FC               	goto	u1765
  5136  00115C  5003               	movf	??_GPIO_PinWrite+1,w,c
  5137  00115E  0AFF               	xorlw	255
  5138  001160  168C               	andwf	3980,f,c	;volatile
  5139                           
  5140                           ;gpio.c: 161: break;
  5141  001162  0012               	return	
  5142  001164                     l1903:
  5143                           
  5144                           ;gpio.c: 166: ((var_pinValue_u8)? ((LATE) |= ((uint8_t)1<<(enm_pinNumber))): ((LATE) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5145  001164  5001               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  5146  001166  B4D8               	btfsc	status,2,c
  5147  001168  D00D               	goto	l1907
  5148  00116A  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5149  00116E  0E01               	movlw	1
  5150  001170  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5151  001172  2A02               	incf	??_GPIO_PinWrite,f,c
  5152  001174  D002               	goto	u1784
  5153  001176                     u1785:
  5154  001176  90D8               	bcf	status,0,c
  5155  001178  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5156  00117A                     u1784:
  5157  00117A  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5158  00117C  D7FC               	goto	u1785
  5159  00117E  5003               	movf	??_GPIO_PinWrite+1,w,c
  5160  001180  128D               	iorwf	3981,f,c	;volatile
  5161  001182  0012               	return	
  5162  001184                     l1907:
  5163  001184  C005  F002         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  5164  001188  0E01               	movlw	1
  5165  00118A  6E03               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  5166  00118C  2A02               	incf	??_GPIO_PinWrite,f,c
  5167  00118E  D002               	goto	u1794
  5168  001190                     u1795:
  5169  001190  90D8               	bcf	status,0,c
  5170  001192  3603               	rlcf	??_GPIO_PinWrite+1,f,c
  5171  001194                     u1794:
  5172  001194  2E02               	decfsz	??_GPIO_PinWrite,f,c
  5173  001196  D7FC               	goto	u1795
  5174  001198  5003               	movf	??_GPIO_PinWrite+1,w,c
  5175  00119A  0AFF               	xorlw	255
  5176  00119C  168D               	andwf	3981,f,c	;volatile
  5177                           
  5178                           ;gpio.c: 169: }
  5179                           
  5180                           ;gpio.c: 167: break;
  5181  00119E  0012               	return	
  5182  0011A0                     l1911:
  5183  0011A0  5004               	movf	GPIO_PinWrite@var_portNumber_u8,w,c
  5184                           
  5185                           ; Switch size 1, requested type "space"
  5186                           ; Number of cases is 5, Range of values is 0 to 4
  5187                           ; switch strategies available:
  5188                           ; Name         Instructions Cycles
  5189                           ; simple_byte           16     9 (average)
  5190                           ;	Chosen strategy is simple_byte
  5191  0011A2  0A00               	xorlw	0	; case 0
  5192  0011A4  B4D8               	btfsc	status,2,c
  5193  0011A6  D766               	goto	l1879
  5194  0011A8  0A01               	xorlw	1	; case 1
  5195  0011AA  B4D8               	btfsc	status,2,c
  5196  0011AC  D781               	goto	l1885
  5197  0011AE  0A03               	xorlw	3	; case 2
  5198  0011B0  B4D8               	btfsc	status,2,c
  5199  0011B2  D79C               	goto	l1891
  5200  0011B4  0A01               	xorlw	1	; case 3
  5201  0011B6  B4D8               	btfsc	status,2,c
  5202  0011B8  D7B7               	goto	l1897
  5203  0011BA  0A07               	xorlw	7	; case 4
  5204  0011BC  A4D8               	btfss	status,2,c
  5205  0011BE  0012               	return	
  5206  0011C0  D7D1               	goto	l1903
  5207  0011C2                     __end_of_GPIO_PinWrite:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           postinc0	equ	0xFEE
  5216                           wreg	equ	0xFE8
  5217                           postdec1	equ	0xFE5
  5218                           fsr1l	equ	0xFE1
  5219                           indf2	equ	0xFDF
  5220                           postinc2	equ	0xFDE
  5221                           postdec2	equ	0xFDD
  5222                           fsr2h	equ	0xFDA
  5223                           fsr2l	equ	0xFD9
  5224                           status	equ	0xFD8
  5225                           
  5226 ;; *************** function _GPIO_PinRead *****************
  5227 ;; Defined at:
  5228 ;;		line 192 in file "../00-libfiles/gpio.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  enm_pinNumbe    1    wreg     enum E3211
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  5233 ;;  returnStatus    1    3[COMRAM] unsigned char 
  5234 ;;  var_portNumb    1    2[COMRAM] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  1    wreg      unsigned char 
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5244 ;;      Params:         0       0       0       0       0       0       0
  5245 ;;      Locals:         3       0       0       0       0       0       0
  5246 ;;      Temps:          2       0       0       0       0       0       0
  5247 ;;      Totals:         5       0       0       0       0       0       0
  5248 ;;Total ram usage:        5 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_lcd_BusyCheck
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text28
  5258  001322                     __ptext28:
  5259                           	opt stack 0
  5260  001322                     _GPIO_PinRead:
  5261                           	opt stack 25
  5262                           
  5263                           ;incstack = 0
  5264                           ;GPIO_PinRead@enm_pinNumber stored from wreg
  5265  001322  6E05               	movwf	GPIO_PinRead@enm_pinNumber,c
  5266                           
  5267                           ;gpio.c: 194: uint8_t var_portNumber_u8;
  5268                           ;gpio.c: 195: uint8_t returnStatus = 0;
  5269  001324  0E00               	movlw	0
  5270  001326  6E04               	movwf	GPIO_PinRead@returnStatus,c
  5271                           
  5272                           ;gpio.c: 197: var_portNumber_u8 = (enm_pinNumber>>3);
  5273  001328  3805               	swapf	GPIO_PinRead@enm_pinNumber,w,c
  5274  00132A  46E8               	rlncf	wreg,f,c
  5275  00132C  0B1F               	andlw	31
  5276  00132E  6E03               	movwf	GPIO_PinRead@var_portNumber_u8,c
  5277                           
  5278                           ;gpio.c: 198: enm_pinNumber = enm_pinNumber & 0x07;
  5279  001330  5005               	movf	GPIO_PinRead@enm_pinNumber,w,c
  5280  001332  0B07               	andlw	7
  5281  001334  6E05               	movwf	GPIO_PinRead@enm_pinNumber,c
  5282                           
  5283                           ;gpio.c: 201: switch(var_portNumber_u8)
  5284  001336  D04C               	goto	l1931
  5285  001338                     l1919:
  5286                           
  5287                           ;gpio.c: 205: returnStatus = (((PORTA)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  5288  001338  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  5289  00133C  0E01               	movlw	1
  5290  00133E  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  5291  001340  2A01               	incf	??_GPIO_PinRead,f,c
  5292  001342  D002               	goto	u1804
  5293  001344                     u1805:
  5294  001344  90D8               	bcf	status,0,c
  5295  001346  3602               	rlcf	??_GPIO_PinRead+1,f,c
  5296  001348                     u1804:
  5297  001348  2E01               	decfsz	??_GPIO_PinRead,f,c
  5298  00134A  D7FC               	goto	u1805
  5299  00134C  5002               	movf	??_GPIO_PinRead+1,w,c
  5300  00134E  1480               	andwf	3968,w,c	;volatile
  5301  001350  0900               	iorlw	0
  5302  001352  B4D8               	btfsc	status,2,c
  5303  001354  D03B               	goto	u1930
  5304  001356  D029               	goto	u1901
  5305  001358                     u1820:
  5306  001358  6E04               	movwf	GPIO_PinRead@returnStatus,c
  5307                           
  5308                           ;gpio.c: 206: break;
  5309  00135A  D04A               	goto	l1933
  5310  00135C                     l1921:
  5311                           
  5312                           ;gpio.c: 210: returnStatus = (((PORTB)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  5313  00135C  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  5314  001360  0E01               	movlw	1
  5315  001362  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  5316  001364  2A01               	incf	??_GPIO_PinRead,f,c
  5317  001366  D002               	goto	u1834
  5318  001368                     u1835:
  5319  001368  90D8               	bcf	status,0,c
  5320  00136A  3602               	rlcf	??_GPIO_PinRead+1,f,c
  5321  00136C                     u1834:
  5322  00136C  2E01               	decfsz	??_GPIO_PinRead,f,c
  5323  00136E  D7FC               	goto	u1835
  5324  001370  5002               	movf	??_GPIO_PinRead+1,w,c
  5325  001372  1481               	andwf	3969,w,c	;volatile
  5326  001374  D028               	goto	L6
  5327  001376                     l1923:
  5328                           
  5329                           ;gpio.c: 215: returnStatus = (((PORTC)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  5330  001376  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  5331  00137A  0E01               	movlw	1
  5332  00137C  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  5333  00137E  2A01               	incf	??_GPIO_PinRead,f,c
  5334  001380  D002               	goto	u1864
  5335  001382                     u1865:
  5336  001382  90D8               	bcf	status,0,c
  5337  001384  3602               	rlcf	??_GPIO_PinRead+1,f,c
  5338  001386                     u1864:
  5339  001386  2E01               	decfsz	??_GPIO_PinRead,f,c
  5340  001388  D7FC               	goto	u1865
  5341  00138A  5002               	movf	??_GPIO_PinRead+1,w,c
  5342  00138C  1482               	andwf	3970,w,c	;volatile
  5343  00138E  D01B               	goto	L6
  5344  001390                     l1925:
  5345                           
  5346                           ;gpio.c: 221: returnStatus = (((PORTD)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  5347  001390  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  5348  001394  0E01               	movlw	1
  5349  001396  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  5350  001398  2A01               	incf	??_GPIO_PinRead,f,c
  5351  00139A  D002               	goto	u1894
  5352  00139C                     u1895:
  5353  00139C  90D8               	bcf	status,0,c
  5354  00139E  3602               	rlcf	??_GPIO_PinRead+1,f,c
  5355  0013A0                     u1894:
  5356  0013A0  2E01               	decfsz	??_GPIO_PinRead,f,c
  5357  0013A2  D7FC               	goto	u1895
  5358  0013A4  5002               	movf	??_GPIO_PinRead+1,w,c
  5359  0013A6  1483               	andwf	3971,w,c	;volatile
  5360  0013A8  D00E               	goto	L6
  5361  0013AA                     u1901:
  5362  0013AA  0E01               	movlw	1
  5363  0013AC  D7D5               	goto	u1820
  5364  0013AE                     l1927:
  5365                           
  5366                           ;gpio.c: 227: returnStatus = (((PORTE)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  5367  0013AE  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  5368  0013B2  0E01               	movlw	1
  5369  0013B4  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  5370  0013B6  2A01               	incf	??_GPIO_PinRead,f,c
  5371  0013B8  D002               	goto	u1924
  5372  0013BA                     u1925:
  5373  0013BA  90D8               	bcf	status,0,c
  5374  0013BC  3602               	rlcf	??_GPIO_PinRead+1,f,c
  5375  0013BE                     u1924:
  5376  0013BE  2E01               	decfsz	??_GPIO_PinRead,f,c
  5377  0013C0  D7FC               	goto	u1925
  5378  0013C2  5002               	movf	??_GPIO_PinRead+1,w,c
  5379  0013C4  1484               	andwf	3972,w,c	;volatile
  5380  0013C6                     L6:
  5381  0013C6  0900               	iorlw	0
  5382  0013C8  A4D8               	btfss	status,2,c
  5383  0013CA  D7EF               	goto	u1901
  5384  0013CC                     u1930:
  5385  0013CC  0E00               	movlw	0
  5386  0013CE  D7C4               	goto	u1820
  5387  0013D0                     l1931:
  5388  0013D0  5003               	movf	GPIO_PinRead@var_portNumber_u8,w,c
  5389                           
  5390                           ; Switch size 1, requested type "space"
  5391                           ; Number of cases is 5, Range of values is 0 to 4
  5392                           ; switch strategies available:
  5393                           ; Name         Instructions Cycles
  5394                           ; simple_byte           16     9 (average)
  5395                           ;	Chosen strategy is simple_byte
  5396  0013D2  0A00               	xorlw	0	; case 0
  5397  0013D4  B4D8               	btfsc	status,2,c
  5398  0013D6  D7B0               	goto	l1919
  5399  0013D8  0A01               	xorlw	1	; case 1
  5400  0013DA  B4D8               	btfsc	status,2,c
  5401  0013DC  D7BF               	goto	l1921
  5402  0013DE  0A03               	xorlw	3	; case 2
  5403  0013E0  B4D8               	btfsc	status,2,c
  5404  0013E2  D7C9               	goto	l1923
  5405  0013E4  0A01               	xorlw	1	; case 3
  5406  0013E6  B4D8               	btfsc	status,2,c
  5407  0013E8  D7D3               	goto	l1925
  5408  0013EA  0A07               	xorlw	7	; case 4
  5409  0013EC  B4D8               	btfsc	status,2,c
  5410  0013EE  D7DF               	goto	l1927
  5411  0013F0                     l1933:
  5412                           
  5413                           ;gpio.c: 230: return returnStatus;
  5414  0013F0  5004               	movf	GPIO_PinRead@returnStatus,w,c
  5415  0013F2  0012               	return	
  5416  0013F4                     __end_of_GPIO_PinRead:
  5417                           	opt stack 0
  5418                           tblptru	equ	0xFF8
  5419                           tblptrh	equ	0xFF7
  5420                           tblptrl	equ	0xFF6
  5421                           tablat	equ	0xFF5
  5422                           prodh	equ	0xFF4
  5423                           prodl	equ	0xFF3
  5424                           postinc0	equ	0xFEE
  5425                           wreg	equ	0xFE8
  5426                           postdec1	equ	0xFE5
  5427                           fsr1l	equ	0xFE1
  5428                           indf2	equ	0xFDF
  5429                           postinc2	equ	0xFDE
  5430                           postdec2	equ	0xFDD
  5431                           fsr2h	equ	0xFDA
  5432                           fsr2l	equ	0xFD9
  5433                           status	equ	0xFD8
  5434                           
  5435 ;; *************** function _GPIO_PinDirection *****************
  5436 ;; Defined at:
  5437 ;;		line 60 in file "../00-libfiles/gpio.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  enm_pinNumbe    1    wreg     enum E3211
  5440 ;;  var_pinDirn_    1    0[COMRAM] unsigned char 
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  5443 ;;  var_portNumb    1    3[COMRAM] unsigned char 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      void 
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5453 ;;      Params:         1       0       0       0       0       0       0
  5454 ;;      Locals:         2       0       0       0       0       0       0
  5455 ;;      Temps:          2       0       0       0       0       0       0
  5456 ;;      Totals:         5       0       0       0       0       0       0
  5457 ;;Total ram usage:        5 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; This function calls:
  5460 ;;		Nothing
  5461 ;; This function is called by:
  5462 ;;		_LCD_SetUp
  5463 ;;		_lcd_BusyCheck
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           	psect	text29
  5468  0011C2                     __ptext29:
  5469                           	opt stack 0
  5470  0011C2                     _GPIO_PinDirection:
  5471                           	opt stack 29
  5472                           
  5473                           ;incstack = 0
  5474                           ;GPIO_PinDirection@enm_pinNumber stored from wreg
  5475  0011C2  6E05               	movwf	GPIO_PinDirection@enm_pinNumber,c
  5476                           
  5477                           ;gpio.c: 63: uint8_t var_portNumber_u8;
  5478                           ;gpio.c: 66: var_portNumber_u8 = (enm_pinNumber>>3);
  5479  0011C4  3805               	swapf	GPIO_PinDirection@enm_pinNumber,w,c
  5480  0011C6  46E8               	rlncf	wreg,f,c
  5481  0011C8  0B1F               	andlw	31
  5482  0011CA  6E04               	movwf	GPIO_PinDirection@var_portNumber_u8,c
  5483                           
  5484                           ;gpio.c: 67: enm_pinNumber = enm_pinNumber & 0x07;
  5485  0011CC  5005               	movf	GPIO_PinDirection@enm_pinNumber,w,c
  5486  0011CE  0B07               	andlw	7
  5487  0011D0  6E05               	movwf	GPIO_PinDirection@enm_pinNumber,c
  5488                           
  5489                           ;gpio.c: 71: switch(var_portNumber_u8)
  5490  0011D2  D096               	goto	l1867
  5491  0011D4                     l1835:
  5492                           
  5493                           ;gpio.c: 75: ((var_pinDirn_u8)? ((TRISA) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISA) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5494  0011D4  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  5495  0011D6  B4D8               	btfsc	status,2,c
  5496  0011D8  D00D               	goto	l1839
  5497  0011DA  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5498  0011DE  0E01               	movlw	1
  5499  0011E0  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5500  0011E2  2A02               	incf	??_GPIO_PinDirection,f,c
  5501  0011E4  D002               	goto	u1504
  5502  0011E6                     u1505:
  5503  0011E6  90D8               	bcf	status,0,c
  5504  0011E8  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5505  0011EA                     u1504:
  5506  0011EA  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5507  0011EC  D7FC               	goto	u1505
  5508  0011EE  5003               	movf	??_GPIO_PinDirection+1,w,c
  5509  0011F0  1292               	iorwf	3986,f,c	;volatile
  5510  0011F2  0012               	return	
  5511  0011F4                     l1839:
  5512  0011F4  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5513  0011F8  0E01               	movlw	1
  5514  0011FA  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5515  0011FC  2A02               	incf	??_GPIO_PinDirection,f,c
  5516  0011FE  D002               	goto	u1514
  5517  001200                     u1515:
  5518  001200  90D8               	bcf	status,0,c
  5519  001202  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5520  001204                     u1514:
  5521  001204  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5522  001206  D7FC               	goto	u1515
  5523  001208  5003               	movf	??_GPIO_PinDirection+1,w,c
  5524  00120A  0AFF               	xorlw	255
  5525  00120C  1692               	andwf	3986,f,c	;volatile
  5526                           
  5527                           ;gpio.c: 76: break;
  5528  00120E  0012               	return	
  5529  001210                     l1841:
  5530                           
  5531                           ;gpio.c: 81: ((var_pinDirn_u8)? ((TRISB) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISB) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5532  001210  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  5533  001212  B4D8               	btfsc	status,2,c
  5534  001214  D00D               	goto	l1845
  5535  001216  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5536  00121A  0E01               	movlw	1
  5537  00121C  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5538  00121E  2A02               	incf	??_GPIO_PinDirection,f,c
  5539  001220  D002               	goto	u1534
  5540  001222                     u1535:
  5541  001222  90D8               	bcf	status,0,c
  5542  001224  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5543  001226                     u1534:
  5544  001226  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5545  001228  D7FC               	goto	u1535
  5546  00122A  5003               	movf	??_GPIO_PinDirection+1,w,c
  5547  00122C  1293               	iorwf	3987,f,c	;volatile
  5548  00122E  0012               	return	
  5549  001230                     l1845:
  5550  001230  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5551  001234  0E01               	movlw	1
  5552  001236  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5553  001238  2A02               	incf	??_GPIO_PinDirection,f,c
  5554  00123A  D002               	goto	u1544
  5555  00123C                     u1545:
  5556  00123C  90D8               	bcf	status,0,c
  5557  00123E  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5558  001240                     u1544:
  5559  001240  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5560  001242  D7FC               	goto	u1545
  5561  001244  5003               	movf	??_GPIO_PinDirection+1,w,c
  5562  001246  0AFF               	xorlw	255
  5563  001248  1693               	andwf	3987,f,c	;volatile
  5564                           
  5565                           ;gpio.c: 82: break;
  5566  00124A  0012               	return	
  5567  00124C                     l1847:
  5568                           
  5569                           ;gpio.c: 87: ((var_pinDirn_u8)? ((TRISC) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISC) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5570  00124C  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  5571  00124E  B4D8               	btfsc	status,2,c
  5572  001250  D00D               	goto	l1851
  5573  001252  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5574  001256  0E01               	movlw	1
  5575  001258  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5576  00125A  2A02               	incf	??_GPIO_PinDirection,f,c
  5577  00125C  D002               	goto	u1564
  5578  00125E                     u1565:
  5579  00125E  90D8               	bcf	status,0,c
  5580  001260  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5581  001262                     u1564:
  5582  001262  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5583  001264  D7FC               	goto	u1565
  5584  001266  5003               	movf	??_GPIO_PinDirection+1,w,c
  5585  001268  1294               	iorwf	3988,f,c	;volatile
  5586  00126A  0012               	return	
  5587  00126C                     l1851:
  5588  00126C  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5589  001270  0E01               	movlw	1
  5590  001272  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5591  001274  2A02               	incf	??_GPIO_PinDirection,f,c
  5592  001276  D002               	goto	u1574
  5593  001278                     u1575:
  5594  001278  90D8               	bcf	status,0,c
  5595  00127A  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5596  00127C                     u1574:
  5597  00127C  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5598  00127E  D7FC               	goto	u1575
  5599  001280  5003               	movf	??_GPIO_PinDirection+1,w,c
  5600  001282  0AFF               	xorlw	255
  5601  001284  1694               	andwf	3988,f,c	;volatile
  5602                           
  5603                           ;gpio.c: 88: break;
  5604  001286  0012               	return	
  5605  001288                     l1853:
  5606                           
  5607                           ;gpio.c: 93: ((var_pinDirn_u8)? ((TRISD) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISD) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5608  001288  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  5609  00128A  B4D8               	btfsc	status,2,c
  5610  00128C  D00D               	goto	l1857
  5611  00128E  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5612  001292  0E01               	movlw	1
  5613  001294  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5614  001296  2A02               	incf	??_GPIO_PinDirection,f,c
  5615  001298  D002               	goto	u1594
  5616  00129A                     u1595:
  5617  00129A  90D8               	bcf	status,0,c
  5618  00129C  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5619  00129E                     u1594:
  5620  00129E  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5621  0012A0  D7FC               	goto	u1595
  5622  0012A2  5003               	movf	??_GPIO_PinDirection+1,w,c
  5623  0012A4  1295               	iorwf	3989,f,c	;volatile
  5624  0012A6  0012               	return	
  5625  0012A8                     l1857:
  5626  0012A8  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5627  0012AC  0E01               	movlw	1
  5628  0012AE  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5629  0012B0  2A02               	incf	??_GPIO_PinDirection,f,c
  5630  0012B2  D002               	goto	u1604
  5631  0012B4                     u1605:
  5632  0012B4  90D8               	bcf	status,0,c
  5633  0012B6  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5634  0012B8                     u1604:
  5635  0012B8  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5636  0012BA  D7FC               	goto	u1605
  5637  0012BC  5003               	movf	??_GPIO_PinDirection+1,w,c
  5638  0012BE  0AFF               	xorlw	255
  5639  0012C0  1695               	andwf	3989,f,c	;volatile
  5640                           
  5641                           ;gpio.c: 94: break;
  5642  0012C2  0012               	return	
  5643  0012C4                     l1859:
  5644                           
  5645                           ;gpio.c: 98: ((var_pinDirn_u8)? ((TRISE) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISE) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  5646  0012C4  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  5647  0012C6  B4D8               	btfsc	status,2,c
  5648  0012C8  D00D               	goto	l1863
  5649  0012CA  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5650  0012CE  0E01               	movlw	1
  5651  0012D0  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5652  0012D2  2A02               	incf	??_GPIO_PinDirection,f,c
  5653  0012D4  D002               	goto	u1624
  5654  0012D6                     u1625:
  5655  0012D6  90D8               	bcf	status,0,c
  5656  0012D8  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5657  0012DA                     u1624:
  5658  0012DA  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5659  0012DC  D7FC               	goto	u1625
  5660  0012DE  5003               	movf	??_GPIO_PinDirection+1,w,c
  5661  0012E0  1296               	iorwf	3990,f,c	;volatile
  5662  0012E2  0012               	return	
  5663  0012E4                     l1863:
  5664  0012E4  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  5665  0012E8  0E01               	movlw	1
  5666  0012EA  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  5667  0012EC  2A02               	incf	??_GPIO_PinDirection,f,c
  5668  0012EE  D002               	goto	u1634
  5669  0012F0                     u1635:
  5670  0012F0  90D8               	bcf	status,0,c
  5671  0012F2  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  5672  0012F4                     u1634:
  5673  0012F4  2E02               	decfsz	??_GPIO_PinDirection,f,c
  5674  0012F6  D7FC               	goto	u1635
  5675  0012F8  5003               	movf	??_GPIO_PinDirection+1,w,c
  5676  0012FA  0AFF               	xorlw	255
  5677  0012FC  1696               	andwf	3990,f,c	;volatile
  5678                           
  5679                           ;gpio.c: 101: }
  5680                           
  5681                           ;gpio.c: 99: break;
  5682  0012FE  0012               	return	
  5683  001300                     l1867:
  5684  001300  5004               	movf	GPIO_PinDirection@var_portNumber_u8,w,c
  5685                           
  5686                           ; Switch size 1, requested type "space"
  5687                           ; Number of cases is 5, Range of values is 0 to 4
  5688                           ; switch strategies available:
  5689                           ; Name         Instructions Cycles
  5690                           ; simple_byte           16     9 (average)
  5691                           ;	Chosen strategy is simple_byte
  5692  001302  0A00               	xorlw	0	; case 0
  5693  001304  B4D8               	btfsc	status,2,c
  5694  001306  D766               	goto	l1835
  5695  001308  0A01               	xorlw	1	; case 1
  5696  00130A  B4D8               	btfsc	status,2,c
  5697  00130C  D781               	goto	l1841
  5698  00130E  0A03               	xorlw	3	; case 2
  5699  001310  B4D8               	btfsc	status,2,c
  5700  001312  D79C               	goto	l1847
  5701  001314  0A01               	xorlw	1	; case 3
  5702  001316  B4D8               	btfsc	status,2,c
  5703  001318  D7B7               	goto	l1853
  5704  00131A  0A07               	xorlw	7	; case 4
  5705  00131C  A4D8               	btfss	status,2,c
  5706  00131E  0012               	return	
  5707  001320  D7D1               	goto	l1859
  5708  001322                     __end_of_GPIO_PinDirection:
  5709                           	opt stack 0
  5710                           tblptru	equ	0xFF8
  5711                           tblptrh	equ	0xFF7
  5712                           tblptrl	equ	0xFF6
  5713                           tablat	equ	0xFF5
  5714                           prodh	equ	0xFF4
  5715                           prodl	equ	0xFF3
  5716                           postinc0	equ	0xFEE
  5717                           wreg	equ	0xFE8
  5718                           postdec1	equ	0xFE5
  5719                           fsr1l	equ	0xFE1
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _DELAY_ms *****************
  5728 ;; Defined at:
  5729 ;;		line 75 in file "../00-libfiles/delay.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  ms_count        2    2[COMRAM] unsigned int 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5743 ;;      Params:         2       0       0       0       0       0       0
  5744 ;;      Locals:         0       0       0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0
  5746 ;;      Totals:         2       0       0       0       0       0       0
  5747 ;;Total ram usage:        2 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    1
  5750 ;; This function calls:
  5751 ;;		_DELAY_us
  5752 ;; This function is called by:
  5753 ;;		_LCD_Init
  5754 ;;		_lcd_BusyCheck
  5755 ;;		_lcd_Reset
  5756 ;;		_LCD_ScrollMessage
  5757 ;;		_DELAY_sec
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text30
  5762  001B30                     __ptext30:
  5763                           	opt stack 0
  5764  001B30                     _DELAY_ms:
  5765                           	opt stack 24
  5766                           
  5767                           ;delay.c: 77: while (ms_count != 0)
  5768                           
  5769                           ;incstack = 0
  5770  001B30  D009               	goto	l1875
  5771  001B32                     l1871:
  5772                           
  5773                           ;delay.c: 78: {
  5774                           ;delay.c: 79: DELAY_us(350u);
  5775  001B32  0E01               	movlw	1
  5776  001B34  6E02               	movwf	DELAY_us@us_count+1,c
  5777  001B36  0E5E               	movlw	94
  5778  001B38  6E01               	movwf	DELAY_us@us_count,c
  5779  001B3A  ECA7  F00D         	call	_DELAY_us	;wreg free
  5780                           
  5781                           ;delay.c: 80: ms_count--;
  5782  001B3E  0603               	decf	DELAY_ms@ms_count,f,c
  5783  001B40  A0D8               	btfss	status,0,c
  5784  001B42  0604               	decf	DELAY_ms@ms_count+1,f,c
  5785  001B44                     l1875:
  5786  001B44  5003               	movf	DELAY_ms@ms_count,w,c
  5787  001B46  1004               	iorwf	DELAY_ms@ms_count+1,w,c
  5788  001B48  B4D8               	btfsc	status,2,c
  5789  001B4A  0012               	return	
  5790  001B4C  D7F2               	goto	l1871
  5791  001B4E                     __end_of_DELAY_ms:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           postinc0	equ	0xFEE
  5800                           wreg	equ	0xFE8
  5801                           postdec1	equ	0xFE5
  5802                           fsr1l	equ	0xFE1
  5803                           indf2	equ	0xFDF
  5804                           postinc2	equ	0xFDE
  5805                           postdec2	equ	0xFDD
  5806                           fsr2h	equ	0xFDA
  5807                           fsr2l	equ	0xFD9
  5808                           status	equ	0xFD8
  5809                           
  5810 ;; *************** function _DELAY_us *****************
  5811 ;; Defined at:
  5812 ;;		line 56 in file "../00-libfiles/delay.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  us_count        2    0[COMRAM] unsigned int 
  5815 ;; Auto vars:     Size  Location     Type
  5816 ;;		None
  5817 ;; Return value:  Size  Location     Type
  5818 ;;                  1    wreg      void 
  5819 ;; Registers used:
  5820 ;;		wreg, status,2, status,0
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5826 ;;      Params:         2       0       0       0       0       0       0
  5827 ;;      Locals:         0       0       0       0       0       0       0
  5828 ;;      Temps:          0       0       0       0       0       0       0
  5829 ;;      Totals:         2       0       0       0       0       0       0
  5830 ;;Total ram usage:        2 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; This function calls:
  5833 ;;		Nothing
  5834 ;; This function is called by:
  5835 ;;		_lcd_BusyCheck
  5836 ;;		_lcd_Reset
  5837 ;;		_lcd_SendCmdSignals
  5838 ;;		_lcd_SendDataSignals
  5839 ;;		_DELAY_ms
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text31
  5844  001B4E                     __ptext31:
  5845                           	opt stack 0
  5846  001B4E                     _DELAY_us:
  5847                           	opt stack 25
  5848                           
  5849                           ;delay.c: 58: while (us_count != 0)
  5850                           
  5851                           ;incstack = 0
  5852  001B4E  D003               	goto	l1831
  5853  001B50                     l1829:
  5854                           
  5855                           ;delay.c: 59: {
  5856                           ;delay.c: 60: us_count--;
  5857  001B50  0601               	decf	DELAY_us@us_count,f,c
  5858  001B52  A0D8               	btfss	status,0,c
  5859  001B54  0602               	decf	DELAY_us@us_count+1,f,c
  5860  001B56                     l1831:
  5861  001B56  5001               	movf	DELAY_us@us_count,w,c
  5862  001B58  1002               	iorwf	DELAY_us@us_count+1,w,c
  5863  001B5A  B4D8               	btfsc	status,2,c
  5864  001B5C  0012               	return	
  5865  001B5E  D7F8               	goto	l1829
  5866  001B60                     __end_of_DELAY_us:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           postinc0	equ	0xFEE
  5875                           wreg	equ	0xFE8
  5876                           postdec1	equ	0xFE5
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           postinc2	equ	0xFDE
  5880                           postdec2	equ	0xFDD
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           postdec1	equ	0xFE5
  5893                           fsr1l	equ	0xFE1
  5894                           indf2	equ	0xFDF
  5895                           postinc2	equ	0xFDE
  5896                           postdec2	equ	0xFDD
  5897                           fsr2h	equ	0xFDA
  5898                           fsr2l	equ	0xFD9
  5899                           status	equ	0xFD8
  5900                           
  5901                           	psect	rparam
  5902  0000                     tblptru	equ	0xFF8
  5903                           tblptrh	equ	0xFF7
  5904                           tblptrl	equ	0xFF6
  5905                           tablat	equ	0xFF5
  5906                           prodh	equ	0xFF4
  5907                           prodl	equ	0xFF3
  5908                           postinc0	equ	0xFEE
  5909                           wreg	equ	0xFE8
  5910                           postdec1	equ	0xFE5
  5911                           fsr1l	equ	0xFE1
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           fsr2h	equ	0xFDA
  5916                           fsr2l	equ	0xFD9
  5917                           status	equ	0xFD8


Data Sizes:
    Strings     80
    Constant    0
    Data        4
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    122     124
    BANK0           128      0      18
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCD_Printf@str	PTR unsigned char  size(2) Largest target is 50
		 -> main@str(COMRAM[50]), 

    LCD_Printf@argList	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_3(CODE[16]), 

    LCD_Printf@ptr	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_3(CODE[16]), 

    LCD_Printf@argp	PTR void [1] size(2) Largest target is 1
		 -> ?_LCD_Printf(COMRAM[1]), 

    LCD_DisplayString@ptr_stringPointer_u8	PTR const unsigned char  size(2) Largest target is 50
		 -> main@str(COMRAM[50]), STR_1(CODE[32]), 

    UART_Printf@str	PTR unsigned char  size(2) Largest target is 50
		 -> main@str(COMRAM[50]), 

    UART_Printf@argList	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_2(CODE[32]), 

    UART_Printf@ptr	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_2(CODE[32]), 

    UART_Printf@argp	PTR void [1] size(2) Largest target is 1
		 -> ?_UART_Printf(COMRAM[1]), 

    UART_RxString@ptr_string	PTR unsigned char  size(2) Largest target is 50
		 -> main@str(COMRAM[50]), 

    UART_TxString@ptr_string	PTR const unsigned char  size(2) Largest target is 50
		 -> main@str(COMRAM[50]), 


Critical Paths under _main in COMRAM

    _main->_LCD_Printf
    _main->_UART_Printf
    _UART_RxString->_UART_TxChar
    _UART_Printf->_UART_TxNumber
    _UART_TxString->_UART_TxChar
    _UART_TxNumber->___lldiv
    _UART_Init->_UART_SetBaudRate
    _UART_SetBaudRate->___lldiv
    _LCD_SetUp->_GPIO_PinDirection
    _LCD_Printf->_LCD_DisplayNumber
    _LCD_DisplayString->_LCD_DisplayChar
    _LCD_DisplayNumber->___lldiv
    _LCD_DisplayChar->_lcd_DataWrite
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_DataWrite->_lcd_SendHigherNibble
    _lcd_DataWrite->_lcd_SendLowerNibble
    _lcd_SendDataSignals->_GPIO_PinWrite
    _LCD_GoToNextLine->_LCD_CmdWrite
    _lcd_Reset->_lcd_SendHigherNibble
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _LCD_CmdWrite->_lcd_SendHigherNibble
    _LCD_CmdWrite->_lcd_SendLowerNibble
    _lcd_SendLowerNibble->_GPIO_PinWrite
    _lcd_SendHigherNibble->_GPIO_PinWrite
    _lcd_SendCmdSignals->_GPIO_PinWrite
    _lcd_BusyCheck->_GPIO_PinDirection
    _lcd_BusyCheck->_GPIO_PinRead
    _lcd_BusyCheck->_GPIO_PinWrite
    _DELAY_ms->_DELAY_us

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                53    53      0  165997
                                             69 COMRAM    53    53      0
                          _LCD_Clear
                  _LCD_DisplayString
                           _LCD_Init
                         _LCD_Printf
                          _LCD_SetUp
                          _UART_Init
                        _UART_Printf
                      _UART_RxString
 ---------------------------------------------------------------------------------
 (1) _UART_RxString                                        4     2      2     332
                                              1 COMRAM     4     2      2
                        _UART_RxChar
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Printf                                         26    20      6    3810
                                             43 COMRAM    26    20      6
                        _UART_TxChar
                      _UART_TxNumber
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (2) _UART_TxString                                        2     0      2     131
                                              1 COMRAM     2     0      2
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxNumber                                       30    25      5    2502
                                             13 COMRAM    30    25      5
                        _UART_TxChar
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4    1042
                                             22 COMRAM     4     0      4
                   _UART_SetBaudRate
 ---------------------------------------------------------------------------------
 (2) _UART_SetBaudRate                                     9     5      4     956
                                             13 COMRAM     9     5      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _LCD_SetUp                                           11     1     10    2442
                                              5 COMRAM    11     1     10
                  _GPIO_PinDirection
 ---------------------------------------------------------------------------------
 (1) _LCD_Printf                                          26    20      6   71686
                                             43 COMRAM    26    20      6
                    _LCD_DisplayChar
                  _LCD_DisplayNumber
                  _LCD_DisplayString
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayString                                    2     0      2   22799
                                              8 COMRAM     2     0      2
                    _LCD_DisplayChar
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayNumber                                   30    25      5   25106
                                             13 COMRAM    30    25      5
                    _LCD_DisplayChar
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _LCD_DisplayChar                                      1     1      0   22626
                                              7 COMRAM     1     1      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_DataWrite                                        1     1      0   11280
                                              6 COMRAM     1     1      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendDataSignals                                  0     0      0    2469
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToNextLine                                     0     0      0   11280
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     1      1   41118
                                              8 COMRAM     2     1      1
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (2) _lcd_Reset                                            0     0      0    6032
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0   22626
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToLine                                         1     1      0   11346
                                              7 COMRAM     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (5) _LCD_CmdWrite                                         1     1      0   11280
                                              6 COMRAM     1     1      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendLowerNibble                                  1     1      0    1894
                                              5 COMRAM     1     1      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (5) _lcd_SendHigherNibble                                 1     1      0    1894
                                              5 COMRAM     1     1      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (6) _lcd_SendCmdSignals                                   0     0      0    2469
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (5) _lcd_BusyCheck                                        1     1      0    4934
                                              5 COMRAM     1     1      0
                           _DELAY_ms
                           _DELAY_us
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (6) _GPIO_PinWrite                                        5     4      1    1806
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (6) _GPIO_PinRead                                         5     5      0     206
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinDirection                                    5     4      1    1230
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (6) _DELAY_ms                                             2     0      2    1006
                                              2 COMRAM     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (6) _DELAY_us                                             2     0      2     663
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _GPIO_PinDirection
         _GPIO_PinRead
         _GPIO_PinWrite
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
       _lcd_SendLowerNibble
         _GPIO_PinWrite
     _LCD_GoToLine
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
   _LCD_DisplayString
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendDataSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
   _LCD_Init
     _DELAY_ms
       _DELAY_us
     _LCD_Clear
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
       _LCD_GoToLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _GPIO_PinDirection
         _GPIO_PinRead
         _GPIO_PinWrite
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
       _lcd_SendLowerNibble
         _GPIO_PinWrite
     _lcd_Reset
       _DELAY_ms
         _DELAY_us
       _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
   _LCD_Printf
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendDataSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
     _LCD_DisplayNumber
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       ___lldiv
     _LCD_DisplayString
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
   _LCD_SetUp
     _GPIO_PinDirection
   _UART_Init
     _UART_SetBaudRate
       ___lldiv
   _UART_Printf
     _UART_TxChar
     _UART_TxNumber
       _UART_TxChar
       ___lldiv
     _UART_TxString
       _UART_TxChar
   _UART_RxString
     _UART_RxChar
     _UART_TxChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      12       5       14.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7A      7C       1       97.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8E      15        0.0%
DATA                 0      0      8E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Aug 13 19:45:58 2016

                             ?_LCD_CmdWrite 0001                                          l33 1B7C  
                                        l39 1B62                                          l92 06CA  
                               ?_LCD_Printf 002C                               ?_LCD_GoToLine 0001  
                               __CFG_BORV$2 000000                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                 __CFG_OSC$HS 000000  
                                       l254 0A02                                         l176 17EC  
                                       l293 14E4                                         l803 16AA  
                              __CFG_CPB$OFF 000000                                __CFG_CPD$OFF 000000  
                                       prod 000FF3                                         wreg 000FE8  
                   __end_of_LCD_DisplayChar 1AEA                                __CFG_LVP$OFF 000000  
                              __CFG_WDT$OFF 000000                                        l2013 1AD4  
                                      l2031 166C                                        l2103 0E50  
                                      l2027 165C                                        l2131 0EA2  
                                      l2123 1924                                        l2203 1792  
                                      l2029 1668                                        l2109 0E8A  
                                      l2039 169C                                        l2151 0FA0  
                                      l2143 0F24                                        l2119 18FC  
                                      l2055 1AEC                                        l2223 069E  
                                      l2145 0F2A                                        l2161 0FC4  
                                      l2137 0F08                                        l2049 1728  
                                      l2081 0D5A                                        l2073 0D38  
                                      l2313 0906                                        l2305 08C4  
                                      l2321 0972                                        l2233 06CE  
                                      l2209 0664                                        l2163 0FCE  
                                      l2139 0F10                                        l2403 099C  
                                      l2067 0CD2                                        l2075 0D40  
                                      l2059 1AFE                                        l2307 08E0  
                                      l2251 0732                                        l2323 0976  
                                      l2157 0FAE                                        l2173 105A  
                                      l2501 0C18                                        l2093 0DDE  
                                      l2261 076C                                        l2317 090E  
                                      l2229 06BC                                        l2181 1736  
                                      l2167 1020                                        l2159 0FC2  
                                      l2511 0C46                                        l2423 09F4  
                                      l2095 0DF2                                        l2087 0DD0  
                                      l2079 0D54                                        l2263 0788  
                                      l2239 06EA                                        l2319 096C  
                                      l2433 0A22                                        l2417 09D6  
                                      l2513 0CA4                                        l2097 0DF4  
                                      l2281 0824                                        l2249 0714  
                                      l2193 1768                                        l2507 0C3E  
                                      l2443 0A4C                                        l2515 0CAA  
                                      l2427 0A06                                        l2355 143A  
                                      l2099 0DFE                                        l2275 07F4  
                                      l1901 1148                                        l2445 0A6A  
                                      l2517 0CAE                                        l2357 1442  
                                      l2269 07B8                                        l2189 1752  
                                      l1831 1B56                                        l1903 1164  
                                      l1911 11A0                                        l2463 0AF0  
                                      l2455 0AA4                                        l2367 1470  
                                      l2295 0882                                        l2287 0860  
                                      l2199 177A                                        l1841 1210  
                                      l1921 135C                                        l2481 0B98  
                                      l2457 0AC0                                        l2297 089A  
                                      l1851 126C                                        l1835 11D4  
                                      l1923 1376                                        l1931 13D0  
                                      l1907 1184                                        l2395 17D8  
                                      l2491 0BD2                                        l2475 0B5C  
                                      l2571 15DA                                        l1829 1B50  
                                      l1853 1288                                        l1845 1230  
                                      l1925 1390                                        l1933 13F0  
                                      l2389 17BA                                        l2469 0B2C  
                                      l1871 1B32                                        l1863 12E4  
                                      l1847 124C                                        l1839 11F4  
                                      l1927 13AE                                        l1919 1338  
                                      l1857 12A8                                        l1945 1558  
                                      l2489 0BBA                                        l1875 1B44  
                                      l1859 12C4                                        l1867 1300  
                                      l1891 10EC                                        l1883 1094  
                                      l1963 1A4E                                        l2499 0BFC  
                                      l1885 10B0                                        l1949 156C  
                                      l1981 1A7E                                        l1895 110C  
                                      l1879 1074                                        l1967 1A5E  
                                      l1897 1128                                        l1889 10D0  
                                      l1993 1A2A                                        l1989 1A1A  
                                      STR_1 0621                                        STR_2 0601  
                                      STR_3 0641                                        u2000 1870  
                                      u2010 1872                                        u2100 18D8  
                                      u2020 1884                                        u2110 18DA  
                                      u2030 1886                                        u2120 18EC  
                                      u2040 1898                                        u2130 18EE  
                                      u2050 189A                                        u2060 18B0  
                                      _LATA 000F89                                        u2070 18B2  
                                      u2310 0D2A                                        _LATB 000F8A  
                                      _LATC 000F8B                                        u1504 11EA  
                                      u2080 18C4                                        u2320 0D2C  
                                      u2304 0CEC                                        _LATD 000F8C  
                                      u1505 11E6                                        u2305 0CE6  
                                      _LATE 000F8D                                        u1514 1204  
                                      u2090 18C6                                        u2410 191C  
                                      u2250 16CE                                        u1515 1200  
                                      u1604 12B8                                        u2420 1944  
                                      u1605 12B4                                        u1534 1226  
                                      u1535 1222                                        u1624 12DA  
                                      u1544 1240                                        u1704 10E0  
                                      u1625 12D6                                        u1545 123C  
                                      u1705 10DC                                        u2417 1912  
                                      u1634 12F4                                        u1635 12F0  
                                      u2427 193A                                        u2275 1702  
                                      u1564 1262                                        u1820 1358  
                                      u1804 1348                                        u1724 1102  
                                      u2460 0EFA                                        u1565 125E  
                                      u1901 13AA                                        u1805 1344  
                                      u1725 10FE                                        u1574 127C  
                                      u1734 111C                                        u2470 0EFC  
                                      u2454 0EBC                                        u1575 1278  
                                      u1735 1118                                        u2455 0EB6  
                                      u1664 108A                                        u1665 1086  
                                      u1594 129E                                        u1930 13CC  
                                      u1834 136C                                        u1754 113E  
                                      u1674 10A4                                        u1595 129A  
                                      u1835 1368                                        u1755 113A  
                                      u1675 10A0                                        u1924 13BE  
                                      u1764 1158                                        u1925 13BA  
                                      u1765 1154                                        u1694 10C6  
                                      u1695 10C2                                        u1864 1386  
                                      u1784 117A                                        u1865 1382  
                                      u1785 1176                                        u1794 1194  
                                      u2930 15FC                                        u1795 1190  
                                      u1980 185C                                        u1894 13A0  
                                      u1990 185E                                        u1895 139C  
                                      _RCIF 007CF5                                        _TXIF 007CF4  
                                      _main 157A                          __size_of_LCD_Clear 000E  
                                      fsr2h 000FDA                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                        __size_of_LCD_SetUp 00C4                                        prodh 000FF4  
                                      prodl 000FF3                                        start 0000  
                             __CFG_IESO$OFF 000000                            __end_of_DELAY_ms 1B4E  
                          __end_of_DELAY_us 1B60                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000010                               ?_GPIO_PinRead 0001  
                            ??_LCD_CmdWrite 0007                                 LCD_SetUp@D0 0008  
                               LCD_SetUp@D1 0009                                 LCD_SetUp@D2 000A  
                               LCD_SetUp@D3 000B                                 LCD_SetUp@D4 000C  
                               LCD_SetUp@D5 000D                                 LCD_SetUp@D6 000E  
                               LCD_SetUp@D7 000F                                 LCD_SetUp@EN 0007  
                               LCD_SetUp@RS 0010                                 LCD_SetUp@RW 0006  
                            ??_LCD_GoToLine 0008                               _GPIO_PinWrite 1062  
                          __end_of_LCD_Init 17F8                     UART_RxString@ptr_string 0002  
          LCD_Printf@v_numOfDigitsToDisp_u8 0043                     LCD_CmdWrite@v_lcdCmd_u8 0007  
                                     ?_main 0001                             __end_of___lldiv 16BC  
                     _LCD_DisplayNumber$270 0028                                       _RCREG 000FAE  
                                     _RCSTA 000FAB                                       _SPBRG 000FAF  
                                     _PORTA 000F80                                       _PORTB 000F81  
                                     _PORTC 000F82                                       _PORTD 000F83  
                                     _PORTE 000F84                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                                     _TXREG 000FAD                                       _TXSTA 000FAC  
                             __CFG_PWRT$OFF 000000                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                        __size_of_UART_Init 0022                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                            __CFG_EBTRB$OFF 000000       LCD_DisplayString@ptr_stringPointer_u8 0009  
                            __CFG_BOREN$OFF 000000                                       tablat 000FF5  
              __end_of_lcd_SendHigherNibble 18FA                         __size_of_LCD_Printf 0338  
                                     status 000FD8                              ??_GPIO_PinRead 0001  
                           __initialization 19C8                  GPIO_PinWrite@enm_pinNumber 0005  
                              __end_of_main 163A                              ?_GPIO_PinWrite 0001  
                         _GPIO_PinDirection 11C2                                      ??_main 0046  
               __size_of_lcd_SendCmdSignals 003E                           __end_of_LCD_Clear 1B7C  
                             __activetblptr 000002                          ?_GPIO_PinDirection 0001  
                         __end_of_LCD_SetUp 14B8                            ?_LCD_DisplayChar 0001  
               LCD_DisplayChar@v_lcdData_u8 0008                                LCD_Printf@ch 0042  
                       ??_GPIO_PinDirection 0002                           ?_UART_SetBaudRate 000E  
                     lcd_BusyCheck@busyflag 0006                          ??_UART_SetBaudRate 0012  
                              ?_UART_RxChar 0001                                ?_UART_TxChar 0001  
                              ?_UART_Printf 002C                              __CFG_XINST$OFF 000000  
                 GPIO_PinRead@enm_pinNumber 0005                           __end_of_UART_Init 1B30  
                                 ??___lldiv 0009                   __end_of_GPIO_PinDirection 1322  
                                    clear_0 19CE              GPIO_PinDirection@enm_pinNumber 0005  
                          DELAY_ms@ms_count 0003     UART_TxNumber@v_numOfDigitsToTransmit_u8 0012  
                              __mediumconst 0000                           ?_LCD_GoToNextLine 0001  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                   ?_DELAY_ms 0003  
                                 ?_DELAY_us 0001                 __end_of_lcd_SendLowerNibble 18A6  
                        ??_LCD_GoToNextLine 0008                        __end_of_LCD_CmdWrite 1A6A  
                      __end_of_LCD_GoToLine 1AC2                 lcd_SendLowerNibble@dataByte 0006  
                                __accesstop 0080                     __end_of__initialization 19F8  
                                 ?_LCD_Init 0009                             __CFG_PBADEN$OFF 000000  
                     __end_of_UART_RxString 1796                       __end_of_UART_TxNumber 0E92  
                             ___rparam_used 000001                       __end_of_UART_TxString 1B0E  
                           ??_GPIO_PinWrite 0002                              __pcstackCOMRAM 0001  
                              __pidataBANK0 1B86                       __end_of_lcd_DataWrite 1A36  
                              ??_LCD_Printf 0032                        _lcd_SendHigherNibble 18A6  
                       LCD_Printf@v_num_s16 0038                         LCD_Printf@v_num_s32 0034  
                       LCD_Printf@v_num_u16 003E                         LCD_Printf@v_num_u32 003A  
                        __size_of_lcd_Reset 005A                __size_of_lcd_SendDataSignals 003E  
                                ??_DELAY_ms 0005                                  ??_DELAY_us 0003  
                      __end_of_GPIO_PinRead 13F4              GPIO_PinWrite@var_portNumber_u8 0004  
                                __pbssBANK0 0080                       __end_of_lcd_BusyCheck 157A  
              lcd_SendHigherNibble@dataByte 0006                GPIO_PinWrite@var_pinValue_u8 0001  
                                ??_LCD_Init 000A                          __end_of_LCD_Printf 0CC2  
                __size_of_GPIO_PinDirection 0160                               LCD_Printf@ptr 0040  
                             LCD_Printf@str 0032                       ?_lcd_SendHigherNibble 0001  
                          DELAY_us@us_count 0001                                     __Hparam 0000  
                         __end_of_lcd_Reset 1852                                     __Lparam 0000  
                      __size_of_UART_RxChar 000A                        __size_of_UART_TxChar 000E  
                      __size_of_UART_Printf 0338                   LCD_Init@v_lcdNoOfLines_u8 000A  
                                   ___lldiv 163A                                __psmallconst 0600  
                           __CFG_STVREN$OFF 000000                                     __pcinit 19C8  
                                   __ramtop 0600                          LCD_DisplayNumber@a 001E  
                        LCD_DisplayNumber@i 002B                                     __ptext0 157A  
                                   __ptext1 1732                                     __ptext2 1B7C  
                                   __ptext3 0652                                     __ptext4 1AEA  
                                   __ptext5 0CC2                                     __ptext6 1B60  
                                   __ptext7 1B0E                                     __ptext8 16BC  
                                   __ptext9 13F4                       __size_of_LCD_CmdWrite 0034  
                                 _LCDConfig 0080                       __size_of_LCD_GoToLine 002C  
                                 _LCD_Clear 1B6E                              UART_Printf@ptr 0040  
                            UART_Printf@str 0032                                   _LCD_SetUp 13F4  
                                   main@len 0079                                     main@str 0047  
                      end_of_initialization 19F8                              UART_TxNumber@a 001E  
                            UART_TxNumber@i 002B                LCD_Init@v_MaxCharsPerLine_u8 0009  
                             __Lmediumconst 0000                             ___lldiv@divisor 0005  
                           ___lldiv@counter 000D              UART_SetBaudRate@v_baudRate_u32 000E  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc2 000FDE  
                    ??_lcd_SendHigherNibble 0006                  __end_of_lcd_SendCmdSignals 19C8  
                              _LCD_CmdWrite 1A36                                   _UART_Init 1B0E  
                 __size_of_UART_SetBaudRate 0076                                _LCD_GoToLine 1A96  
                     __size_of_GPIO_PinRead 00D2                                  ?_LCD_Clear 0001  
                                ?_LCD_SetUp 0006                           __size_of_DELAY_ms 001E  
                         __size_of_DELAY_us 0012                    __size_of_LCD_DisplayChar 0028  
                         __size_of_LCD_Init 0062                   __size_of_LCD_GoToNextLine 002C  
                       _lcd_SendDataSignals 194C             UART_TxNumber@v_numericSystem_u8 002A  
        GPIO_PinDirection@var_portNumber_u8 0004                                _GPIO_PinRead 1322  
                                ?_UART_Init 0017                           LCD_Printf@argList 002C  
                  _ARR_LcdLineNumAddress_U8 008E                         start_initialization 19C8  
                      ?_lcd_SendDataSignals 0001                      _v_LcdTrackCursorPos_U8 007B  
             GPIO_PinRead@var_portNumber_u8 0003                __size_of_lcd_SendLowerNibble 0054  
           GPIO_PinDirection@var_pinDirn_u8 0001                       __end_of_GPIO_PinWrite 11C2  
                               __pdataBANK0 008E                            __CFG_LPT1OSC$OFF 000000  
                    __size_of_UART_RxString 0064                       ??_lcd_SendDataSignals 0006  
                      _v_LcdTrackLineNum_U8 007C                      __size_of_UART_TxNumber 01D0  
                               __pbssCOMRAM 007B                       lcd_DataWrite@dataByte 0007  
                    __size_of_UART_TxString 0024                                 ??_LCD_Clear 0009  
                               ??_LCD_SetUp 0010                      __size_of_lcd_DataWrite 0034  
               LCD_GoToLine@v_lineNumber_u8 0008                           __CFG_CCP2MX$PORTC 000000  
                                  ?___lldiv 0001                                   _lcd_Reset 17F8  
                         ??_LCD_DisplayChar 0008                                 ??_UART_Init 001B  
                          _UART_SetBaudRate 16BC                      __size_of_lcd_BusyCheck 00C2  
                               __smallconst 0600                           _LCD_DisplayNumber 0E92  
                            LCD_Printf@argp 0044                           _LCD_DisplayString 18FA  
                                  _DELAY_ms 1B30                                    _DELAY_us 1B4E  
                        ?_LCD_DisplayNumber 000E                          ?_LCD_DisplayString 0009  
                       ??_LCD_DisplayNumber 0013                               UART_Printf@ch 0042  
                                  _LCD_Init 1796                         ??_LCD_DisplayString 000B  
                             ??_UART_RxChar 0001                               _UART_RxString 1732  
                             ??_UART_TxChar 0001                               _UART_TxNumber 0CC2  
                          _LCD_GoToNextLine 1A6A                               ??_UART_Printf 0032  
                             _UART_TxString 1AEA                            __CFG_WDTPS$32768 000000  
                   UART_Init@v_baudRate_u32 0017                                  ?_lcd_Reset 0001  
                             _lcd_DataWrite 1A02                     UART_TxString@ptr_string 0002  
                  GPIO_PinRead@returnStatus 0004                   __end_of_LCD_DisplayNumber 1062  
                 __end_of_LCD_DisplayString 194C                          _lcd_SendCmdSignals 198A  
                          UART_RxString@len 0004                                   copy_data0 19EC  
                             _lcd_BusyCheck 14B8                         ?_lcd_SendCmdSignals 0001  
                 UART_TxNumber@v_number_u32 000E                              ?_UART_RxString 0002  
                            ?_UART_TxNumber 000E                              ?_UART_TxString 0002  
                                  __Hrparam 0000                    UART_TxChar@v_uartData_u8 0001  
                                  __Lrparam 0000                            _UART_TxNumber$65 0028  
                            ?_lcd_DataWrite 0001                         __end_of_UART_RxChar 1B86  
                       __end_of_UART_TxChar 1B6E                            __size_of___lldiv 0082  
                       __end_of_UART_Printf 098A                        ??_lcd_SendCmdSignals 0006  
             __size_of_lcd_SendHigherNibble 0054                         _lcd_SendLowerNibble 1852  
                                  __ptext10 098A                                    __ptext11 18FA  
                                  __ptext20 1B6E                                    __ptext12 0E92  
                                  __ptext21 1A96                                    __ptext13 163A  
                                  __ptext30 1B30                                    __ptext22 1A36  
                                  __ptext14 1AC2                                    __ptext31 1B4E  
                                  __ptext23 1852                                    __ptext15 1A02  
                                  __ptext24 18A6                                    __ptext16 194C  
                                  __ptext25 198A                                    __ptext17 1A6A  
                                  __ptext26 14B8                                    __ptext18 1796  
                                  __ptext27 1062                                    __ptext19 17F8  
                                  __ptext28 1322                                    __ptext29 11C2  
                            ?_lcd_BusyCheck 0001         LCD_DisplayNumber@v_numericSystem_u8 002A  
                             __size_of_main 00C0                        ?_lcd_SendLowerNibble 0001  
                           UART_Printf@argp 0044                                 ??_lcd_Reset 0007  
                  UART_SetBaudRate@RegValue 0016                                  _LCD_Printf 098A  
                __size_of_LCD_DisplayNumber 01D0                             UART_RxString@ch 0005  
                __size_of_LCD_DisplayString 0052                             ??_UART_RxString 0004  
                           ??_UART_TxNumber 0013                    __end_of_UART_SetBaudRate 1732  
                           ??_UART_TxString 0004                       ??_lcd_SendLowerNibble 0006  
                          ___lldiv@dividend 0001                             _LCD_DisplayChar 1AC2  
                               _UART_RxChar 1B7C                                 _UART_TxChar 1B60  
                               _UART_Printf 0652                             ??_lcd_DataWrite 0007  
               __end_of_lcd_SendDataSignals 198A                            ___lldiv@quotient 0009  
                  __end_of_LCD_GoToNextLine 1A96  LCD_DisplayNumber@v_numOfDigitsToDisplay_u8 0012  
                           ??_lcd_BusyCheck 0006                      __size_of_GPIO_PinWrite 0160  
     UART_Printf@v_numOfDigitsToTransmit_u8 0043                          UART_Printf@argList 002C  
             LCD_DisplayNumber@v_number_u32 000E                        UART_Printf@v_num_s16 0038  
                      UART_Printf@v_num_s32 0034                        UART_Printf@v_num_u16 003E  
                      UART_Printf@v_num_u32 003A  
