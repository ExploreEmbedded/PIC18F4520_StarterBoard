

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Tue Aug 09 09:57:45 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	idataCOMRAM
    53  0068E0                     __pidataCOMRAM:
    54                           	opt stack 0
    55                           
    56                           ;initializer for _ARR_LcdLineNumAddress_U8
    57  0068E0  80                 	db	128
    58  0068E1  C0                 	db	192
    59  0068E2  90                 	db	144
    60  0068E3  D0                 	db	208
    61  0000                     _ADCON0	set	4034
    62  0000                     _ADCON1	set	4033
    63  0000                     _ADCON2	set	4032
    64  0000                     _ADRESH	set	4036
    65  0000                     _ADRESL	set	4035
    66  0000                     _EEADR	set	4009
    67  0000                     _EECON1	set	4006
    68  0000                     _EECON2	set	4007
    69  0000                     _EEDATA	set	4008
    70  0000                     _LATA	set	3977
    71  0000                     _LATB	set	3978
    72  0000                     _LATC	set	3979
    73  0000                     _LATD	set	3980
    74  0000                     _LATE	set	3981
    75  0000                     _PORTA	set	3968
    76  0000                     _PORTB	set	3969
    77  0000                     _PORTC	set	3970
    78  0000                     _PORTD	set	3971
    79  0000                     _PORTE	set	3972
    80  0000                     _RCREG	set	4014
    81  0000                     _RCSTA	set	4011
    82  0000                     _SPBRG	set	4015
    83  0000                     _TRISA	set	3986
    84  0000                     _TRISB	set	3987
    85  0000                     _TRISC	set	3988
    86  0000                     _TRISD	set	3989
    87  0000                     _TRISE	set	3990
    88  0000                     _TXREG	set	4013
    89  0000                     _TXSTA	set	4012
    90  0000                     _ADON	set	32272
    91  0000                     _GIE	set	32663
    92  0000                     _GO	set	32273
    93  0000                     _GO_DONE	set	32273
    94  0000                     _RCIF	set	31989
    95  0000                     _TXIF	set	31988
    96                           
    97                           	psect	mediumconst
    98  007AAE                     __pmediumconst:
    99                           	opt stack 0
   100  007AAE  00                 	db	0
   101  007AAF                     STR_1:
   102  007AAF  0A                 	db	10
   103  007AB0  0D                 	db	13
   104  007AB1  0A                 	db	10
   105  007AB2  0D                 	db	13
   106  007AB3  53                 	db	83	;'S'
   107  007AB4  74                 	db	116	;'t'
   108  007AB5  61                 	db	97	;'a'
   109  007AB6  72                 	db	114	;'r'
   110  007AB7  74                 	db	116	;'t'
   111  007AB8  65                 	db	101	;'e'
   112  007AB9  72                 	db	114	;'r'
   113  007ABA  20                 	db	32
   114  007ABB  50                 	db	80	;'P'
   115  007ABC  49                 	db	73	;'I'
   116  007ABD  43                 	db	67	;'C'
   117  007ABE  20                 	db	32
   118  007ABF  74                 	db	116	;'t'
   119  007AC0  65                 	db	101	;'e'
   120  007AC1  73                 	db	115	;'s'
   121  007AC2  74                 	db	116	;'t'
   122  007AC3  20                 	db	32
   123  007AC4  4D                 	db	77	;'M'
   124  007AC5  65                 	db	101	;'e'
   125  007AC6  6E                 	db	110	;'n'
   126  007AC7  75                 	db	117	;'u'
   127  007AC8  0A                 	db	10
   128  007AC9  0D                 	db	13
   129  007ACA  20                 	db	32
   130  007ACB  31                 	db	49	;'1'
   131  007ACC  2E                 	db	46
   132  007ACD  4C                 	db	76	;'L'
   133  007ACE  65                 	db	101	;'e'
   134  007ACF  64                 	db	100	;'d'
   135  007AD0  20                 	db	32
   136  007AD1  74                 	db	116	;'t'
   137  007AD2  65                 	db	101	;'e'
   138  007AD3  73                 	db	115	;'s'
   139  007AD4  74                 	db	116	;'t'
   140  007AD5  0A                 	db	10
   141  007AD6  0D                 	db	13
   142  007AD7  20                 	db	32
   143  007AD8  32                 	db	50	;'2'
   144  007AD9  2E                 	db	46
   145  007ADA  4C                 	db	76	;'L'
   146  007ADB  63                 	db	99	;'c'
   147  007ADC  64                 	db	100	;'d'
   148  007ADD  20                 	db	32
   149  007ADE  74                 	db	116	;'t'
   150  007ADF  65                 	db	101	;'e'
   151  007AE0  73                 	db	115	;'s'
   152  007AE1  74                 	db	116	;'t'
   153  007AE2  0A                 	db	10
   154  007AE3  0D                 	db	13
   155  007AE4  20                 	db	32
   156  007AE5  33                 	db	51	;'3'
   157  007AE6  2E                 	db	46
   158  007AE7  53                 	db	83	;'S'
   159  007AE8  77                 	db	119	;'w'
   160  007AE9  69                 	db	105	;'i'
   161  007AEA  74                 	db	116	;'t'
   162  007AEB  63                 	db	99	;'c'
   163  007AEC  68                 	db	104	;'h'
   164  007AED  20                 	db	32
   165  007AEE  74                 	db	116	;'t'
   166  007AEF  65                 	db	101	;'e'
   167  007AF0  73                 	db	115	;'s'
   168  007AF1  74                 	db	116	;'t'
   169  007AF2  0A                 	db	10
   170  007AF3  0D                 	db	13
   171  007AF4  20                 	db	32
   172  007AF5  34                 	db	52	;'4'
   173  007AF6  2E                 	db	46
   174  007AF7  41                 	db	65	;'A'
   175  007AF8  64                 	db	100	;'d'
   176  007AF9  63                 	db	99	;'c'
   177  007AFA  20                 	db	32
   178  007AFB  54                 	db	84	;'T'
   179  007AFC  65                 	db	101	;'e'
   180  007AFD  73                 	db	115	;'s'
   181  007AFE  74                 	db	116	;'t'
   182  007AFF  0A                 	db	10
   183  007B00  0D                 	db	13
   184  007B01  20                 	db	32
   185  007B02  35                 	db	53	;'5'
   186  007B03  2E                 	db	46
   187  007B04  45                 	db	69	;'E'
   188  007B05  65                 	db	101	;'e'
   189  007B06  70                 	db	112	;'p'
   190  007B07  72                 	db	114	;'r'
   191  007B08  6F                 	db	111	;'o'
   192  007B09  6D                 	db	109	;'m'
   193  007B0A  20                 	db	32
   194  007B0B  54                 	db	84	;'T'
   195  007B0C  65                 	db	101	;'e'
   196  007B0D  73                 	db	115	;'s'
   197  007B0E  74                 	db	116	;'t'
   198  007B0F  20                 	db	32
   199  007B10  0A                 	db	10
   200  007B11  0D                 	db	13
   201  007B12  53                 	db	83	;'S'
   202  007B13  65                 	db	101	;'e'
   203  007B14  6C                 	db	108	;'l'
   204  007B15  65                 	db	101	;'e'
   205  007B16  63                 	db	99	;'c'
   206  007B17  74                 	db	116	;'t'
   207  007B18  20                 	db	32
   208  007B19  4F                 	db	79	;'O'
   209  007B1A  6E                 	db	110	;'n'
   210  007B1B  65                 	db	101	;'e'
   211  007B1C  20                 	db	32
   212  007B1D  6F                 	db	111	;'o'
   213  007B1E  66                 	db	102	;'f'
   214  007B1F  20                 	db	32
   215  007B20  74                 	db	116	;'t'
   216  007B21  68                 	db	104	;'h'
   217  007B22  65                 	db	101	;'e'
   218  007B23  20                 	db	32
   219  007B24  61                 	db	97	;'a'
   220  007B25  62                 	db	98	;'b'
   221  007B26  6F                 	db	111	;'o'
   222  007B27  76                 	db	118	;'v'
   223  007B28  65                 	db	101	;'e'
   224  007B29  20                 	db	32
   225  007B2A  6F                 	db	111	;'o'
   226  007B2B  70                 	db	112	;'p'
   227  007B2C  74                 	db	116	;'t'
   228  007B2D  69                 	db	105	;'i'
   229  007B2E  6F                 	db	111	;'o'
   230  007B2F  6E                 	db	110	;'n'
   231  007B30  73                 	db	115	;'s'
   232  007B31  00                 	db	0
   233  007B32                     STR_5:
   234  007B32  0A                 	db	10
   235  007B33  0D                 	db	13
   236  007B34  0A                 	db	10
   237  007B35  0D                 	db	13
   238  007B36  49                 	db	73	;'I'
   239  007B37  6E                 	db	110	;'n'
   240  007B38  62                 	db	98	;'b'
   241  007B39  75                 	db	117	;'u'
   242  007B3A  69                 	db	105	;'i'
   243  007B3B  6C                 	db	108	;'l'
   244  007B3C  74                 	db	116	;'t'
   245  007B3D  20                 	db	32
   246  007B3E  45                 	db	69	;'E'
   247  007B3F  65                 	db	101	;'e'
   248  007B40  70                 	db	112	;'p'
   249  007B41  72                 	db	114	;'r'
   250  007B42  6F                 	db	111	;'o'
   251  007B43  6D                 	db	109	;'m'
   252  007B44  20                 	db	32
   253  007B45  54                 	db	84	;'T'
   254  007B46  65                 	db	101	;'e'
   255  007B47  73                 	db	115	;'s'
   256  007B48  74                 	db	116	;'t'
   257  007B49  2E                 	db	46
   258  007B4A  20                 	db	32
   259  007B4B  57                 	db	87	;'W'
   260  007B4C  72                 	db	114	;'r'
   261  007B4D  69                 	db	105	;'i'
   262  007B4E  74                 	db	116	;'t'
   263  007B4F  69                 	db	105	;'i'
   264  007B50  6E                 	db	110	;'n'
   265  007B51  67                 	db	103	;'g'
   266  007B52  20                 	db	32
   267  007B53  61                 	db	97	;'a'
   268  007B54  6E                 	db	110	;'n'
   269  007B55  64                 	db	100	;'d'
   270  007B56  20                 	db	32
   271  007B57  72                 	db	114	;'r'
   272  007B58  65                 	db	101	;'e'
   273  007B59  61                 	db	97	;'a'
   274  007B5A  64                 	db	100	;'d'
   275  007B5B  69                 	db	105	;'i'
   276  007B5C  6E                 	db	110	;'n'
   277  007B5D  67                 	db	103	;'g'
   278  007B5E  20                 	db	32
   279  007B5F  41                 	db	65	;'A'
   280  007B60  2D                 	db	45
   281  007B61  5A                 	db	90	;'Z'
   282  007B62  20                 	db	32
   283  007B63  74                 	db	116	;'t'
   284  007B64  6F                 	db	111	;'o'
   285  007B65  20                 	db	32
   286  007B66  61                 	db	97	;'a'
   287  007B67  6E                 	db	110	;'n'
   288  007B68  64                 	db	100	;'d'
   289  007B69  20                 	db	32
   290  007B6A  66                 	db	102	;'f'
   291  007B6B  72                 	db	114	;'r'
   292  007B6C  6F                 	db	111	;'o'
   293  007B6D  6D                 	db	109	;'m'
   294  007B6E  20                 	db	32
   295  007B6F  45                 	db	69	;'E'
   296  007B70  65                 	db	101	;'e'
   297  007B71  70                 	db	112	;'p'
   298  007B72  72                 	db	114	;'r'
   299  007B73  6F                 	db	111	;'o'
   300  007B74  6D                 	db	109	;'m'
   301  007B75  2E                 	db	46
   302  007B76  00                 	db	0
   303  007B77                     STR_3:
   304  007B77  0A                 	db	10
   305  007B78  0A                 	db	10
   306  007B79  0A                 	db	10
   307  007B7A  0D                 	db	13
   308  007B7B  50                 	db	80	;'P'
   309  007B7C  72                 	db	114	;'r'
   310  007B7D  65                 	db	101	;'e'
   311  007B7E  73                 	db	115	;'s'
   312  007B7F  73                 	db	115	;'s'
   313  007B80  20                 	db	32
   314  007B81  74                 	db	116	;'t'
   315  007B82  68                 	db	104	;'h'
   316  007B83  65                 	db	101	;'e'
   317  007B84  20                 	db	32
   318  007B85  73                 	db	115	;'s'
   319  007B86  77                 	db	119	;'w'
   320  007B87  69                 	db	105	;'i'
   321  007B88  74                 	db	116	;'t'
   322  007B89  63                 	db	99	;'c'
   323  007B8A  68                 	db	104	;'h'
   324  007B8B  65                 	db	101	;'e'
   325  007B8C  73                 	db	115	;'s'
   326  007B8D  20                 	db	32
   327  007B8E  61                 	db	97	;'a'
   328  007B8F  6E                 	db	110	;'n'
   329  007B90  64                 	db	100	;'d'
   330  007B91  20                 	db	32
   331  007B92  6F                 	db	111	;'o'
   332  007B93  62                 	db	98	;'b'
   333  007B94  73                 	db	115	;'s'
   334  007B95  65                 	db	101	;'e'
   335  007B96  72                 	db	114	;'r'
   336  007B97  76                 	db	118	;'v'
   337  007B98  65                 	db	101	;'e'
   338  007B99  20                 	db	32
   339  007B9A  74                 	db	116	;'t'
   340  007B9B  68                 	db	104	;'h'
   341  007B9C  65                 	db	101	;'e'
   342  007B9D  20                 	db	32
   343  007B9E  6F                 	db	111	;'o'
   344  007B9F  75                 	db	117	;'u'
   345  007BA0  74                 	db	116	;'t'
   346  007BA1  70                 	db	112	;'p'
   347  007BA2  75                 	db	117	;'u'
   348  007BA3  74                 	db	116	;'t'
   349  007BA4  20                 	db	32
   350  007BA5  6F                 	db	111	;'o'
   351  007BA6  6E                 	db	110	;'n'
   352  007BA7  20                 	db	32
   353  007BA8  4C                 	db	76	;'L'
   354  007BA9  65                 	db	101	;'e'
   355  007BAA  64                 	db	100	;'d'
   356  007BAB  73                 	db	115	;'s'
   357  007BAC  00                 	db	0
   358  007BAD                     STR_2:
   359  007BAD  45                 	db	69	;'E'
   360  007BAE  78                 	db	120	;'x'
   361  007BAF  70                 	db	112	;'p'
   362  007BB0  6C                 	db	108	;'l'
   363  007BB1  6F                 	db	111	;'o'
   364  007BB2  72                 	db	114	;'r'
   365  007BB3  65                 	db	101	;'e'
   366  007BB4  0A                 	db	10
   367  007BB5  20                 	db	32
   368  007BB6  53                 	db	83	;'S'
   369  007BB7  74                 	db	116	;'t'
   370  007BB8  61                 	db	97	;'a'
   371  007BB9  72                 	db	114	;'r'
   372  007BBA  74                 	db	116	;'t'
   373  007BBB  65                 	db	101	;'e'
   374  007BBC  72                 	db	114	;'r'
   375  007BBD  20                 	db	32
   376  007BBE  50                 	db	80	;'P'
   377  007BBF  69                 	db	105	;'i'
   378  007BC0  63                 	db	99	;'c'
   379  007BC1  2E                 	db	46
   380  007BC2  2E                 	db	46
   381  007BC3  2E                 	db	46
   382  007BC4  00                 	db	0
   383  007BC5                     STR_6:
   384  007BC5  0A                 	db	10
   385  007BC6  0D                 	db	13
   386  007BC7  45                 	db	69	;'E'
   387  007BC8  65                 	db	101	;'e'
   388  007BC9  70                 	db	112	;'p'
   389  007BCA  72                 	db	114	;'r'
   390  007BCB  6F                 	db	111	;'o'
   391  007BCC  6D                 	db	109	;'m'
   392  007BCD  20                 	db	32
   393  007BCE  57                 	db	87	;'W'
   394  007BCF  72                 	db	114	;'r'
   395  007BD0  69                 	db	105	;'i'
   396  007BD1  74                 	db	116	;'t'
   397  007BD2  65                 	db	101	;'e'
   398  007BD3  3A                 	db	58	;':'
   399  007BD4  20                 	db	32
   400  007BD5  25                 	db	37
   401  007BD6  63                 	db	99	;'c'
   402  007BD7  20                 	db	32
   403  007BD8  20                 	db	32
   404  007BD9  20                 	db	32
   405  007BDA  20                 	db	32
   406  007BDB  00                 	db	0
   407  007BDC                     STR_4:
   408  007BDC  0A                 	db	10
   409  007BDD  0D                 	db	13
   410  007BDE  41                 	db	65	;'A'
   411  007BDF  44                 	db	68	;'D'
   412  007BE0  43                 	db	67	;'C'
   413  007BE1  30                 	db	48	;'0'
   414  007BE2  20                 	db	32
   415  007BE3  76                 	db	118	;'v'
   416  007BE4  61                 	db	97	;'a'
   417  007BE5  6C                 	db	108	;'l'
   418  007BE6  75                 	db	117	;'u'
   419  007BE7  65                 	db	101	;'e'
   420  007BE8  3D                 	db	61	;'='
   421  007BE9  20                 	db	32
   422  007BEA  25                 	db	37
   423  007BEB  34                 	db	52	;'4'
   424  007BEC  64                 	db	100	;'d'
   425  007BED  00                 	db	0
   426  007BEE                     STR_7:
   427  007BEE  45                 	db	69	;'E'
   428  007BEF  65                 	db	101	;'e'
   429  007BF0  70                 	db	112	;'p'
   430  007BF1  72                 	db	114	;'r'
   431  007BF2  6F                 	db	111	;'o'
   432  007BF3  6D                 	db	109	;'m'
   433  007BF4  20                 	db	32
   434  007BF5  52                 	db	82	;'R'
   435  007BF6  65                 	db	101	;'e'
   436  007BF7  61                 	db	97	;'a'
   437  007BF8  64                 	db	100	;'d'
   438  007BF9  3A                 	db	58	;':'
   439  007BFA  20                 	db	32
   440  007BFB  25                 	db	37
   441  007BFC  63                 	db	99	;'c'
   442  007BFD  00                 	db	0
   443                           
   444                           ; #config settings
   445  007BFE  00                 	db	0	; dummy byte at the end
   446  0000                     
   447                           	psect	cinit
   448  006B9A                     __pcinit:
   449                           	opt stack 0
   450  006B9A                     start_initialization:
   451                           	opt stack 0
   452  006B9A                     __initialization:
   453                           	opt stack 0
   454                           
   455                           ; Clear objects allocated to COMRAM (16 bytes)
   456  006B9A  EE00  F04C         	lfsr	0,__pbssCOMRAM
   457  006B9E  0E10               	movlw	16
   458  006BA0                     clear_0:
   459  006BA0  6AEE               	clrf	postinc0,c
   460  006BA2  06E8               	decf	wreg,f,c
   461  006BA4  E1FD               	bnz	clear_0
   462                           
   463                           ; Initialize objects allocated to COMRAM (4 bytes)
   464                           ; load TBLPTR registers with __pidataCOMRAM
   465  006BA6  0EE0               	movlw	low __pidataCOMRAM
   466  006BA8  6EF6               	movwf	tblptrl,c
   467  006BAA  0E68               	movlw	high __pidataCOMRAM
   468  006BAC  6EF7               	movwf	tblptrh,c
   469  006BAE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   470  006BB0  6EF8               	movwf	tblptru,c
   471  006BB2  EE00  F05C         	lfsr	0,__pdataCOMRAM
   472  006BB6  EE10 F004          	lfsr	1,4
   473  006BBA                     copy_data0:
   474  006BBA  0009               	tblrd		*+
   475  006BBC  CFF5 FFEE          	movff	tablat,postinc0
   476  006BC0  50E5               	movf	postdec1,w,c
   477  006BC2  50E1               	movf	fsr1l,w,c
   478  006BC4  E1FA               	bnz	copy_data0
   479  006BC6                     end_of_initialization:
   480                           	opt stack 0
   481  006BC6                     __end_of__initialization:
   482                           	opt stack 0
   483  006BC6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   484  006BC8  6EF8               	movwf	tblptru,c
   485  006BCA  0100               	movlb	0
   486  006BCC  EFFE  F038         	goto	_main	;jump to C main() function
   487                           tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           postdec1	equ	0xFE5
   494                           fsr1l	equ	0xFE1
   495                           
   496                           	psect	bssCOMRAM
   497  00004C                     __pbssCOMRAM:
   498                           	opt stack 0
   499  00004C                     _LCDConfig:
   500                           	opt stack 0
   501  00004C                     	ds	14
   502  00005A                     _v_LcdTrackCursorPos_U8:
   503                           	opt stack 0
   504  00005A                     	ds	1
   505  00005B                     _v_LcdTrackLineNum_U8:
   506                           	opt stack 0
   507  00005B                     	ds	1
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           postdec1	equ	0xFE5
   515                           fsr1l	equ	0xFE1
   516                           
   517                           	psect	dataCOMRAM
   518  00005C                     __pdataCOMRAM:
   519                           	opt stack 0
   520  00005C                     _ARR_LcdLineNumAddress_U8:
   521                           	opt stack 0
   522  00005C                     	ds	4
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	cstackCOMRAM
   533  000001                     __pcstackCOMRAM:
   534                           	opt stack 0
   535  000001                     ??_GPIO_PinRead:
   536  000001                     ?___lldiv:
   537                           	opt stack 0
   538  000001                     GPIO_PinDirection@var_pinDirn_u8:
   539                           	opt stack 0
   540  000001                     UART_TxChar@v_uartData_u8:
   541                           	opt stack 0
   542  000001                     DELAY_us@us_count:
   543                           	opt stack 0
   544  000001                     EEPROM_WriteByte@v_eepromAddress_u16:
   545                           	opt stack 0
   546  000001                     EEPROM_ReadByte@v_eepromAddress_u16:
   547                           	opt stack 0
   548  000001                     ___lldiv@dividend:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x0
   552  000001                     	ds	1
   553  000002                     ??_GPIO_PinDirection:
   554  000002                     UART_TxString@ptr_string:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x1
   558  000002                     	ds	1
   559  000003                     ?_ADC_GetAdcValue:
   560                           	opt stack 0
   561  000003                     EEPROM_WriteByte@v_eepromData_u8:
   562                           	opt stack 0
   563  000003                     GPIO_PinRead@var_portNumber_u8:
   564                           	opt stack 0
   565  000003                     DELAY_ms@ms_count:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x2
   569  000003                     	ds	1
   570  000004                     EEPROM_WriteByte@gie_value:
   571                           	opt stack 0
   572  000004                     GPIO_PinDirection@var_portNumber_u8:
   573                           	opt stack 0
   574  000004                     GPIO_PinRead@returnStatus:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x3
   578  000004                     	ds	1
   579  000005                     ??_ADC_GetAdcValue:
   580  000005                     GPIO_PinDirection@enm_pinNumber:
   581                           	opt stack 0
   582  000005                     GPIO_PinRead@enm_pinNumber:
   583                           	opt stack 0
   584  000005                     led_Test@i:
   585                           	opt stack 0
   586  000005                     ___lldiv@divisor:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x4
   590  000005                     	ds	1
   591  000006                     GPIO_PinWrite@var_pinValue_u8:
   592                           	opt stack 0
   593  000006                     LCD_SetUp@RW:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x5
   597  000006                     	ds	1
   598  000007                     ??_GPIO_PinWrite:
   599  000007                     ADC_GetAdcValue@var_adcChannel_u8:
   600                           	opt stack 0
   601  000007                     LCD_SetUp@EN:
   602                           	opt stack 0
   603  000007                     led_Test@pattern:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x6
   607  000007                     	ds	1
   608  000008                     LCD_SetUp@D0:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x7
   612  000008                     	ds	1
   613  000009                     GPIO_PinWrite@var_portNumber_u8:
   614                           	opt stack 0
   615  000009                     LCD_SetUp@D1:
   616                           	opt stack 0
   617  000009                     ___lldiv@quotient:
   618                           	opt stack 0
   619                           
   620                           ; 4 bytes @ 0x8
   621  000009                     	ds	1
   622  00000A                     GPIO_PinWrite@enm_pinNumber:
   623                           	opt stack 0
   624  00000A                     LCD_SetUp@D2:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x9
   628  00000A                     	ds	1
   629  00000B                     LCD_SetUp@D3:
   630                           	opt stack 0
   631  00000B                     lcd_BusyCheck@busyflag:
   632                           	opt stack 0
   633  00000B                     lcd_SendHigherNibble@dataByte:
   634                           	opt stack 0
   635  00000B                     lcd_SendLowerNibble@dataByte:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0xA
   639  00000B                     	ds	1
   640  00000C                     LCD_SetUp@D4:
   641                           	opt stack 0
   642  00000C                     LCD_CmdWrite@v_lcdCmd_u8:
   643                           	opt stack 0
   644  00000C                     lcd_DataWrite@dataByte:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0xB
   648  00000C                     	ds	1
   649  00000D                     LCD_SetUp@D5:
   650                           	opt stack 0
   651  00000D                     LCD_GoToLine@v_lineNumber_u8:
   652                           	opt stack 0
   653  00000D                     LCD_DisplayChar@v_lcdData_u8:
   654                           	opt stack 0
   655  00000D                     ___lldiv@counter:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0xC
   659  00000D                     	ds	1
   660  00000E                     LCD_SetUp@D6:
   661                           	opt stack 0
   662  00000E                     LCD_Init@v_MaxCharsPerLine_u8:
   663                           	opt stack 0
   664  00000E                     LCD_DisplayString@ptr_stringPointer_u8:
   665                           	opt stack 0
   666  00000E                     UART_SetBaudRate@v_baudRate_u32:
   667                           	opt stack 0
   668  00000E                     UART_TxNumber@v_number_u32:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0xD
   672  00000E                     	ds	1
   673  00000F                     LCD_SetUp@D7:
   674                           	opt stack 0
   675  00000F                     LCD_Init@v_lcdNoOfLines_u8:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0xE
   679  00000F                     	ds	1
   680  000010                     LCD_SetUp@RS:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0xF
   684  000010                     	ds	1
   685  000011                     
   686                           ; 1 bytes @ 0x10
   687  000011                     	ds	1
   688  000012                     ??_UART_SetBaudRate:
   689  000012                     UART_TxNumber@v_numOfDigitsToTransmit_u8:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x11
   693  000012                     	ds	1
   694  000013                     ??_UART_TxNumber:
   695                           
   696                           ; 1 bytes @ 0x12
   697  000013                     	ds	3
   698  000016                     UART_SetBaudRate@RegValue:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x15
   702  000016                     	ds	1
   703  000017                     UART_Init@v_baudRate_u32:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x16
   707  000017                     	ds	4
   708  00001B                     
   709                           ; 1 bytes @ 0x1A
   710  00001B                     	ds	3
   711  00001E                     UART_TxNumber@a:
   712                           	opt stack 0
   713                           
   714                           ; 10 bytes @ 0x1D
   715  00001E                     	ds	10
   716  000028                     _UART_TxNumber$514:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x27
   720  000028                     	ds	2
   721  00002A                     UART_TxNumber@v_numericSystem_u8:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x29
   725  00002A                     	ds	1
   726  00002B                     UART_TxNumber@i:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x2A
   730  00002B                     	ds	1
   731  00002C                     ?_UART_Printf:
   732                           	opt stack 0
   733  00002C                     UART_Printf@argList:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x2B
   737  00002C                     	ds	4
   738  000030                     UART_Printf@str:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x2F
   742  000030                     	ds	2
   743  000032                     UART_Printf@v_num_s32:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x31
   747  000032                     	ds	4
   748  000036                     UART_Printf@v_num_s16:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x35
   752  000036                     	ds	2
   753  000038                     UART_Printf@v_num_u32:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x37
   757  000038                     	ds	4
   758  00003C                     UART_Printf@v_num_u16:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x3B
   762  00003C                     	ds	2
   763  00003E                     UART_Printf@ptr:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x3D
   767  00003E                     	ds	2
   768  000040                     UART_Printf@ch:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x3F
   772  000040                     	ds	1
   773  000041                     UART_Printf@v_numOfDigitsToTransmit_u8:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x40
   777  000041                     	ds	1
   778  000042                     UART_Printf@argp:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x41
   782  000042                     	ds	2
   783  000044                     ??_eeprom_Test:
   784                           
   785                           ; 1 bytes @ 0x43
   786  000044                     	ds	1
   787  000045                     eeprom_Test@read_char:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x44
   791  000045                     	ds	2
   792  000047                     eeprom_Test@eeprom_address:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x46
   796  000047                     	ds	2
   797  000049                     eeprom_Test@write_char:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x48
   801  000049                     	ds	2
   802  00004B                     main@option:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x4A
   806  00004B                     	ds	1
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           postdec1	equ	0xFE5
   814                           fsr1l	equ	0xFE1
   815                           
   816 ;;
   817 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   818 ;;
   819 ;; *************** function _main *****************
   820 ;; Defined at:
   821 ;;		line 57 in file "main.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;		None
   824 ;; Auto vars:     Size  Location     Type
   825 ;;  option          1   74[COMRAM] unsigned char 
   826 ;; Return value:  Size  Location     Type
   827 ;;                  2   62[None  ] int 
   828 ;; Registers used:
   829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   835 ;;      Params:         0       0       0       0       0       0       0
   836 ;;      Locals:         1       0       0       0       0       0       0
   837 ;;      Temps:          0       0       0       0       0       0       0
   838 ;;      Totals:         1       0       0       0       0       0       0
   839 ;;Total ram usage:        1 bytes
   840 ;; Hardware stack levels required when called:    8
   841 ;; This function calls:
   842 ;;		_DELAY_ms
   843 ;;		_GPIO_PinDirection
   844 ;;		_GPIO_PinRead
   845 ;;		_GPIO_PinWrite
   846 ;;		_UART_Init
   847 ;;		_UART_Printf
   848 ;;		_UART_RxChar
   849 ;;		_adc_Test
   850 ;;		_eeprom_Test
   851 ;;		_lcd_Test
   852 ;;		_led_Test
   853 ;;		_switch_Test
   854 ;; This function is called by:
   855 ;;		Startup code after reset
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text0
   860  0071FC                     __ptext0:
   861                           	opt stack 0
   862  0071FC                     _main:
   863                           	opt stack 23
   864                           
   865                           ;main.c: 60: char option;
   866                           ;main.c: 62: GPIO_PinDirection(PD_2,0x01u);
   867                           
   868                           ;incstack = 0
   869  0071FC  0E01               	movlw	1
   870  0071FE  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   871  007200  0E1A               	movlw	26
   872  007202  EC73  F039         	call	_GPIO_PinDirection
   873                           
   874                           ;main.c: 63: GPIO_PinDirection(PD_3,0x01u);
   875  007206  0E01               	movlw	1
   876  007208  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   877  00720A  0E1B               	movlw	27
   878  00720C  EC73  F039         	call	_GPIO_PinDirection
   879                           
   880                           ;main.c: 65: if((GPIO_PinRead(PD_2)==1) && (GPIO_PinRead(PD_3)==1))
   881  007210  0E1A               	movlw	26
   882  007212  EC95  F038         	call	_GPIO_PinRead
   883  007216  06E8               	decf	wreg,f,c
   884  007218  A4D8               	btfss	status,2,c
   885  00721A  D031               	goto	l2460
   886  00721C  0E1B               	movlw	27
   887  00721E  EC95  F038         	call	_GPIO_PinRead
   888  007222  06E8               	decf	wreg,f,c
   889  007224  A4D8               	btfss	status,2,c
   890  007226  D02B               	goto	l2460
   891                           
   892                           ;main.c: 66: {
   893                           ;main.c: 68: GPIO_PinDirection(PD_0,0x00u);
   894  007228  0E00               	movlw	0
   895  00722A  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   896  00722C  0E18               	movlw	24
   897  00722E  EC73  F039         	call	_GPIO_PinDirection
   898                           
   899                           ;main.c: 69: GPIO_PinDirection(PD_1,0x00u);
   900  007232  0E00               	movlw	0
   901  007234  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   902  007236  0E19               	movlw	25
   903  007238  EC73  F039         	call	_GPIO_PinDirection
   904  00723C                     l64:
   905                           
   906                           ;main.c: 72: {
   907                           ;main.c: 73: GPIO_PinWrite(PD_0,1);
   908  00723C  0E01               	movlw	1
   909  00723E  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
   910  007240  0E18               	movlw	24
   911  007242  EC23  F03A         	call	_GPIO_PinWrite
   912                           
   913                           ;main.c: 74: GPIO_PinWrite(PD_1,1);
   914  007246  0E01               	movlw	1
   915  007248  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
   916  00724A  0E19               	movlw	25
   917  00724C  EC23  F03A         	call	_GPIO_PinWrite
   918                           
   919                           ;main.c: 75: DELAY_ms(200);
   920  007250  0E00               	movlw	0
   921  007252  6E04               	movwf	DELAY_ms@ms_count+1,c
   922  007254  0EC8               	movlw	200
   923  007256  6E03               	movwf	DELAY_ms@ms_count,c
   924  007258  EC9D  F034         	call	_DELAY_ms	;wreg free
   925                           
   926                           ;main.c: 77: GPIO_PinWrite(PD_0,0);
   927  00725C  0E00               	movlw	0
   928  00725E  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
   929  007260  0E18               	movlw	24
   930  007262  EC23  F03A         	call	_GPIO_PinWrite
   931                           
   932                           ;main.c: 78: GPIO_PinWrite(PD_1,0);
   933  007266  0E00               	movlw	0
   934  007268  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
   935  00726A  0E19               	movlw	25
   936  00726C  EC23  F03A         	call	_GPIO_PinWrite
   937                           
   938                           ;main.c: 79: DELAY_ms(200);
   939  007270  0E00               	movlw	0
   940  007272  6E04               	movwf	DELAY_ms@ms_count+1,c
   941  007274  0EC8               	movlw	200
   942  007276  6E03               	movwf	DELAY_ms@ms_count,c
   943  007278  EC9D  F034         	call	_DELAY_ms	;wreg free
   944  00727C  D7DF               	goto	l64
   945  00727E                     l2460:
   946                           
   947                           ;main.c: 80: }
   948                           ;main.c: 81: }
   949                           ;main.c: 84: UART_Init(9600);
   950  00727E  0E80               	movlw	128
   951  007280  6E17               	movwf	UART_Init@v_baudRate_u32,c
   952  007282  0E25               	movlw	37
   953  007284  6E18               	movwf	UART_Init@v_baudRate_u32+1,c
   954  007286  0E00               	movlw	0
   955  007288  6E19               	movwf	UART_Init@v_baudRate_u32+2,c
   956  00728A  0E00               	movlw	0
   957  00728C  6E1A               	movwf	UART_Init@v_baudRate_u32+3,c
   958  00728E  ECBC  F034         	call	_UART_Init	;wreg free
   959                           
   960                           ;main.c: 85: UART_Printf("\n\r\n\rStarter PIC test Menu\n\r 1.Led test\n\r 2.Lcd test\n\
      +                          r 3.Switch test\n\r 4.Adc Test\n\r 5.Eeprom Test \n\rSelect One of the above options");
   961  007292  0EAF               	movlw	low STR_1
   962  007294  6E2C               	movwf	UART_Printf@argList,c
   963  007296  0E7A               	movlw	high STR_1
   964  007298  6E2D               	movwf	UART_Printf@argList+1,c
   965  00729A  ECBB  F03B         	call	_UART_Printf	;wreg free
   966  00729E                     l2464:
   967                           
   968                           ;main.c: 88: {
   969                           ;main.c: 89: option = UART_RxChar();
   970  00729E  EC72  F034         	call	_UART_RxChar	;wreg free
   971  0072A2  6E4B               	movwf	main@option,c
   972                           
   973                           ;main.c: 90: switch(option)
   974  0072A4  D00F               	goto	l2478
   975  0072A6                     l2466:
   976                           
   977                           ;main.c: 93: led_Test();
   978  0072A6  EC93  F037         	call	_led_Test	;wreg free
   979                           
   980                           ;main.c: 94: break;
   981  0072AA  D7F9               	goto	l2464
   982  0072AC                     l2468:
   983                           
   984                           ;main.c: 97: lcd_Test();
   985  0072AC  ECE8  F035         	call	_lcd_Test	;wreg free
   986                           
   987                           ;main.c: 98: break;
   988  0072B0  D7F6               	goto	l2464
   989  0072B2                     l2470:
   990                           
   991                           ;main.c: 101: switch_Test();
   992  0072B2  EC57  F036         	call	_switch_Test	;wreg free
   993                           
   994                           ;main.c: 102: break;
   995  0072B6  D7F3               	goto	l2464
   996  0072B8                     l2472:
   997                           
   998                           ;main.c: 105: adc_Test();
   999  0072B8  ECAC  F034         	call	_adc_Test	;wreg free
  1000                           
  1001                           ;main.c: 106: break;
  1002  0072BC  D7F0               	goto	l2464
  1003  0072BE                     l2474:
  1004                           
  1005                           ;main.c: 109: eeprom_Test();
  1006  0072BE  EC15  F037         	call	_eeprom_Test	;wreg free
  1007                           
  1008                           ;main.c: 114: }
  1009                           
  1010                           ;main.c: 113: break;
  1011                           
  1012                           ;main.c: 112: default:
  1013                           
  1014                           ;main.c: 110: break;
  1015  0072C2  D7ED               	goto	l2464
  1016  0072C4                     l2478:
  1017  0072C4  504B               	movf	main@option,w,c
  1018                           
  1019                           ; Switch size 1, requested type "space"
  1020                           ; Number of cases is 5, Range of values is 49 to 53
  1021                           ; switch strategies available:
  1022                           ; Name         Instructions Cycles
  1023                           ; simple_byte           16     9 (average)
  1024                           ;	Chosen strategy is simple_byte
  1025  0072C6  0A31               	xorlw	49	; case 49
  1026  0072C8  B4D8               	btfsc	status,2,c
  1027  0072CA  D7ED               	goto	l2466
  1028  0072CC  0A03               	xorlw	3	; case 50
  1029  0072CE  B4D8               	btfsc	status,2,c
  1030  0072D0  D7ED               	goto	l2468
  1031  0072D2  0A01               	xorlw	1	; case 51
  1032  0072D4  B4D8               	btfsc	status,2,c
  1033  0072D6  D7ED               	goto	l2470
  1034  0072D8  0A07               	xorlw	7	; case 52
  1035  0072DA  B4D8               	btfsc	status,2,c
  1036  0072DC  D7ED               	goto	l2472
  1037  0072DE  0A01               	xorlw	1	; case 53
  1038  0072E0  B4D8               	btfsc	status,2,c
  1039  0072E2  D7ED               	goto	l2474
  1040  0072E4  D7DC               	goto	l2464
  1041  0072E6                     __end_of_main:
  1042                           	opt stack 0
  1043                           tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           postinc0	equ	0xFEE
  1048                           wreg	equ	0xFE8
  1049                           postdec1	equ	0xFE5
  1050                           fsr1l	equ	0xFE1
  1051                           status	equ	0xFD8
  1052                           
  1053 ;; *************** function _switch_Test *****************
  1054 ;; Defined at:
  1055 ;;		line 176 in file "main.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1069 ;;      Params:         0       0       0       0       0       0       0
  1070 ;;      Locals:         0       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0
  1072 ;;      Totals:         0       0       0       0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    2
  1076 ;; This function calls:
  1077 ;;		_GPIO_PinDirection
  1078 ;;		_GPIO_PinRead
  1079 ;;		_GPIO_PinWrite
  1080 ;;		_UART_TxString
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text1
  1087  006CAE                     __ptext1:
  1088                           	opt stack 0
  1089  006CAE                     _switch_Test:
  1090                           	opt stack 28
  1091                           
  1092                           ;main.c: 178: GPIO_PinDirection(PD_0,0x00u);
  1093                           
  1094                           ;incstack = 0
  1095  006CAE  0E00               	movlw	0
  1096  006CB0  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1097  006CB2  0E18               	movlw	24
  1098  006CB4  EC73  F039         	call	_GPIO_PinDirection
  1099                           
  1100                           ;main.c: 179: GPIO_PinDirection(PD_1,0x00u);
  1101  006CB8  0E00               	movlw	0
  1102  006CBA  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1103  006CBC  0E19               	movlw	25
  1104  006CBE  EC73  F039         	call	_GPIO_PinDirection
  1105                           
  1106                           ;main.c: 180: GPIO_PinDirection(PD_2,0x01u);
  1107  006CC2  0E01               	movlw	1
  1108  006CC4  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1109  006CC6  0E1A               	movlw	26
  1110  006CC8  EC73  F039         	call	_GPIO_PinDirection
  1111                           
  1112                           ;main.c: 181: GPIO_PinDirection(PD_3,0x01u);
  1113  006CCC  0E01               	movlw	1
  1114  006CCE  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1115  006CD0  0E1B               	movlw	27
  1116  006CD2  EC73  F039         	call	_GPIO_PinDirection
  1117                           
  1118                           ;main.c: 182: UART_TxString("\n\n\n\rPress the switches and observe the output on Leds")
      +                          ;
  1119  006CD6  0E77               	movlw	low STR_3
  1120  006CD8  6E02               	movwf	UART_TxString@ptr_string,c
  1121  006CDA  0E7B               	movlw	high STR_3
  1122  006CDC  6E03               	movwf	UART_TxString@ptr_string+1,c
  1123  006CDE  ECE0  F034         	call	_UART_TxString	;wreg free
  1124  006CE2                     l2430:
  1125                           
  1126                           ;main.c: 185: {
  1127                           ;main.c: 186: GPIO_PinWrite(PD_0,GPIO_PinRead(PD_2));
  1128  006CE2  0E1A               	movlw	26
  1129  006CE4  EC95  F038         	call	_GPIO_PinRead
  1130  006CE8  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  1131  006CEA  0E18               	movlw	24
  1132  006CEC  EC23  F03A         	call	_GPIO_PinWrite
  1133                           
  1134                           ;main.c: 187: GPIO_PinWrite(PD_1,GPIO_PinRead(PD_3));
  1135  006CF0  0E1B               	movlw	27
  1136  006CF2  EC95  F038         	call	_GPIO_PinRead
  1137  006CF6  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  1138  006CF8  0E19               	movlw	25
  1139  006CFA  EC23  F03A         	call	_GPIO_PinWrite
  1140  006CFE  D7F1               	goto	l2430
  1141  006D00                     __end_of_switch_Test:
  1142                           	opt stack 0
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _led_Test *****************
  1154 ;; Defined at:
  1155 ;;		line 120 in file "main.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;  pattern         2    6[COMRAM] int 
  1160 ;;  i               2    4[COMRAM] int 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1170 ;;      Params:         0       0       0       0       0       0       0
  1171 ;;      Locals:         4       0       0       0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0       0       0
  1173 ;;      Totals:         4       0       0       0       0       0       0
  1174 ;;Total ram usage:        4 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    2
  1177 ;; This function calls:
  1178 ;;		_DELAY_ms
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text2
  1185  006F26                     __ptext2:
  1186                           	opt stack 0
  1187  006F26                     _led_Test:
  1188                           	opt stack 28
  1189                           
  1190                           ;main.c: 122: int i,pattern;
  1191                           ;main.c: 123: TRISA = 0x00u;
  1192                           
  1193                           ;incstack = 0
  1194  006F26  0E00               	movlw	0
  1195  006F28  6E92               	movwf	3986,c	;volatile
  1196                           
  1197                           ;main.c: 124: TRISB = 0x00u;
  1198  006F2A  0E00               	movlw	0
  1199  006F2C  6E93               	movwf	3987,c	;volatile
  1200                           
  1201                           ;main.c: 125: TRISC = 0x00u;
  1202  006F2E  0E00               	movlw	0
  1203  006F30  6E94               	movwf	3988,c	;volatile
  1204                           
  1205                           ;main.c: 126: TRISD = 0x00u;
  1206  006F32  0E00               	movlw	0
  1207  006F34  6E95               	movwf	3989,c	;volatile
  1208                           
  1209                           ;main.c: 127: TRISE = 0x00u;
  1210  006F36  0E00               	movlw	0
  1211  006F38  6E96               	movwf	3990,c	;volatile
  1212  006F3A                     l2384:
  1213                           
  1214                           ;main.c: 130: {
  1215                           ;main.c: 132: PORTA = 0xff;
  1216  006F3A  6880               	setf	3968,c	;volatile
  1217                           
  1218                           ;main.c: 133: PORTB = 0xff;
  1219  006F3C  6881               	setf	3969,c	;volatile
  1220                           
  1221                           ;main.c: 134: PORTC = 0xff;
  1222  006F3E  6882               	setf	3970,c	;volatile
  1223                           
  1224                           ;main.c: 135: PORTD = 0xff;
  1225  006F40  6883               	setf	3971,c	;volatile
  1226                           
  1227                           ;main.c: 136: PORTE = 0xff;
  1228  006F42  6884               	setf	3972,c	;volatile
  1229                           
  1230                           ;main.c: 137: DELAY_ms(500);
  1231  006F44  0E01               	movlw	1
  1232  006F46  6E04               	movwf	DELAY_ms@ms_count+1,c
  1233  006F48  0EF4               	movlw	244
  1234  006F4A  6E03               	movwf	DELAY_ms@ms_count,c
  1235  006F4C  EC9D  F034         	call	_DELAY_ms	;wreg free
  1236                           
  1237                           ;main.c: 139: PORTA = 0x00;
  1238  006F50  0E00               	movlw	0
  1239  006F52  6E80               	movwf	3968,c	;volatile
  1240                           
  1241                           ;main.c: 140: PORTB = 0x00;
  1242  006F54  0E00               	movlw	0
  1243  006F56  6E81               	movwf	3969,c	;volatile
  1244                           
  1245                           ;main.c: 141: PORTC = 0x00;
  1246  006F58  0E00               	movlw	0
  1247  006F5A  6E82               	movwf	3970,c	;volatile
  1248                           
  1249                           ;main.c: 142: PORTD = 0x00;
  1250  006F5C  0E00               	movlw	0
  1251  006F5E  6E83               	movwf	3971,c	;volatile
  1252                           
  1253                           ;main.c: 143: PORTE = 0xff;
  1254  006F60  6884               	setf	3972,c	;volatile
  1255                           
  1256                           ;main.c: 144: DELAY_ms(500);
  1257  006F62  0E01               	movlw	1
  1258  006F64  6E04               	movwf	DELAY_ms@ms_count+1,c
  1259  006F66  0EF4               	movlw	244
  1260  006F68  6E03               	movwf	DELAY_ms@ms_count,c
  1261  006F6A  EC9D  F034         	call	_DELAY_ms	;wreg free
  1262                           
  1263                           ;main.c: 146: pattern=0x01;
  1264  006F6E  0E00               	movlw	0
  1265  006F70  6E08               	movwf	led_Test@pattern+1,c
  1266  006F72  0E01               	movlw	1
  1267  006F74  6E07               	movwf	led_Test@pattern,c
  1268                           
  1269                           ;main.c: 147: for(i=0;i<8;i++)
  1270  006F76  0E00               	movlw	0
  1271  006F78  6E06               	movwf	led_Test@i+1,c
  1272  006F7A  0E00               	movlw	0
  1273  006F7C  6E05               	movwf	led_Test@i,c
  1274  006F7E                     l2408:
  1275  006F7E  BE06               	btfsc	led_Test@i+1,7,c
  1276  006F80  D006               	goto	l82
  1277  006F82  5006               	movf	led_Test@i+1,w,c
  1278  006F84  E1DA               	bnz	l2384
  1279  006F86  0E08               	movlw	8
  1280  006F88  5C05               	subwf	led_Test@i,w,c
  1281  006F8A  B0D8               	btfsc	status,0,c
  1282  006F8C  D7D6               	goto	l2384
  1283  006F8E                     l82:
  1284                           
  1285                           ;main.c: 148: {
  1286                           ;main.c: 149: PORTA = pattern;
  1287  006F8E  C007  FF80         	movff	led_Test@pattern,3968	;volatile
  1288                           
  1289                           ;main.c: 150: PORTB = pattern;
  1290  006F92  C007  FF81         	movff	led_Test@pattern,3969	;volatile
  1291                           
  1292                           ;main.c: 151: PORTC = pattern;
  1293  006F96  C007  FF82         	movff	led_Test@pattern,3970	;volatile
  1294                           
  1295                           ;main.c: 152: PORTD = pattern;
  1296  006F9A  C007  FF83         	movff	led_Test@pattern,3971	;volatile
  1297                           
  1298                           ;main.c: 153: PORTE = pattern;
  1299  006F9E  C007  FF84         	movff	led_Test@pattern,3972	;volatile
  1300                           
  1301                           ;main.c: 154: pattern = pattern<<1;
  1302  006FA2  90D8               	bcf	status,0,c
  1303  006FA4  3407               	rlcf	led_Test@pattern,w,c
  1304  006FA6  6E07               	movwf	led_Test@pattern,c
  1305  006FA8  3408               	rlcf	led_Test@pattern+1,w,c
  1306  006FAA  6E08               	movwf	led_Test@pattern+1,c
  1307                           
  1308                           ;main.c: 155: DELAY_ms(200);
  1309  006FAC  0E00               	movlw	0
  1310  006FAE  6E04               	movwf	DELAY_ms@ms_count+1,c
  1311  006FB0  0EC8               	movlw	200
  1312  006FB2  6E03               	movwf	DELAY_ms@ms_count,c
  1313  006FB4  EC9D  F034         	call	_DELAY_ms	;wreg free
  1314  006FB8  4A05               	infsnz	led_Test@i,f,c
  1315  006FBA  2A06               	incf	led_Test@i+1,f,c
  1316  006FBC  D7E0               	goto	l2408
  1317  006FBE                     __end_of_led_Test:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           postdec1	equ	0xFE5
  1326                           fsr1l	equ	0xFE1
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _lcd_Test *****************
  1330 ;; Defined at:
  1331 ;;		line 163 in file "main.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;		None
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1345 ;;      Params:         0       0       0       0       0       0       0
  1346 ;;      Locals:         0       0       0       0       0       0       0
  1347 ;;      Temps:          0       0       0       0       0       0       0
  1348 ;;      Totals:         0       0       0       0       0       0       0
  1349 ;;Total ram usage:        0 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    7
  1352 ;; This function calls:
  1353 ;;		_LCD_DisplayString
  1354 ;;		_LCD_Init
  1355 ;;		_LCD_SetUp
  1356 ;; This function is called by:
  1357 ;;		_main
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text3
  1362  006BD0                     __ptext3:
  1363                           	opt stack 0
  1364  006BD0                     _lcd_Test:
  1365                           	opt stack 23
  1366                           
  1367                           ;main.c: 165: LCD_SetUp(PB_0,PB_1,PB_2,P_NC,P_NC,P_NC,P_NC,PB_4,PB_5,PB_6,PB_7);
  1368                           
  1369                           ;incstack = 0
  1370  006BD0  0E09               	movlw	9
  1371  006BD2  6E06               	movwf	LCD_SetUp@RW,c
  1372  006BD4  0E0A               	movlw	10
  1373  006BD6  6E07               	movwf	LCD_SetUp@EN,c
  1374  006BD8  0EFF               	movlw	255
  1375  006BDA  6E08               	movwf	LCD_SetUp@D0,c
  1376  006BDC  0EFF               	movlw	255
  1377  006BDE  6E09               	movwf	LCD_SetUp@D1,c
  1378  006BE0  0EFF               	movlw	255
  1379  006BE2  6E0A               	movwf	LCD_SetUp@D2,c
  1380  006BE4  0EFF               	movlw	255
  1381  006BE6  6E0B               	movwf	LCD_SetUp@D3,c
  1382  006BE8  0E0C               	movlw	12
  1383  006BEA  6E0C               	movwf	LCD_SetUp@D4,c
  1384  006BEC  0E0D               	movlw	13
  1385  006BEE  6E0D               	movwf	LCD_SetUp@D5,c
  1386  006BF0  0E0E               	movlw	14
  1387  006BF2  6E0E               	movwf	LCD_SetUp@D6,c
  1388  006BF4  0E0F               	movlw	15
  1389  006BF6  6E0F               	movwf	LCD_SetUp@D7,c
  1390  006BF8  0E08               	movlw	8
  1391  006BFA  EC35  F038         	call	_LCD_SetUp
  1392                           
  1393                           ;main.c: 166: LCD_Init(2,16);
  1394  006BFE  0E10               	movlw	16
  1395  006C00  6E0E               	movwf	LCD_Init@v_MaxCharsPerLine_u8,c
  1396  006C02  0E02               	movlw	2
  1397  006C04  ECAD  F036         	call	_LCD_Init
  1398                           
  1399                           ;main.c: 167: LCD_DisplayString("Explore\n Starter Pic...");
  1400  006C08  0EAD               	movlw	low STR_2
  1401  006C0A  6E0E               	movwf	LCD_DisplayString@ptr_stringPointer_u8,c
  1402  006C0C  0E7B               	movlw	high STR_2
  1403  006C0E  6E0F               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1,c
  1404  006C10  EC0A  F035         	call	_LCD_DisplayString	;wreg free
  1405  006C14                     l89:
  1406  006C14  D7FF               	goto	l89
  1407  006C16                     __end_of_lcd_Test:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           postinc0	equ	0xFEE
  1414                           wreg	equ	0xFE8
  1415                           postdec1	equ	0xFE5
  1416                           fsr1l	equ	0xFE1
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _LCD_SetUp *****************
  1420 ;; Defined at:
  1421 ;;		line 135 in file "lcd.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  RS              1    wreg     enum E3222
  1424 ;;  RW              1    5[COMRAM] enum E3222
  1425 ;;  EN              1    6[COMRAM] enum E3222
  1426 ;;  D0              1    7[COMRAM] enum E3222
  1427 ;;  D1              1    8[COMRAM] enum E3222
  1428 ;;  D2              1    9[COMRAM] enum E3222
  1429 ;;  D3              1   10[COMRAM] enum E3222
  1430 ;;  D4              1   11[COMRAM] enum E3222
  1431 ;;  D5              1   12[COMRAM] enum E3222
  1432 ;;  D6              1   13[COMRAM] enum E3222
  1433 ;;  D7              1   14[COMRAM] enum E3222
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;  RS              1   15[COMRAM] enum E3222
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg, status,2, status,0, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1445 ;;      Params:        10       0       0       0       0       0       0
  1446 ;;      Locals:         1       0       0       0       0       0       0
  1447 ;;      Temps:          0       0       0       0       0       0       0
  1448 ;;      Totals:        11       0       0       0       0       0       0
  1449 ;;Total ram usage:       11 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    1
  1452 ;; This function calls:
  1453 ;;		_GPIO_PinDirection
  1454 ;; This function is called by:
  1455 ;;		_lcd_Test
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text4
  1460  00706A                     __ptext4:
  1461                           	opt stack 0
  1462  00706A                     _LCD_SetUp:
  1463                           	opt stack 28
  1464                           
  1465                           ;incstack = 0
  1466                           ;LCD_SetUp@RS stored from wreg
  1467  00706A  6E10               	movwf	LCD_SetUp@RS,c
  1468                           
  1469                           ;lcd.c: 148: LCDConfig.RS = RS;
  1470  00706C  C010  F04F         	movff	LCD_SetUp@RS,_LCDConfig+3
  1471                           
  1472                           ;lcd.c: 149: LCDConfig.RW = RW;
  1473  007070  C006  F050         	movff	LCD_SetUp@RW,_LCDConfig+4
  1474                           
  1475                           ;lcd.c: 150: LCDConfig.EN = EN;
  1476  007074  C007  F051         	movff	LCD_SetUp@EN,_LCDConfig+5
  1477                           
  1478                           ;lcd.c: 152: LCDConfig.D0 = D0;
  1479  007078  C008  F052         	movff	LCD_SetUp@D0,_LCDConfig+6
  1480                           
  1481                           ;lcd.c: 153: LCDConfig.D1 = D1;
  1482  00707C  C009  F053         	movff	LCD_SetUp@D1,_LCDConfig+7
  1483                           
  1484                           ;lcd.c: 154: LCDConfig.D2 = D2;
  1485  007080  C00A  F054         	movff	LCD_SetUp@D2,_LCDConfig+8
  1486                           
  1487                           ;lcd.c: 155: LCDConfig.D3 = D3;
  1488  007084  C00B  F055         	movff	LCD_SetUp@D3,_LCDConfig+9
  1489                           
  1490                           ;lcd.c: 156: LCDConfig.D4 = D4;
  1491  007088  C00C  F056         	movff	LCD_SetUp@D4,_LCDConfig+10
  1492                           
  1493                           ;lcd.c: 157: LCDConfig.D5 = D5;
  1494  00708C  C00D  F057         	movff	LCD_SetUp@D5,_LCDConfig+11
  1495                           
  1496                           ;lcd.c: 158: LCDConfig.D6 = D6;
  1497  007090  C00E  F058         	movff	LCD_SetUp@D6,_LCDConfig+12
  1498                           
  1499                           ;lcd.c: 159: LCDConfig.D7 = D7;
  1500  007094  C00F  F059         	movff	LCD_SetUp@D7,_LCDConfig+13
  1501                           
  1502                           ;lcd.c: 162: if((D0 == P_NC) || (D1 == P_NC) || (D2 == P_NC) || (D3 == P_NC))
  1503  007098  2808               	incf	LCD_SetUp@D0,w,c
  1504  00709A  B4D8               	btfsc	status,2,c
  1505  00709C  D009               	goto	l2274
  1506  00709E  2809               	incf	LCD_SetUp@D1,w,c
  1507  0070A0  B4D8               	btfsc	status,2,c
  1508  0070A2  D006               	goto	l2274
  1509  0070A4  280A               	incf	LCD_SetUp@D2,w,c
  1510  0070A6  B4D8               	btfsc	status,2,c
  1511  0070A8  D003               	goto	l2274
  1512  0070AA  280B               	incf	LCD_SetUp@D3,w,c
  1513  0070AC  A4D8               	btfss	status,2,c
  1514  0070AE  D003               	goto	l2276
  1515  0070B0                     l2274:
  1516                           
  1517                           ;lcd.c: 163: {
  1518                           ;lcd.c: 164: LCDConfig.v_LcdMode_U8 = 4;
  1519  0070B0  0E04               	movlw	4
  1520  0070B2  6E4E               	movwf	_LCDConfig+2,c
  1521                           
  1522                           ;lcd.c: 165: }
  1523  0070B4  D016               	goto	l2286
  1524  0070B6                     l2276:
  1525                           
  1526                           ;lcd.c: 166: else
  1527                           ;lcd.c: 167: {
  1528                           ;lcd.c: 168: LCDConfig.v_LcdMode_U8 = 8;
  1529  0070B6  0E08               	movlw	8
  1530  0070B8  6E4E               	movwf	_LCDConfig+2,c
  1531                           
  1532                           ;lcd.c: 169: GPIO_PinDirection(D0,0x00u);
  1533  0070BA  0E00               	movlw	0
  1534  0070BC  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1535  0070BE  5008               	movf	LCD_SetUp@D0,w,c
  1536  0070C0  EC73  F039         	call	_GPIO_PinDirection
  1537                           
  1538                           ;lcd.c: 170: GPIO_PinDirection(D1,0x00u);
  1539  0070C4  0E00               	movlw	0
  1540  0070C6  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1541  0070C8  5009               	movf	LCD_SetUp@D1,w,c
  1542  0070CA  EC73  F039         	call	_GPIO_PinDirection
  1543                           
  1544                           ;lcd.c: 171: GPIO_PinDirection(D2,0x00u);
  1545  0070CE  0E00               	movlw	0
  1546  0070D0  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1547  0070D2  500A               	movf	LCD_SetUp@D2,w,c
  1548  0070D4  EC73  F039         	call	_GPIO_PinDirection
  1549                           
  1550                           ;lcd.c: 172: GPIO_PinDirection(D3,0x00u);
  1551  0070D8  0E00               	movlw	0
  1552  0070DA  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1553  0070DC  500B               	movf	LCD_SetUp@D3,w,c
  1554  0070DE  EC73  F039         	call	_GPIO_PinDirection
  1555  0070E2                     l2286:
  1556                           
  1557                           ;lcd.c: 173: }
  1558                           ;lcd.c: 176: GPIO_PinDirection(RS,0x00u);
  1559  0070E2  0E00               	movlw	0
  1560  0070E4  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1561  0070E6  5010               	movf	LCD_SetUp@RS,w,c
  1562  0070E8  EC73  F039         	call	_GPIO_PinDirection
  1563                           
  1564                           ;lcd.c: 177: GPIO_PinDirection(RW,0x00u);
  1565  0070EC  0E00               	movlw	0
  1566  0070EE  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1567  0070F0  5006               	movf	LCD_SetUp@RW,w,c
  1568  0070F2  EC73  F039         	call	_GPIO_PinDirection
  1569                           
  1570                           ;lcd.c: 178: GPIO_PinDirection(EN,0x00u);
  1571  0070F6  0E00               	movlw	0
  1572  0070F8  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1573  0070FA  5007               	movf	LCD_SetUp@EN,w,c
  1574  0070FC  EC73  F039         	call	_GPIO_PinDirection
  1575                           
  1576                           ;lcd.c: 180: GPIO_PinDirection(D4,0x00u);
  1577  007100  0E00               	movlw	0
  1578  007102  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1579  007104  500C               	movf	LCD_SetUp@D4,w,c
  1580  007106  EC73  F039         	call	_GPIO_PinDirection
  1581                           
  1582                           ;lcd.c: 181: GPIO_PinDirection(D5,0x00u);
  1583  00710A  0E00               	movlw	0
  1584  00710C  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1585  00710E  500D               	movf	LCD_SetUp@D5,w,c
  1586  007110  EC73  F039         	call	_GPIO_PinDirection
  1587                           
  1588                           ;lcd.c: 182: GPIO_PinDirection(D6,0x00u);
  1589  007114  0E00               	movlw	0
  1590  007116  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1591  007118  500E               	movf	LCD_SetUp@D6,w,c
  1592  00711A  EC73  F039         	call	_GPIO_PinDirection
  1593                           
  1594                           ;lcd.c: 183: GPIO_PinDirection(D7,0x00u);
  1595  00711E  0E00               	movlw	0
  1596  007120  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1597  007122  500F               	movf	LCD_SetUp@D7,w,c
  1598  007124  EC73  F039         	call	_GPIO_PinDirection
  1599  007128  0012               	return		;funcret
  1600  00712A                     __end_of_LCD_SetUp:
  1601                           	opt stack 0
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           postdec1	equ	0xFE5
  1609                           fsr1l	equ	0xFE1
  1610                           status	equ	0xFD8
  1611                           
  1612 ;; *************** function _LCD_Init *****************
  1613 ;; Defined at:
  1614 ;;		line 198 in file "lcd.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;  v_lcdNoOfLin    1    wreg     unsigned char 
  1617 ;;  v_MaxCharsPe    1   13[COMRAM] unsigned char 
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;  v_lcdNoOfLin    1   14[COMRAM] unsigned char 
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1629 ;;      Params:         1       0       0       0       0       0       0
  1630 ;;      Locals:         1       0       0       0       0       0       0
  1631 ;;      Temps:          0       0       0       0       0       0       0
  1632 ;;      Totals:         2       0       0       0       0       0       0
  1633 ;;Total ram usage:        2 bytes
  1634 ;; Hardware stack levels used:    1
  1635 ;; Hardware stack levels required when called:    6
  1636 ;; This function calls:
  1637 ;;		_DELAY_ms
  1638 ;;		_LCD_Clear
  1639 ;;		_LCD_CmdWrite
  1640 ;;		_lcd_Reset
  1641 ;; This function is called by:
  1642 ;;		_lcd_Test
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           	psect	text5
  1647  006D5A                     __ptext5:
  1648                           	opt stack 0
  1649  006D5A                     _LCD_Init:
  1650                           	opt stack 23
  1651                           
  1652                           ;incstack = 0
  1653                           ;LCD_Init@v_lcdNoOfLines_u8 stored from wreg
  1654  006D5A  6E0F               	movwf	LCD_Init@v_lcdNoOfLines_u8,c
  1655                           
  1656                           ;lcd.c: 202: LCDConfig.v_MaxSupportedChars_U8 = v_MaxCharsPerLine_u8;
  1657  006D5C  C00E  F04D         	movff	LCD_Init@v_MaxCharsPerLine_u8,_LCDConfig+1
  1658                           
  1659                           ;lcd.c: 203: LCDConfig.v_MaxSupportedLines_U8 = v_lcdNoOfLines_u8;
  1660  006D60  C00F  F04C         	movff	LCD_Init@v_lcdNoOfLines_u8,_LCDConfig
  1661                           
  1662                           ;lcd.c: 204: if(v_lcdNoOfLines_u8 > 0x02)
  1663  006D64  0E02               	movlw	2
  1664  006D66  640F               	cpfsgt	LCD_Init@v_lcdNoOfLines_u8,c
  1665  006D68  D008               	goto	l2308
  1666                           
  1667                           ;lcd.c: 205: {
  1668                           ;lcd.c: 206: ARR_LcdLineNumAddress_U8[0x02] = 0x90 + (v_MaxCharsPerLine_u8 & 0x0fu);
  1669  006D6A  500E               	movf	LCD_Init@v_MaxCharsPerLine_u8,w,c
  1670  006D6C  0B0F               	andlw	15
  1671  006D6E  0F90               	addlw	144
  1672  006D70  6E5E               	movwf	_ARR_LcdLineNumAddress_U8+2,c
  1673                           
  1674                           ;lcd.c: 207: ARR_LcdLineNumAddress_U8[0x03] = 0xd0 + (v_MaxCharsPerLine_u8 & 0x0fu);
  1675  006D72  500E               	movf	LCD_Init@v_MaxCharsPerLine_u8,w,c
  1676  006D74  0B0F               	andlw	15
  1677  006D76  0FD0               	addlw	208
  1678  006D78  6E5F               	movwf	_ARR_LcdLineNumAddress_U8+3,c
  1679  006D7A                     l2308:
  1680                           
  1681                           ;lcd.c: 208: }
  1682                           ;lcd.c: 210: DELAY_ms(100);
  1683  006D7A  0E00               	movlw	0
  1684  006D7C  6E04               	movwf	DELAY_ms@ms_count+1,c
  1685  006D7E  0E64               	movlw	100
  1686  006D80  6E03               	movwf	DELAY_ms@ms_count,c
  1687  006D82  EC9D  F034         	call	_DELAY_ms	;wreg free
  1688                           
  1689                           ;lcd.c: 212: if(LCDConfig.v_LcdMode_U8 == 8u)
  1690  006D86  0E08               	movlw	8
  1691  006D88  184E               	xorwf	_LCDConfig+2,w,c
  1692  006D8A  A4D8               	btfss	status,2,c
  1693  006D8C  D004               	goto	l2314
  1694                           
  1695                           ;lcd.c: 213: {
  1696                           ;lcd.c: 214: LCD_CmdWrite(0x38u);
  1697  006D8E  0E38               	movlw	56
  1698  006D90  EC65  F035         	call	_LCD_CmdWrite
  1699                           
  1700                           ;lcd.c: 215: }
  1701  006D94  D009               	goto	l329
  1702  006D96                     l2314:
  1703                           
  1704                           ;lcd.c: 216: else if(LCDConfig.v_LcdMode_U8 == 4u)
  1705  006D96  0E04               	movlw	4
  1706  006D98  184E               	xorwf	_LCDConfig+2,w,c
  1707  006D9A  A4D8               	btfss	status,2,c
  1708  006D9C  D005               	goto	l329
  1709                           
  1710                           ;lcd.c: 217: {
  1711                           ;lcd.c: 218: lcd_Reset();
  1712  006D9E  EC80  F036         	call	_lcd_Reset	;wreg free
  1713                           
  1714                           ;lcd.c: 219: LCD_CmdWrite(0x28u);
  1715  006DA2  0E28               	movlw	40
  1716  006DA4  EC65  F035         	call	_LCD_CmdWrite
  1717  006DA8                     l329:
  1718                           
  1719                           ;lcd.c: 220: }
  1720                           ;lcd.c: 222: LCD_CmdWrite(0x0Eu);
  1721  006DA8  0E0E               	movlw	14
  1722  006DAA  EC65  F035         	call	_LCD_CmdWrite
  1723                           
  1724                           ;lcd.c: 223: LCD_Clear();
  1725  006DAE  EC85  F034         	call	_LCD_Clear	;wreg free
  1726  006DB2  0012               	return		;funcret
  1727  006DB4                     __end_of_LCD_Init:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postdec1	equ	0xFE5
  1736                           fsr1l	equ	0xFE1
  1737                           status	equ	0xFD8
  1738                           
  1739 ;; *************** function _lcd_Reset *****************
  1740 ;; Defined at:
  1741 ;;		line 913 in file "lcd.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1755 ;;      Params:         0       0       0       0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0
  1757 ;;      Temps:          0       0       0       0       0       0       0
  1758 ;;      Totals:         0       0       0       0       0       0       0
  1759 ;;Total ram usage:        0 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    2
  1762 ;; This function calls:
  1763 ;;		_DELAY_ms
  1764 ;;		_DELAY_us
  1765 ;;		_lcd_SendCmdSignals
  1766 ;;		_lcd_SendHigherNibble
  1767 ;; This function is called by:
  1768 ;;		_LCD_Init
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text6
  1773  006D00                     __ptext6:
  1774                           	opt stack 0
  1775  006D00                     _lcd_Reset:
  1776                           	opt stack 26
  1777                           
  1778                           ;lcd.c: 916: lcd_SendHigherNibble(0x30);
  1779                           
  1780                           ;incstack = 0
  1781  006D00  0E30               	movlw	48
  1782  006D02  EC0B  F036         	call	_lcd_SendHigherNibble
  1783                           
  1784                           ;lcd.c: 917: lcd_SendCmdSignals();
  1785  006D06  EC97  F035         	call	_lcd_SendCmdSignals	;wreg free
  1786                           
  1787                           ;lcd.c: 918: DELAY_ms(100);
  1788  006D0A  0E00               	movlw	0
  1789  006D0C  6E04               	movwf	DELAY_ms@ms_count+1,c
  1790  006D0E  0E64               	movlw	100
  1791  006D10  6E03               	movwf	DELAY_ms@ms_count,c
  1792  006D12  EC9D  F034         	call	_DELAY_ms	;wreg free
  1793                           
  1794                           ;lcd.c: 919: lcd_SendHigherNibble(0x30);
  1795  006D16  0E30               	movlw	48
  1796  006D18  EC0B  F036         	call	_lcd_SendHigherNibble
  1797                           
  1798                           ;lcd.c: 920: lcd_SendCmdSignals();
  1799  006D1C  EC97  F035         	call	_lcd_SendCmdSignals	;wreg free
  1800                           
  1801                           ;lcd.c: 921: DELAY_us(200);
  1802  006D20  0E00               	movlw	0
  1803  006D22  6E02               	movwf	DELAY_us@us_count+1,c
  1804  006D24  0EC8               	movlw	200
  1805  006D26  6E01               	movwf	DELAY_us@us_count,c
  1806  006D28  EC94  F034         	call	_DELAY_us	;wreg free
  1807                           
  1808                           ;lcd.c: 922: lcd_SendHigherNibble(0x30);
  1809  006D2C  0E30               	movlw	48
  1810  006D2E  EC0B  F036         	call	_lcd_SendHigherNibble
  1811                           
  1812                           ;lcd.c: 923: lcd_SendCmdSignals();
  1813  006D32  EC97  F035         	call	_lcd_SendCmdSignals	;wreg free
  1814                           
  1815                           ;lcd.c: 924: DELAY_us(200);
  1816  006D36  0E00               	movlw	0
  1817  006D38  6E02               	movwf	DELAY_us@us_count+1,c
  1818  006D3A  0EC8               	movlw	200
  1819  006D3C  6E01               	movwf	DELAY_us@us_count,c
  1820  006D3E  EC94  F034         	call	_DELAY_us	;wreg free
  1821                           
  1822                           ;lcd.c: 925: lcd_SendHigherNibble(0x20);
  1823  006D42  0E20               	movlw	32
  1824  006D44  EC0B  F036         	call	_lcd_SendHigherNibble
  1825                           
  1826                           ;lcd.c: 926: lcd_SendCmdSignals();
  1827  006D48  EC97  F035         	call	_lcd_SendCmdSignals	;wreg free
  1828                           
  1829                           ;lcd.c: 927: DELAY_us(200);
  1830  006D4C  0E00               	movlw	0
  1831  006D4E  6E02               	movwf	DELAY_us@us_count+1,c
  1832  006D50  0EC8               	movlw	200
  1833  006D52  6E01               	movwf	DELAY_us@us_count,c
  1834  006D54  EC94  F034         	call	_DELAY_us	;wreg free
  1835  006D58  0012               	return		;funcret
  1836  006D5A                     __end_of_lcd_Reset:
  1837                           	opt stack 0
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           postinc0	equ	0xFEE
  1843                           wreg	equ	0xFE8
  1844                           postdec1	equ	0xFE5
  1845                           fsr1l	equ	0xFE1
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _LCD_Clear *****************
  1849 ;; Defined at:
  1850 ;;		line 237 in file "lcd.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1864 ;;      Params:         0       0       0       0       0       0       0
  1865 ;;      Locals:         0       0       0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0
  1867 ;;      Totals:         0       0       0       0       0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    5
  1871 ;; This function calls:
  1872 ;;		_LCD_CmdWrite
  1873 ;;		_LCD_GoToLine
  1874 ;; This function is called by:
  1875 ;;		_LCD_Init
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text7
  1880  00690A                     __ptext7:
  1881                           	opt stack 0
  1882  00690A                     _LCD_Clear:
  1883                           	opt stack 23
  1884                           
  1885                           ;lcd.c: 239: LCD_CmdWrite(0x01u);
  1886                           
  1887                           ;incstack = 0
  1888  00690A  0E01               	movlw	1
  1889  00690C  EC65  F035         	call	_LCD_CmdWrite
  1890                           
  1891                           ;lcd.c: 240: LCD_GoToLine(0x00);
  1892  006910  0E00               	movlw	0
  1893  006912  EC1F  F035         	call	_LCD_GoToLine
  1894  006916  0012               	return		;funcret
  1895  006918                     __end_of_LCD_Clear:
  1896                           	opt stack 0
  1897                           tblptru	equ	0xFF8
  1898                           tblptrh	equ	0xFF7
  1899                           tblptrl	equ	0xFF6
  1900                           tablat	equ	0xFF5
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           postdec1	equ	0xFE5
  1904                           fsr1l	equ	0xFE1
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _LCD_GoToLine *****************
  1908 ;; Defined at:
  1909 ;;		line 265 in file "lcd.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  v_lineNumber    1    wreg     unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  v_lineNumber    1   12[COMRAM] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1923 ;;      Params:         0       0       0       0       0       0       0
  1924 ;;      Locals:         1       0       0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0
  1926 ;;      Totals:         1       0       0       0       0       0       0
  1927 ;;Total ram usage:        1 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    4
  1930 ;; This function calls:
  1931 ;;		_LCD_CmdWrite
  1932 ;; This function is called by:
  1933 ;;		_LCD_Clear
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text8
  1938  006A3E                     __ptext8:
  1939                           	opt stack 0
  1940  006A3E                     _LCD_GoToLine:
  1941                           	opt stack 23
  1942                           
  1943                           ;incstack = 0
  1944                           ;LCD_GoToLine@v_lineNumber_u8 stored from wreg
  1945  006A3E  6E0D               	movwf	LCD_GoToLine@v_lineNumber_u8,c
  1946                           
  1947                           ;lcd.c: 267: if(v_lineNumber_u8 < LCDConfig.v_MaxSupportedLines_U8)
  1948  006A40  504C               	movf	_LCDConfig,w,c
  1949  006A42  5C0D               	subwf	LCD_GoToLine@v_lineNumber_u8,w,c
  1950  006A44  B0D8               	btfsc	status,0,c
  1951  006A46  0012               	return	
  1952                           
  1953                           ;lcd.c: 268: {
  1954                           ;lcd.c: 271: v_LcdTrackCursorPos_U8 = 0x00;
  1955  006A48  0E00               	movlw	0
  1956  006A4A  6E5A               	movwf	_v_LcdTrackCursorPos_U8,c
  1957                           
  1958                           ;lcd.c: 272: v_LcdTrackLineNum_U8 = v_lineNumber_u8;
  1959  006A4C  C00D  F05B         	movff	LCD_GoToLine@v_lineNumber_u8,_v_LcdTrackLineNum_U8
  1960                           
  1961                           ;lcd.c: 273: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_lineNumber_u8]);
  1962  006A50  500D               	movf	LCD_GoToLine@v_lineNumber_u8,w,c
  1963  006A52  0D01               	mullw	1
  1964  006A54  0E5C               	movlw	low _ARR_LcdLineNumAddress_U8
  1965  006A56  24F3               	addwf	prodl,w,c
  1966  006A58  6ED9               	movwf	fsr2l,c
  1967  006A5A  0E00               	movlw	high _ARR_LcdLineNumAddress_U8
  1968  006A5C  20F4               	addwfc	prodh,w,c
  1969  006A5E  6EDA               	movwf	fsr2h,c
  1970  006A60  50DF               	movf	indf2,w,c
  1971  006A62  EC65  F035         	call	_LCD_CmdWrite
  1972  006A66  0012               	return	
  1973  006A68                     __end_of_LCD_GoToLine:
  1974                           	opt stack 0
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           prodh	equ	0xFF4
  1980                           prodl	equ	0xFF3
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           postdec1	equ	0xFE5
  1984                           fsr1l	equ	0xFE1
  1985                           indf2	equ	0xFDF
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _LCD_DisplayString *****************
  1991 ;; Defined at:
  1992 ;;		line 427 in file "lcd.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;  ptr_stringPo    2   13[COMRAM] PTR const unsigned char 
  1995 ;;		 -> STR_2(24), 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;		None
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2007 ;;      Params:         2       0       0       0       0       0       0
  2008 ;;      Locals:         0       0       0       0       0       0       0
  2009 ;;      Temps:          0       0       0       0       0       0       0
  2010 ;;      Totals:         2       0       0       0       0       0       0
  2011 ;;Total ram usage:        2 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    6
  2014 ;; This function calls:
  2015 ;;		_LCD_DisplayChar
  2016 ;; This function is called by:
  2017 ;;		_lcd_Test
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text9
  2022  006A14                     __ptext9:
  2023                           	opt stack 0
  2024  006A14                     _LCD_DisplayString:
  2025                           	opt stack 23
  2026                           
  2027                           ;lcd.c: 429: while((*ptr_stringPointer_u8)!=0)
  2028                           
  2029                           ;incstack = 0
  2030  006A14  D00A               	goto	l2326
  2031  006A16                     l2322:
  2032                           
  2033                           ;lcd.c: 430: LCD_DisplayChar(*ptr_stringPointer_u8++);
  2034  006A16  C00E  FFF6         	movff	LCD_DisplayString@ptr_stringPointer_u8,tblptrl
  2035  006A1A  C00F  FFF7         	movff	LCD_DisplayString@ptr_stringPointer_u8+1,tblptrh
  2036  006A1E                     	if	0	;tblptru may be non-zero
  2037  006A1E                     	endif
  2038  006A1E                     	if	0	;tblptru may be non-zero
  2039  006A1E                     	endif
  2040  006A1E  0008               	tblrd		*
  2041  006A20  50F5               	movf	tablat,w,c
  2042  006A22  ECCD  F034         	call	_LCD_DisplayChar
  2043  006A26  4A0E               	infsnz	LCD_DisplayString@ptr_stringPointer_u8,f,c
  2044  006A28  2A0F               	incf	LCD_DisplayString@ptr_stringPointer_u8+1,f,c
  2045  006A2A                     l2326:
  2046  006A2A  C00E  FFF6         	movff	LCD_DisplayString@ptr_stringPointer_u8,tblptrl
  2047  006A2E  C00F  FFF7         	movff	LCD_DisplayString@ptr_stringPointer_u8+1,tblptrh
  2048  006A32                     	if	0	;tblptru may be non-zero
  2049  006A32                     	endif
  2050  006A32                     	if	0	;tblptru may be non-zero
  2051  006A32                     	endif
  2052  006A32  0008               	tblrd		*
  2053  006A34  50F5               	movf	tablat,w,c
  2054  006A36  0900               	iorlw	0
  2055  006A38  B4D8               	btfsc	status,2,c
  2056  006A3A  0012               	return	
  2057  006A3C  D7EC               	goto	l2322
  2058  006A3E                     __end_of_LCD_DisplayString:
  2059                           	opt stack 0
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           prodh	equ	0xFF4
  2065                           prodl	equ	0xFF3
  2066                           postinc0	equ	0xFEE
  2067                           wreg	equ	0xFE8
  2068                           postdec1	equ	0xFE5
  2069                           fsr1l	equ	0xFE1
  2070                           indf2	equ	0xFDF
  2071                           fsr2h	equ	0xFDA
  2072                           fsr2l	equ	0xFD9
  2073                           status	equ	0xFD8
  2074                           
  2075 ;; *************** function _LCD_DisplayChar *****************
  2076 ;; Defined at:
  2077 ;;		line 392 in file "lcd.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  v_lcdData_u8    1    wreg     unsigned char 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  v_lcdData_u8    1   12[COMRAM] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2091 ;;      Params:         0       0       0       0       0       0       0
  2092 ;;      Locals:         1       0       0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0
  2094 ;;      Totals:         1       0       0       0       0       0       0
  2095 ;;Total ram usage:        1 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    5
  2098 ;; This function calls:
  2099 ;;		_LCD_GoToNextLine
  2100 ;;		_lcd_DataWrite
  2101 ;; This function is called by:
  2102 ;;		_LCD_DisplayString
  2103 ;;		_LCD_DisplayNumber
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text10
  2108  00699A                     __ptext10:
  2109                           	opt stack 0
  2110  00699A                     _LCD_DisplayChar:
  2111                           	opt stack 23
  2112                           
  2113                           ;incstack = 0
  2114                           ;LCD_DisplayChar@v_lcdData_u8 stored from wreg
  2115  00699A  6E0D               	movwf	LCD_DisplayChar@v_lcdData_u8,c
  2116                           
  2117                           ;lcd.c: 394: if((v_LcdTrackCursorPos_U8>=LCDConfig.v_MaxSupportedChars_U8) || (v_lcdData
      +                          _u8=='\n'))
  2118  00699C  504D               	movf	_LCDConfig+1,w,c
  2119  00699E  5C5A               	subwf	_v_LcdTrackCursorPos_U8,w,c
  2120  0069A0  B0D8               	btfsc	status,0,c
  2121  0069A2  D003               	goto	l2068
  2122  0069A4  0E0A               	movlw	10
  2123  0069A6  180D               	xorwf	LCD_DisplayChar@v_lcdData_u8,w,c
  2124  0069A8  B4D8               	btfsc	status,2,c
  2125  0069AA                     l2068:
  2126                           
  2127                           ;lcd.c: 395: {
  2128                           ;lcd.c: 398: LCD_GoToNextLine();
  2129  0069AA  ECF5  F034         	call	_LCD_GoToNextLine	;wreg free
  2130                           
  2131                           ;lcd.c: 399: }
  2132                           ;lcd.c: 400: if(v_lcdData_u8!='\n')
  2133  0069AE  0E0A               	movlw	10
  2134  0069B0  180D               	xorwf	LCD_DisplayChar@v_lcdData_u8,w,c
  2135  0069B2  B4D8               	btfsc	status,2,c
  2136  0069B4  0012               	return	
  2137                           
  2138                           ;lcd.c: 401: {
  2139                           ;lcd.c: 403: lcd_DataWrite(v_lcdData_u8);
  2140  0069B6  500D               	movf	LCD_DisplayChar@v_lcdData_u8,w,c
  2141  0069B8  EC7E  F035         	call	_lcd_DataWrite
  2142                           
  2143                           ;lcd.c: 404: v_LcdTrackCursorPos_U8++;
  2144  0069BC  2A5A               	incf	_v_LcdTrackCursorPos_U8,f,c
  2145  0069BE  0012               	return	
  2146  0069C0                     __end_of_LCD_DisplayChar:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           postdec1	equ	0xFE5
  2157                           fsr1l	equ	0xFE1
  2158                           indf2	equ	0xFDF
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8
  2162                           
  2163 ;; *************** function _lcd_DataWrite *****************
  2164 ;; Defined at:
  2165 ;;		line 826 in file "lcd.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;  dataByte        1    wreg     unsigned char 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  dataByte        1   11[COMRAM] unsigned char 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2, status,0, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2179 ;;      Params:         0       0       0       0       0       0       0
  2180 ;;      Locals:         1       0       0       0       0       0       0
  2181 ;;      Temps:          0       0       0       0       0       0       0
  2182 ;;      Totals:         1       0       0       0       0       0       0
  2183 ;;Total ram usage:        1 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    3
  2186 ;; This function calls:
  2187 ;;		_lcd_BusyCheck
  2188 ;;		_lcd_SendDataSignals
  2189 ;;		_lcd_SendHigherNibble
  2190 ;;		_lcd_SendLowerNibble
  2191 ;; This function is called by:
  2192 ;;		_LCD_DisplayChar
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text11
  2197  006AFC                     __ptext11:
  2198                           	opt stack 0
  2199  006AFC                     _lcd_DataWrite:
  2200                           	opt stack 24
  2201                           
  2202                           ;incstack = 0
  2203                           ;lcd_DataWrite@dataByte stored from wreg
  2204  006AFC  6E0C               	movwf	lcd_DataWrite@dataByte,c
  2205                           
  2206                           ;lcd.c: 828: lcd_BusyCheck();
  2207  006AFE  ECDF  F037         	call	_lcd_BusyCheck	;wreg free
  2208                           
  2209                           ;lcd.c: 829: if(LCDConfig.v_LcdMode_U8 == 8u)
  2210  006B02  0E08               	movlw	8
  2211  006B04  184E               	xorwf	_LCDConfig+2,w,c
  2212  006B06  A4D8               	btfss	status,2,c
  2213  006B08  D004               	goto	l2016
  2214                           
  2215                           ;lcd.c: 830: {
  2216                           ;lcd.c: 831: lcd_SendLowerNibble(dataByte);
  2217  006B0A  500C               	movf	lcd_DataWrite@dataByte,w,c
  2218  006B0C  EC31  F036         	call	_lcd_SendLowerNibble
  2219                           
  2220                           ;lcd.c: 832: }
  2221  006B10  D008               	goto	l2020
  2222  006B12                     l2016:
  2223                           
  2224                           ;lcd.c: 833: else
  2225                           ;lcd.c: 834: {
  2226                           ;lcd.c: 835: lcd_SendHigherNibble(dataByte);
  2227  006B12  500C               	movf	lcd_DataWrite@dataByte,w,c
  2228  006B14  EC0B  F036         	call	_lcd_SendHigherNibble
  2229                           
  2230                           ;lcd.c: 836: lcd_SendDataSignals();
  2231  006B18  ECB2  F035         	call	_lcd_SendDataSignals	;wreg free
  2232                           
  2233                           ;lcd.c: 837: dataByte = dataByte << 4;
  2234  006B1C  380C               	swapf	lcd_DataWrite@dataByte,w,c
  2235  006B1E  0BF0               	andlw	240
  2236  006B20  6E0C               	movwf	lcd_DataWrite@dataByte,c
  2237  006B22                     l2020:
  2238                           
  2239                           ;lcd.c: 838: }
  2240                           ;lcd.c: 840: lcd_SendHigherNibble(dataByte);
  2241  006B22  500C               	movf	lcd_DataWrite@dataByte,w,c
  2242  006B24  EC0B  F036         	call	_lcd_SendHigherNibble
  2243                           
  2244                           ;lcd.c: 841: lcd_SendDataSignals();
  2245  006B28  ECB2  F035         	call	_lcd_SendDataSignals	;wreg free
  2246  006B2C  0012               	return		;funcret
  2247  006B2E                     __end_of_lcd_DataWrite:
  2248                           	opt stack 0
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           tblptrl	equ	0xFF6
  2252                           tablat	equ	0xFF5
  2253                           prodh	equ	0xFF4
  2254                           prodl	equ	0xFF3
  2255                           postinc0	equ	0xFEE
  2256                           wreg	equ	0xFE8
  2257                           postdec1	equ	0xFE5
  2258                           fsr1l	equ	0xFE1
  2259                           indf2	equ	0xFDF
  2260                           fsr2h	equ	0xFDA
  2261                           fsr2l	equ	0xFD9
  2262                           status	equ	0xFD8
  2263                           
  2264 ;; *************** function _lcd_SendDataSignals *****************
  2265 ;; Defined at:
  2266 ;;		line 1002 in file "lcd.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;		None
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;		None
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2, status,0, cstack
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2280 ;;      Params:         0       0       0       0       0       0       0
  2281 ;;      Locals:         0       0       0       0       0       0       0
  2282 ;;      Temps:          0       0       0       0       0       0       0
  2283 ;;      Totals:         0       0       0       0       0       0       0
  2284 ;;Total ram usage:        0 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    1
  2287 ;; This function calls:
  2288 ;;		_DELAY_us
  2289 ;;		_GPIO_PinWrite
  2290 ;; This function is called by:
  2291 ;;		_lcd_DataWrite
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text12
  2296  006B64                     __ptext12:
  2297                           	opt stack 0
  2298  006B64                     _lcd_SendDataSignals:
  2299                           	opt stack 25
  2300                           
  2301                           ;lcd.c: 1004: GPIO_PinWrite(LCDConfig.RS,1);
  2302                           
  2303                           ;incstack = 0
  2304  006B64  0E01               	movlw	1
  2305  006B66  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2306  006B68  504F               	movf	_LCDConfig+3,w,c
  2307  006B6A  EC23  F03A         	call	_GPIO_PinWrite
  2308                           
  2309                           ;lcd.c: 1005: GPIO_PinWrite(LCDConfig.RW,0);
  2310  006B6E  0E00               	movlw	0
  2311  006B70  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2312  006B72  5050               	movf	_LCDConfig+4,w,c
  2313  006B74  EC23  F03A         	call	_GPIO_PinWrite
  2314                           
  2315                           ;lcd.c: 1006: GPIO_PinWrite(LCDConfig.EN,1);
  2316  006B78  0E01               	movlw	1
  2317  006B7A  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2318  006B7C  5051               	movf	_LCDConfig+5,w,c
  2319  006B7E  EC23  F03A         	call	_GPIO_PinWrite
  2320                           
  2321                           ;lcd.c: 1007: DELAY_us(10);
  2322  006B82  0E00               	movlw	0
  2323  006B84  6E02               	movwf	DELAY_us@us_count+1,c
  2324  006B86  0E0A               	movlw	10
  2325  006B88  6E01               	movwf	DELAY_us@us_count,c
  2326  006B8A  EC94  F034         	call	_DELAY_us	;wreg free
  2327                           
  2328                           ;lcd.c: 1008: GPIO_PinWrite(LCDConfig.EN,0);
  2329  006B8E  0E00               	movlw	0
  2330  006B90  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2331  006B92  5051               	movf	_LCDConfig+5,w,c
  2332  006B94  EC23  F03A         	call	_GPIO_PinWrite
  2333  006B98  0012               	return		;funcret
  2334  006B9A                     __end_of_lcd_SendDataSignals:
  2335                           	opt stack 0
  2336                           tblptru	equ	0xFF8
  2337                           tblptrh	equ	0xFF7
  2338                           tblptrl	equ	0xFF6
  2339                           tablat	equ	0xFF5
  2340                           prodh	equ	0xFF4
  2341                           prodl	equ	0xFF3
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           postdec1	equ	0xFE5
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           fsr2h	equ	0xFDA
  2348                           fsr2l	equ	0xFD9
  2349                           status	equ	0xFD8
  2350                           
  2351 ;; *************** function _LCD_GoToNextLine *****************
  2352 ;; Defined at:
  2353 ;;		line 292 in file "lcd.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;		None
  2356 ;; Auto vars:     Size  Location     Type
  2357 ;;		None
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  1    wreg      void 
  2360 ;; Registers used:
  2361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2367 ;;      Params:         0       0       0       0       0       0       0
  2368 ;;      Locals:         0       0       0       0       0       0       0
  2369 ;;      Temps:          0       0       0       0       0       0       0
  2370 ;;      Totals:         0       0       0       0       0       0       0
  2371 ;;Total ram usage:        0 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    4
  2374 ;; This function calls:
  2375 ;;		_LCD_CmdWrite
  2376 ;; This function is called by:
  2377 ;;		_LCD_DisplayChar
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           	psect	text13
  2382  0069EA                     __ptext13:
  2383                           	opt stack 0
  2384  0069EA                     _LCD_GoToNextLine:
  2385                           	opt stack 23
  2386                           
  2387                           ;lcd.c: 296: v_LcdTrackLineNum_U8++;
  2388                           
  2389                           ;incstack = 0
  2390  0069EA  2A5B               	incf	_v_LcdTrackLineNum_U8,f,c
  2391                           
  2392                           ;lcd.c: 297: v_LcdTrackCursorPos_U8 = 0x00;
  2393  0069EC  0E00               	movlw	0
  2394  0069EE  6E5A               	movwf	_v_LcdTrackCursorPos_U8,c
  2395                           
  2396                           ;lcd.c: 298: if(v_LcdTrackLineNum_U8 >= LCDConfig.v_MaxSupportedLines_U8)
  2397  0069F0  504C               	movf	_LCDConfig,w,c
  2398  0069F2  5C5B               	subwf	_v_LcdTrackLineNum_U8,w,c
  2399  0069F4  A0D8               	btfss	status,0,c
  2400  0069F6  D002               	goto	l2008
  2401                           
  2402                           ;lcd.c: 299: v_LcdTrackLineNum_U8 = 0x00;
  2403  0069F8  0E00               	movlw	0
  2404  0069FA  6E5B               	movwf	_v_LcdTrackLineNum_U8,c
  2405  0069FC                     l2008:
  2406                           
  2407                           ;lcd.c: 300: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_LcdTrackLineNum_U8]);
  2408  0069FC  505B               	movf	_v_LcdTrackLineNum_U8,w,c
  2409  0069FE  0D01               	mullw	1
  2410  006A00  0E5C               	movlw	low _ARR_LcdLineNumAddress_U8
  2411  006A02  24F3               	addwf	prodl,w,c
  2412  006A04  6ED9               	movwf	fsr2l,c
  2413  006A06  0E00               	movlw	high _ARR_LcdLineNumAddress_U8
  2414  006A08  20F4               	addwfc	prodh,w,c
  2415  006A0A  6EDA               	movwf	fsr2h,c
  2416  006A0C  50DF               	movf	indf2,w,c
  2417  006A0E  EC65  F035         	call	_LCD_CmdWrite
  2418  006A12  0012               	return		;funcret
  2419  006A14                     __end_of_LCD_GoToNextLine:
  2420                           	opt stack 0
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           prodh	equ	0xFF4
  2426                           prodl	equ	0xFF3
  2427                           postinc0	equ	0xFEE
  2428                           wreg	equ	0xFE8
  2429                           postdec1	equ	0xFE5
  2430                           fsr1l	equ	0xFE1
  2431                           indf2	equ	0xFDF
  2432                           fsr2h	equ	0xFDA
  2433                           fsr2l	equ	0xFD9
  2434                           status	equ	0xFD8
  2435                           
  2436 ;; *************** function _LCD_CmdWrite *****************
  2437 ;; Defined at:
  2438 ;;		line 358 in file "lcd.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;  v_lcdCmd_u8     1    wreg     unsigned char 
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  v_lcdCmd_u8     1   11[COMRAM] unsigned char 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      void 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2452 ;;      Params:         0       0       0       0       0       0       0
  2453 ;;      Locals:         1       0       0       0       0       0       0
  2454 ;;      Temps:          0       0       0       0       0       0       0
  2455 ;;      Totals:         1       0       0       0       0       0       0
  2456 ;;Total ram usage:        1 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    3
  2459 ;; This function calls:
  2460 ;;		_lcd_BusyCheck
  2461 ;;		_lcd_SendCmdSignals
  2462 ;;		_lcd_SendHigherNibble
  2463 ;;		_lcd_SendLowerNibble
  2464 ;; This function is called by:
  2465 ;;		_LCD_Init
  2466 ;;		_LCD_Clear
  2467 ;;		_LCD_GoToLine
  2468 ;;		_LCD_GoToNextLine
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text14
  2473  006ACA                     __ptext14:
  2474                           	opt stack 0
  2475  006ACA                     _LCD_CmdWrite:
  2476                           	opt stack 25
  2477                           
  2478                           ;incstack = 0
  2479                           ;LCD_CmdWrite@v_lcdCmd_u8 stored from wreg
  2480  006ACA  6E0C               	movwf	LCD_CmdWrite@v_lcdCmd_u8,c
  2481                           
  2482                           ;lcd.c: 360: lcd_BusyCheck();
  2483  006ACC  ECDF  F037         	call	_lcd_BusyCheck	;wreg free
  2484                           
  2485                           ;lcd.c: 361: if(LCDConfig.v_LcdMode_U8 == 8u)
  2486  006AD0  0E08               	movlw	8
  2487  006AD2  184E               	xorwf	_LCDConfig+2,w,c
  2488  006AD4  A4D8               	btfss	status,2,c
  2489  006AD6  D004               	goto	l1982
  2490                           
  2491                           ;lcd.c: 362: {
  2492                           ;lcd.c: 363: lcd_SendLowerNibble(v_lcdCmd_u8);
  2493  006AD8  500C               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2494  006ADA  EC31  F036         	call	_lcd_SendLowerNibble
  2495                           
  2496                           ;lcd.c: 364: }
  2497  006ADE  D008               	goto	l1986
  2498  006AE0                     l1982:
  2499                           
  2500                           ;lcd.c: 365: else
  2501                           ;lcd.c: 366: {
  2502                           ;lcd.c: 367: lcd_SendHigherNibble(v_lcdCmd_u8);
  2503  006AE0  500C               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2504  006AE2  EC0B  F036         	call	_lcd_SendHigherNibble
  2505                           
  2506                           ;lcd.c: 368: lcd_SendCmdSignals();
  2507  006AE6  EC97  F035         	call	_lcd_SendCmdSignals	;wreg free
  2508                           
  2509                           ;lcd.c: 369: v_lcdCmd_u8 = v_lcdCmd_u8 << 4;
  2510  006AEA  380C               	swapf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2511  006AEC  0BF0               	andlw	240
  2512  006AEE  6E0C               	movwf	LCD_CmdWrite@v_lcdCmd_u8,c
  2513  006AF0                     l1986:
  2514                           
  2515                           ;lcd.c: 370: }
  2516                           ;lcd.c: 372: lcd_SendHigherNibble(v_lcdCmd_u8);
  2517  006AF0  500C               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2518  006AF2  EC0B  F036         	call	_lcd_SendHigherNibble
  2519                           
  2520                           ;lcd.c: 373: lcd_SendCmdSignals();
  2521  006AF6  EC97  F035         	call	_lcd_SendCmdSignals	;wreg free
  2522  006AFA  0012               	return		;funcret
  2523  006AFC                     __end_of_LCD_CmdWrite:
  2524                           	opt stack 0
  2525                           tblptru	equ	0xFF8
  2526                           tblptrh	equ	0xFF7
  2527                           tblptrl	equ	0xFF6
  2528                           tablat	equ	0xFF5
  2529                           prodh	equ	0xFF4
  2530                           prodl	equ	0xFF3
  2531                           postinc0	equ	0xFEE
  2532                           wreg	equ	0xFE8
  2533                           postdec1	equ	0xFE5
  2534                           fsr1l	equ	0xFE1
  2535                           indf2	equ	0xFDF
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _lcd_SendLowerNibble *****************
  2541 ;; Defined at:
  2542 ;;		line 962 in file "lcd.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;  dataByte        1    wreg     unsigned char 
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  dataByte        1   10[COMRAM] unsigned char 
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2556 ;;      Params:         0       0       0       0       0       0       0
  2557 ;;      Locals:         1       0       0       0       0       0       0
  2558 ;;      Temps:          0       0       0       0       0       0       0
  2559 ;;      Totals:         1       0       0       0       0       0       0
  2560 ;;Total ram usage:        1 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    1
  2563 ;; This function calls:
  2564 ;;		_GPIO_PinWrite
  2565 ;; This function is called by:
  2566 ;;		_LCD_CmdWrite
  2567 ;;		_lcd_DataWrite
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text15
  2572  006C62                     __ptext15:
  2573                           	opt stack 0
  2574  006C62                     _lcd_SendLowerNibble:
  2575                           	opt stack 26
  2576                           
  2577                           ;incstack = 0
  2578                           ;lcd_SendLowerNibble@dataByte stored from wreg
  2579  006C62  6E0B               	movwf	lcd_SendLowerNibble@dataByte,c
  2580                           
  2581                           ;lcd.c: 964: GPIO_PinWrite(LCDConfig.D0,(((dataByte)&(((uint8_t)1<<(0))))!=0u));
  2582  006C64  A00B               	btfss	lcd_SendLowerNibble@dataByte,0,c
  2583  006C66  D002               	goto	u1760
  2584  006C68  0E01               	movlw	1
  2585  006C6A  D001               	goto	u1770
  2586  006C6C                     u1760:
  2587  006C6C  0E00               	movlw	0
  2588  006C6E                     u1770:
  2589  006C6E  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2590  006C70  5052               	movf	_LCDConfig+6,w,c
  2591  006C72  EC23  F03A         	call	_GPIO_PinWrite
  2592                           
  2593                           ;lcd.c: 965: GPIO_PinWrite(LCDConfig.D1,(((dataByte)&(((uint8_t)1<<(1))))!=0u));
  2594  006C76  A20B               	btfss	lcd_SendLowerNibble@dataByte,1,c
  2595  006C78  D002               	goto	u1780
  2596  006C7A  0E01               	movlw	1
  2597  006C7C  D001               	goto	u1790
  2598  006C7E                     u1780:
  2599  006C7E  0E00               	movlw	0
  2600  006C80                     u1790:
  2601  006C80  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2602  006C82  5053               	movf	_LCDConfig+7,w,c
  2603  006C84  EC23  F03A         	call	_GPIO_PinWrite
  2604                           
  2605                           ;lcd.c: 966: GPIO_PinWrite(LCDConfig.D2,(((dataByte)&(((uint8_t)1<<(2))))!=0u));
  2606  006C88  A40B               	btfss	lcd_SendLowerNibble@dataByte,2,c
  2607  006C8A  D002               	goto	u1800
  2608  006C8C  0E01               	movlw	1
  2609  006C8E  D001               	goto	u1810
  2610  006C90                     u1800:
  2611  006C90  0E00               	movlw	0
  2612  006C92                     u1810:
  2613  006C92  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2614  006C94  5054               	movf	_LCDConfig+8,w,c
  2615  006C96  EC23  F03A         	call	_GPIO_PinWrite
  2616                           
  2617                           ;lcd.c: 967: GPIO_PinWrite(LCDConfig.D3,(((dataByte)&(((uint8_t)1<<(3))))!=0u));
  2618  006C9A  A60B               	btfss	lcd_SendLowerNibble@dataByte,3,c
  2619  006C9C  D002               	goto	u1820
  2620  006C9E  0E01               	movlw	1
  2621  006CA0  D001               	goto	u1830
  2622  006CA2                     u1820:
  2623  006CA2  0E00               	movlw	0
  2624  006CA4                     u1830:
  2625  006CA4  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2626  006CA6  5055               	movf	_LCDConfig+9,w,c
  2627  006CA8  EC23  F03A         	call	_GPIO_PinWrite
  2628  006CAC  0012               	return		;funcret
  2629  006CAE                     __end_of_lcd_SendLowerNibble:
  2630                           	opt stack 0
  2631                           tblptru	equ	0xFF8
  2632                           tblptrh	equ	0xFF7
  2633                           tblptrl	equ	0xFF6
  2634                           tablat	equ	0xFF5
  2635                           prodh	equ	0xFF4
  2636                           prodl	equ	0xFF3
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           postdec1	equ	0xFE5
  2640                           fsr1l	equ	0xFE1
  2641                           indf2	equ	0xFDF
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _lcd_SendHigherNibble *****************
  2647 ;; Defined at:
  2648 ;;		line 943 in file "lcd.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  dataByte        1    wreg     unsigned char 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  dataByte        1   10[COMRAM] unsigned char 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, status,2, status,0, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2662 ;;      Params:         0       0       0       0       0       0       0
  2663 ;;      Locals:         1       0       0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0
  2665 ;;      Totals:         1       0       0       0       0       0       0
  2666 ;;Total ram usage:        1 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    1
  2669 ;; This function calls:
  2670 ;;		_GPIO_PinWrite
  2671 ;; This function is called by:
  2672 ;;		_LCD_CmdWrite
  2673 ;;		_lcd_DataWrite
  2674 ;;		_lcd_Reset
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text16
  2679  006C16                     __ptext16:
  2680                           	opt stack 0
  2681  006C16                     _lcd_SendHigherNibble:
  2682                           	opt stack 26
  2683                           
  2684                           ;incstack = 0
  2685                           ;lcd_SendHigherNibble@dataByte stored from wreg
  2686  006C16  6E0B               	movwf	lcd_SendHigherNibble@dataByte,c
  2687                           
  2688                           ;lcd.c: 945: GPIO_PinWrite(LCDConfig.D4,(((dataByte)&(((uint8_t)1<<(4))))!=0u));
  2689  006C18  A80B               	btfss	lcd_SendHigherNibble@dataByte,4,c
  2690  006C1A  D002               	goto	u1840
  2691  006C1C  0E01               	movlw	1
  2692  006C1E  D001               	goto	u1850
  2693  006C20                     u1840:
  2694  006C20  0E00               	movlw	0
  2695  006C22                     u1850:
  2696  006C22  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2697  006C24  5056               	movf	_LCDConfig+10,w,c
  2698  006C26  EC23  F03A         	call	_GPIO_PinWrite
  2699                           
  2700                           ;lcd.c: 946: GPIO_PinWrite(LCDConfig.D5,(((dataByte)&(((uint8_t)1<<(5))))!=0u));
  2701  006C2A  AA0B               	btfss	lcd_SendHigherNibble@dataByte,5,c
  2702  006C2C  D002               	goto	u1860
  2703  006C2E  0E01               	movlw	1
  2704  006C30  D001               	goto	u1870
  2705  006C32                     u1860:
  2706  006C32  0E00               	movlw	0
  2707  006C34                     u1870:
  2708  006C34  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2709  006C36  5057               	movf	_LCDConfig+11,w,c
  2710  006C38  EC23  F03A         	call	_GPIO_PinWrite
  2711                           
  2712                           ;lcd.c: 947: GPIO_PinWrite(LCDConfig.D6,(((dataByte)&(((uint8_t)1<<(6))))!=0u));
  2713  006C3C  AC0B               	btfss	lcd_SendHigherNibble@dataByte,6,c
  2714  006C3E  D002               	goto	u1880
  2715  006C40  0E01               	movlw	1
  2716  006C42  D001               	goto	u1890
  2717  006C44                     u1880:
  2718  006C44  0E00               	movlw	0
  2719  006C46                     u1890:
  2720  006C46  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2721  006C48  5058               	movf	_LCDConfig+12,w,c
  2722  006C4A  EC23  F03A         	call	_GPIO_PinWrite
  2723                           
  2724                           ;lcd.c: 948: GPIO_PinWrite(LCDConfig.D7,(((dataByte)&(((uint8_t)1<<(7))))!=0u));
  2725  006C4E  AE0B               	btfss	lcd_SendHigherNibble@dataByte,7,c
  2726  006C50  D002               	goto	u1900
  2727  006C52  0E01               	movlw	1
  2728  006C54  D001               	goto	u1910
  2729  006C56                     u1900:
  2730  006C56  0E00               	movlw	0
  2731  006C58                     u1910:
  2732  006C58  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2733  006C5A  5059               	movf	_LCDConfig+13,w,c
  2734  006C5C  EC23  F03A         	call	_GPIO_PinWrite
  2735  006C60  0012               	return		;funcret
  2736  006C62                     __end_of_lcd_SendHigherNibble:
  2737                           	opt stack 0
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           prodh	equ	0xFF4
  2743                           prodl	equ	0xFF3
  2744                           postinc0	equ	0xFEE
  2745                           wreg	equ	0xFE8
  2746                           postdec1	equ	0xFE5
  2747                           fsr1l	equ	0xFE1
  2748                           indf2	equ	0xFDF
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _lcd_SendCmdSignals *****************
  2754 ;; Defined at:
  2755 ;;		line 981 in file "lcd.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, status,2, status,0, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2769 ;;      Params:         0       0       0       0       0       0       0
  2770 ;;      Locals:         0       0       0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0
  2772 ;;      Totals:         0       0       0       0       0       0       0
  2773 ;;Total ram usage:        0 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    1
  2776 ;; This function calls:
  2777 ;;		_DELAY_us
  2778 ;;		_GPIO_PinWrite
  2779 ;; This function is called by:
  2780 ;;		_LCD_CmdWrite
  2781 ;;		_lcd_Reset
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text17
  2786  006B2E                     __ptext17:
  2787                           	opt stack 0
  2788  006B2E                     _lcd_SendCmdSignals:
  2789                           	opt stack 26
  2790                           
  2791                           ;lcd.c: 983: GPIO_PinWrite(LCDConfig.RS,0);
  2792                           
  2793                           ;incstack = 0
  2794  006B2E  0E00               	movlw	0
  2795  006B30  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2796  006B32  504F               	movf	_LCDConfig+3,w,c
  2797  006B34  EC23  F03A         	call	_GPIO_PinWrite
  2798                           
  2799                           ;lcd.c: 984: GPIO_PinWrite(LCDConfig.RW,0);
  2800  006B38  0E00               	movlw	0
  2801  006B3A  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2802  006B3C  5050               	movf	_LCDConfig+4,w,c
  2803  006B3E  EC23  F03A         	call	_GPIO_PinWrite
  2804                           
  2805                           ;lcd.c: 985: GPIO_PinWrite(LCDConfig.EN,1);
  2806  006B42  0E01               	movlw	1
  2807  006B44  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2808  006B46  5051               	movf	_LCDConfig+5,w,c
  2809  006B48  EC23  F03A         	call	_GPIO_PinWrite
  2810                           
  2811                           ;lcd.c: 986: DELAY_us(10);
  2812  006B4C  0E00               	movlw	0
  2813  006B4E  6E02               	movwf	DELAY_us@us_count+1,c
  2814  006B50  0E0A               	movlw	10
  2815  006B52  6E01               	movwf	DELAY_us@us_count,c
  2816  006B54  EC94  F034         	call	_DELAY_us	;wreg free
  2817                           
  2818                           ;lcd.c: 987: GPIO_PinWrite(LCDConfig.EN,0);
  2819  006B58  0E00               	movlw	0
  2820  006B5A  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2821  006B5C  5051               	movf	_LCDConfig+5,w,c
  2822  006B5E  EC23  F03A         	call	_GPIO_PinWrite
  2823  006B62  0012               	return		;funcret
  2824  006B64                     __end_of_lcd_SendCmdSignals:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           prodh	equ	0xFF4
  2831                           prodl	equ	0xFF3
  2832                           postinc0	equ	0xFEE
  2833                           wreg	equ	0xFE8
  2834                           postdec1	equ	0xFE5
  2835                           fsr1l	equ	0xFE1
  2836                           indf2	equ	0xFDF
  2837                           fsr2h	equ	0xFDA
  2838                           fsr2l	equ	0xFD9
  2839                           status	equ	0xFD8
  2840                           
  2841 ;; *************** function _lcd_BusyCheck *****************
  2842 ;; Defined at:
  2843 ;;		line 860 in file "lcd.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;		None
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  busyflag        1   10[COMRAM] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2857 ;;      Params:         0       0       0       0       0       0       0
  2858 ;;      Locals:         1       0       0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0
  2860 ;;      Totals:         1       0       0       0       0       0       0
  2861 ;;Total ram usage:        1 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    2
  2864 ;; This function calls:
  2865 ;;		_DELAY_ms
  2866 ;;		_DELAY_us
  2867 ;;		_GPIO_PinDirection
  2868 ;;		_GPIO_PinRead
  2869 ;;		_GPIO_PinWrite
  2870 ;; This function is called by:
  2871 ;;		_LCD_CmdWrite
  2872 ;;		_lcd_DataWrite
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text18
  2877  006FBE                     __ptext18:
  2878                           	opt stack 0
  2879  006FBE                     _lcd_BusyCheck:
  2880                           	opt stack 25
  2881                           
  2882                           ;lcd.c: 862: uint8_t busyflag;
  2883                           ;lcd.c: 864: if(LCDConfig.RW != P_NC)
  2884                           
  2885                           ;incstack = 0
  2886  006FBE  2850               	incf	_LCDConfig+4,w,c
  2887  006FC0  B4D8               	btfsc	status,2,c
  2888  006FC2  D04C               	goto	l1968
  2889                           
  2890                           ;lcd.c: 865: {
  2891                           ;lcd.c: 866: GPIO_PinDirection(LCDConfig.D7,0x01u);
  2892  006FC4  0E01               	movlw	1
  2893  006FC6  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2894  006FC8  5059               	movf	_LCDConfig+13,w,c
  2895  006FCA  EC73  F039         	call	_GPIO_PinDirection
  2896                           
  2897                           ;lcd.c: 867: GPIO_PinWrite(LCDConfig.RS,0);
  2898  006FCE  0E00               	movlw	0
  2899  006FD0  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2900  006FD2  504F               	movf	_LCDConfig+3,w,c
  2901  006FD4  EC23  F03A         	call	_GPIO_PinWrite
  2902                           
  2903                           ;lcd.c: 868: GPIO_PinWrite(LCDConfig.RW,1);
  2904  006FD8  0E01               	movlw	1
  2905  006FDA  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2906  006FDC  5050               	movf	_LCDConfig+4,w,c
  2907  006FDE  EC23  F03A         	call	_GPIO_PinWrite
  2908  006FE2                     l395:
  2909                           
  2910                           ;lcd.c: 870: {
  2911                           ;lcd.c: 872: GPIO_PinWrite(LCDConfig.EN,0);
  2912  006FE2  0E00               	movlw	0
  2913  006FE4  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2914  006FE6  5051               	movf	_LCDConfig+5,w,c
  2915  006FE8  EC23  F03A         	call	_GPIO_PinWrite
  2916                           
  2917                           ;lcd.c: 873: DELAY_us(10);
  2918  006FEC  0E00               	movlw	0
  2919  006FEE  6E02               	movwf	DELAY_us@us_count+1,c
  2920  006FF0  0E0A               	movlw	10
  2921  006FF2  6E01               	movwf	DELAY_us@us_count,c
  2922  006FF4  EC94  F034         	call	_DELAY_us	;wreg free
  2923                           
  2924                           ;lcd.c: 874: GPIO_PinWrite(LCDConfig.EN,1);
  2925  006FF8  0E01               	movlw	1
  2926  006FFA  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2927  006FFC  5051               	movf	_LCDConfig+5,w,c
  2928  006FFE  EC23  F03A         	call	_GPIO_PinWrite
  2929                           
  2930                           ;lcd.c: 875: DELAY_us(10);
  2931  007002  0E00               	movlw	0
  2932  007004  6E02               	movwf	DELAY_us@us_count+1,c
  2933  007006  0E0A               	movlw	10
  2934  007008  6E01               	movwf	DELAY_us@us_count,c
  2935  00700A  EC94  F034         	call	_DELAY_us	;wreg free
  2936                           
  2937                           ;lcd.c: 876: busyflag = GPIO_PinRead(LCDConfig.D7);
  2938  00700E  5059               	movf	_LCDConfig+13,w,c
  2939  007010  EC95  F038         	call	_GPIO_PinRead
  2940  007014  6E0B               	movwf	lcd_BusyCheck@busyflag,c
  2941                           
  2942                           ;lcd.c: 879: if(LCDConfig.v_LcdMode_U8 == 4)
  2943  007016  0E04               	movlw	4
  2944  007018  184E               	xorwf	_LCDConfig+2,w,c
  2945  00701A  A4D8               	btfss	status,2,c
  2946  00701C  D016               	goto	l1964
  2947                           
  2948                           ;lcd.c: 880: {
  2949                           ;lcd.c: 882: GPIO_PinWrite(LCDConfig.EN,0);
  2950  00701E  0E00               	movlw	0
  2951  007020  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2952  007022  5051               	movf	_LCDConfig+5,w,c
  2953  007024  EC23  F03A         	call	_GPIO_PinWrite
  2954                           
  2955                           ;lcd.c: 883: DELAY_us(10);
  2956  007028  0E00               	movlw	0
  2957  00702A  6E02               	movwf	DELAY_us@us_count+1,c
  2958  00702C  0E0A               	movlw	10
  2959  00702E  6E01               	movwf	DELAY_us@us_count,c
  2960  007030  EC94  F034         	call	_DELAY_us	;wreg free
  2961                           
  2962                           ;lcd.c: 884: GPIO_PinWrite(LCDConfig.EN,1);
  2963  007034  0E01               	movlw	1
  2964  007036  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2965  007038  5051               	movf	_LCDConfig+5,w,c
  2966  00703A  EC23  F03A         	call	_GPIO_PinWrite
  2967                           
  2968                           ;lcd.c: 885: DELAY_us(10);
  2969  00703E  0E00               	movlw	0
  2970  007040  6E02               	movwf	DELAY_us@us_count+1,c
  2971  007042  0E0A               	movlw	10
  2972  007044  6E01               	movwf	DELAY_us@us_count,c
  2973  007046  EC94  F034         	call	_DELAY_us	;wreg free
  2974  00704A                     l1964:
  2975                           
  2976                           ;lcd.c: 886: }
  2977                           ;lcd.c: 887: }while(busyflag!=0);
  2978  00704A  500B               	movf	lcd_BusyCheck@busyflag,w,c
  2979  00704C  A4D8               	btfss	status,2,c
  2980  00704E  D7C9               	goto	l395
  2981                           
  2982                           ;lcd.c: 889: GPIO_PinDirection(LCDConfig.D7,0x00u);
  2983  007050  0E00               	movlw	0
  2984  007052  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2985  007054  5059               	movf	_LCDConfig+13,w,c
  2986  007056  EC73  F039         	call	_GPIO_PinDirection
  2987                           
  2988                           ;lcd.c: 890: }
  2989  00705A  0012               	return	
  2990  00705C                     l1968:
  2991                           
  2992                           ;lcd.c: 891: else
  2993                           ;lcd.c: 892: {
  2994                           ;lcd.c: 895: DELAY_ms(1);
  2995  00705C  0E00               	movlw	0
  2996  00705E  6E04               	movwf	DELAY_ms@ms_count+1,c
  2997  007060  0E01               	movlw	1
  2998  007062  6E03               	movwf	DELAY_ms@ms_count,c
  2999  007064  EC9D  F034         	call	_DELAY_ms	;wreg free
  3000  007068  0012               	return	
  3001  00706A                     __end_of_lcd_BusyCheck:
  3002                           	opt stack 0
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           prodh	equ	0xFF4
  3008                           prodl	equ	0xFF3
  3009                           postinc0	equ	0xFEE
  3010                           wreg	equ	0xFE8
  3011                           postdec1	equ	0xFE5
  3012                           fsr1l	equ	0xFE1
  3013                           indf2	equ	0xFDF
  3014                           fsr2h	equ	0xFDA
  3015                           fsr2l	equ	0xFD9
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function _GPIO_PinWrite *****************
  3019 ;; Defined at:
  3020 ;;		line 127 in file "gpio.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  enm_pinNumbe    1    wreg     enum E3211
  3023 ;;  var_pinValue    1    5[COMRAM] unsigned char 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  enm_pinNumbe    1    9[COMRAM] enum E3211
  3026 ;;  var_portNumb    1    8[COMRAM] unsigned char 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, status,2, status,0
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3036 ;;      Params:         1       0       0       0       0       0       0
  3037 ;;      Locals:         2       0       0       0       0       0       0
  3038 ;;      Temps:          2       0       0       0       0       0       0
  3039 ;;      Totals:         5       0       0       0       0       0       0
  3040 ;;Total ram usage:        5 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; This function calls:
  3043 ;;		Nothing
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;;		_switch_Test
  3047 ;;		_lcd_BusyCheck
  3048 ;;		_lcd_SendHigherNibble
  3049 ;;		_lcd_SendLowerNibble
  3050 ;;		_lcd_SendCmdSignals
  3051 ;;		_lcd_SendDataSignals
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text19
  3056  007446                     __ptext19:
  3057                           	opt stack 0
  3058  007446                     _GPIO_PinWrite:
  3059                           	opt stack 29
  3060                           
  3061                           ;incstack = 0
  3062                           ;GPIO_PinWrite@enm_pinNumber stored from wreg
  3063  007446  6E0A               	movwf	GPIO_PinWrite@enm_pinNumber,c
  3064                           
  3065                           ;gpio.c: 130: uint8_t var_portNumber_u8;
  3066                           ;gpio.c: 133: var_portNumber_u8 = (enm_pinNumber>>3);
  3067  007448  380A               	swapf	GPIO_PinWrite@enm_pinNumber,w,c
  3068  00744A  46E8               	rlncf	wreg,f,c
  3069  00744C  0B1F               	andlw	31
  3070  00744E  6E09               	movwf	GPIO_PinWrite@var_portNumber_u8,c
  3071                           
  3072                           ;gpio.c: 134: enm_pinNumber = enm_pinNumber & 0x07;
  3073  007450  500A               	movf	GPIO_PinWrite@enm_pinNumber,w,c
  3074  007452  0B07               	andlw	7
  3075  007454  6E0A               	movwf	GPIO_PinWrite@enm_pinNumber,c
  3076                           
  3077                           ;gpio.c: 138: switch(var_portNumber_u8)
  3078  007456  D096               	goto	l1946
  3079  007458                     l1914:
  3080                           
  3081                           ;gpio.c: 142: ((var_pinValue_u8)? ((LATA) |= ((uint8_t)1<<(enm_pinNumber))): ((LATA) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3082  007458  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3083  00745A  B4D8               	btfsc	status,2,c
  3084  00745C  D00D               	goto	l1918
  3085  00745E  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3086  007462  0E01               	movlw	1
  3087  007464  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3088  007466  2A07               	incf	??_GPIO_PinWrite,f,c
  3089  007468  D002               	goto	u1584
  3090  00746A                     u1585:
  3091  00746A  90D8               	bcf	status,0,c
  3092  00746C  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3093  00746E                     u1584:
  3094  00746E  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3095  007470  D7FC               	goto	u1585
  3096  007472  5008               	movf	??_GPIO_PinWrite+1,w,c
  3097  007474  1289               	iorwf	3977,f,c	;volatile
  3098  007476  0012               	return	
  3099  007478                     l1918:
  3100  007478  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3101  00747C  0E01               	movlw	1
  3102  00747E  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3103  007480  2A07               	incf	??_GPIO_PinWrite,f,c
  3104  007482  D002               	goto	u1594
  3105  007484                     u1595:
  3106  007484  90D8               	bcf	status,0,c
  3107  007486  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3108  007488                     u1594:
  3109  007488  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3110  00748A  D7FC               	goto	u1595
  3111  00748C  5008               	movf	??_GPIO_PinWrite+1,w,c
  3112  00748E  0AFF               	xorlw	255
  3113  007490  1689               	andwf	3977,f,c	;volatile
  3114                           
  3115                           ;gpio.c: 143: break;
  3116  007492  0012               	return	
  3117  007494                     l1920:
  3118                           
  3119                           ;gpio.c: 148: ((var_pinValue_u8)? ((LATB) |= ((uint8_t)1<<(enm_pinNumber))): ((LATB) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3120  007494  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3121  007496  B4D8               	btfsc	status,2,c
  3122  007498  D00D               	goto	l1924
  3123  00749A  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3124  00749E  0E01               	movlw	1
  3125  0074A0  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3126  0074A2  2A07               	incf	??_GPIO_PinWrite,f,c
  3127  0074A4  D002               	goto	u1614
  3128  0074A6                     u1615:
  3129  0074A6  90D8               	bcf	status,0,c
  3130  0074A8  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3131  0074AA                     u1614:
  3132  0074AA  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3133  0074AC  D7FC               	goto	u1615
  3134  0074AE  5008               	movf	??_GPIO_PinWrite+1,w,c
  3135  0074B0  128A               	iorwf	3978,f,c	;volatile
  3136  0074B2  0012               	return	
  3137  0074B4                     l1924:
  3138  0074B4  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3139  0074B8  0E01               	movlw	1
  3140  0074BA  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3141  0074BC  2A07               	incf	??_GPIO_PinWrite,f,c
  3142  0074BE  D002               	goto	u1624
  3143  0074C0                     u1625:
  3144  0074C0  90D8               	bcf	status,0,c
  3145  0074C2  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3146  0074C4                     u1624:
  3147  0074C4  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3148  0074C6  D7FC               	goto	u1625
  3149  0074C8  5008               	movf	??_GPIO_PinWrite+1,w,c
  3150  0074CA  0AFF               	xorlw	255
  3151  0074CC  168A               	andwf	3978,f,c	;volatile
  3152                           
  3153                           ;gpio.c: 149: break;
  3154  0074CE  0012               	return	
  3155  0074D0                     l1926:
  3156                           
  3157                           ;gpio.c: 154: ((var_pinValue_u8)? ((LATC) |= ((uint8_t)1<<(enm_pinNumber))): ((LATC) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3158  0074D0  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3159  0074D2  B4D8               	btfsc	status,2,c
  3160  0074D4  D00D               	goto	l1930
  3161  0074D6  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3162  0074DA  0E01               	movlw	1
  3163  0074DC  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3164  0074DE  2A07               	incf	??_GPIO_PinWrite,f,c
  3165  0074E0  D002               	goto	u1644
  3166  0074E2                     u1645:
  3167  0074E2  90D8               	bcf	status,0,c
  3168  0074E4  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3169  0074E6                     u1644:
  3170  0074E6  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3171  0074E8  D7FC               	goto	u1645
  3172  0074EA  5008               	movf	??_GPIO_PinWrite+1,w,c
  3173  0074EC  128B               	iorwf	3979,f,c	;volatile
  3174  0074EE  0012               	return	
  3175  0074F0                     l1930:
  3176  0074F0  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3177  0074F4  0E01               	movlw	1
  3178  0074F6  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3179  0074F8  2A07               	incf	??_GPIO_PinWrite,f,c
  3180  0074FA  D002               	goto	u1654
  3181  0074FC                     u1655:
  3182  0074FC  90D8               	bcf	status,0,c
  3183  0074FE  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3184  007500                     u1654:
  3185  007500  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3186  007502  D7FC               	goto	u1655
  3187  007504  5008               	movf	??_GPIO_PinWrite+1,w,c
  3188  007506  0AFF               	xorlw	255
  3189  007508  168B               	andwf	3979,f,c	;volatile
  3190                           
  3191                           ;gpio.c: 155: break;
  3192  00750A  0012               	return	
  3193  00750C                     l1932:
  3194                           
  3195                           ;gpio.c: 160: ((var_pinValue_u8)? ((LATD) |= ((uint8_t)1<<(enm_pinNumber))): ((LATD) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3196  00750C  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3197  00750E  B4D8               	btfsc	status,2,c
  3198  007510  D00D               	goto	l1936
  3199  007512  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3200  007516  0E01               	movlw	1
  3201  007518  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3202  00751A  2A07               	incf	??_GPIO_PinWrite,f,c
  3203  00751C  D002               	goto	u1674
  3204  00751E                     u1675:
  3205  00751E  90D8               	bcf	status,0,c
  3206  007520  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3207  007522                     u1674:
  3208  007522  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3209  007524  D7FC               	goto	u1675
  3210  007526  5008               	movf	??_GPIO_PinWrite+1,w,c
  3211  007528  128C               	iorwf	3980,f,c	;volatile
  3212  00752A  0012               	return	
  3213  00752C                     l1936:
  3214  00752C  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3215  007530  0E01               	movlw	1
  3216  007532  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3217  007534  2A07               	incf	??_GPIO_PinWrite,f,c
  3218  007536  D002               	goto	u1684
  3219  007538                     u1685:
  3220  007538  90D8               	bcf	status,0,c
  3221  00753A  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3222  00753C                     u1684:
  3223  00753C  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3224  00753E  D7FC               	goto	u1685
  3225  007540  5008               	movf	??_GPIO_PinWrite+1,w,c
  3226  007542  0AFF               	xorlw	255
  3227  007544  168C               	andwf	3980,f,c	;volatile
  3228                           
  3229                           ;gpio.c: 161: break;
  3230  007546  0012               	return	
  3231  007548                     l1938:
  3232                           
  3233                           ;gpio.c: 166: ((var_pinValue_u8)? ((LATE) |= ((uint8_t)1<<(enm_pinNumber))): ((LATE) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3234  007548  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3235  00754A  B4D8               	btfsc	status,2,c
  3236  00754C  D00D               	goto	l1942
  3237  00754E  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3238  007552  0E01               	movlw	1
  3239  007554  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3240  007556  2A07               	incf	??_GPIO_PinWrite,f,c
  3241  007558  D002               	goto	u1704
  3242  00755A                     u1705:
  3243  00755A  90D8               	bcf	status,0,c
  3244  00755C  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3245  00755E                     u1704:
  3246  00755E  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3247  007560  D7FC               	goto	u1705
  3248  007562  5008               	movf	??_GPIO_PinWrite+1,w,c
  3249  007564  128D               	iorwf	3981,f,c	;volatile
  3250  007566  0012               	return	
  3251  007568                     l1942:
  3252  007568  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3253  00756C  0E01               	movlw	1
  3254  00756E  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3255  007570  2A07               	incf	??_GPIO_PinWrite,f,c
  3256  007572  D002               	goto	u1714
  3257  007574                     u1715:
  3258  007574  90D8               	bcf	status,0,c
  3259  007576  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3260  007578                     u1714:
  3261  007578  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3262  00757A  D7FC               	goto	u1715
  3263  00757C  5008               	movf	??_GPIO_PinWrite+1,w,c
  3264  00757E  0AFF               	xorlw	255
  3265  007580  168D               	andwf	3981,f,c	;volatile
  3266                           
  3267                           ;gpio.c: 169: }
  3268                           
  3269                           ;gpio.c: 167: break;
  3270  007582  0012               	return	
  3271  007584                     l1946:
  3272  007584  5009               	movf	GPIO_PinWrite@var_portNumber_u8,w,c
  3273                           
  3274                           ; Switch size 1, requested type "space"
  3275                           ; Number of cases is 5, Range of values is 0 to 4
  3276                           ; switch strategies available:
  3277                           ; Name         Instructions Cycles
  3278                           ; simple_byte           16     9 (average)
  3279                           ;	Chosen strategy is simple_byte
  3280  007586  0A00               	xorlw	0	; case 0
  3281  007588  B4D8               	btfsc	status,2,c
  3282  00758A  D766               	goto	l1914
  3283  00758C  0A01               	xorlw	1	; case 1
  3284  00758E  B4D8               	btfsc	status,2,c
  3285  007590  D781               	goto	l1920
  3286  007592  0A03               	xorlw	3	; case 2
  3287  007594  B4D8               	btfsc	status,2,c
  3288  007596  D79C               	goto	l1926
  3289  007598  0A01               	xorlw	1	; case 3
  3290  00759A  B4D8               	btfsc	status,2,c
  3291  00759C  D7B7               	goto	l1932
  3292  00759E  0A07               	xorlw	7	; case 4
  3293  0075A0  A4D8               	btfss	status,2,c
  3294  0075A2  0012               	return	
  3295  0075A4  D7D1               	goto	l1938
  3296  0075A6                     __end_of_GPIO_PinWrite:
  3297                           	opt stack 0
  3298                           tblptru	equ	0xFF8
  3299                           tblptrh	equ	0xFF7
  3300                           tblptrl	equ	0xFF6
  3301                           tablat	equ	0xFF5
  3302                           prodh	equ	0xFF4
  3303                           prodl	equ	0xFF3
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           postdec1	equ	0xFE5
  3307                           fsr1l	equ	0xFE1
  3308                           indf2	equ	0xFDF
  3309                           fsr2h	equ	0xFDA
  3310                           fsr2l	equ	0xFD9
  3311                           status	equ	0xFD8
  3312                           
  3313 ;; *************** function _GPIO_PinRead *****************
  3314 ;; Defined at:
  3315 ;;		line 192 in file "gpio.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  enm_pinNumbe    1    wreg     enum E3211
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  3320 ;;  returnStatus    1    3[COMRAM] unsigned char 
  3321 ;;  var_portNumb    1    2[COMRAM] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      unsigned char 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3331 ;;      Params:         0       0       0       0       0       0       0
  3332 ;;      Locals:         3       0       0       0       0       0       0
  3333 ;;      Temps:          2       0       0       0       0       0       0
  3334 ;;      Totals:         5       0       0       0       0       0       0
  3335 ;;Total ram usage:        5 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; This function calls:
  3338 ;;		Nothing
  3339 ;; This function is called by:
  3340 ;;		_main
  3341 ;;		_switch_Test
  3342 ;;		_lcd_BusyCheck
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text20
  3347  00712A                     __ptext20:
  3348                           	opt stack 0
  3349  00712A                     _GPIO_PinRead:
  3350                           	opt stack 29
  3351                           
  3352                           ;incstack = 0
  3353                           ;GPIO_PinRead@enm_pinNumber stored from wreg
  3354  00712A  6E05               	movwf	GPIO_PinRead@enm_pinNumber,c
  3355                           
  3356                           ;gpio.c: 194: uint8_t var_portNumber_u8;
  3357                           ;gpio.c: 195: uint8_t returnStatus = 0;
  3358  00712C  0E00               	movlw	0
  3359  00712E  6E04               	movwf	GPIO_PinRead@returnStatus,c
  3360                           
  3361                           ;gpio.c: 197: var_portNumber_u8 = (enm_pinNumber>>3);
  3362  007130  3805               	swapf	GPIO_PinRead@enm_pinNumber,w,c
  3363  007132  46E8               	rlncf	wreg,f,c
  3364  007134  0B1F               	andlw	31
  3365  007136  6E03               	movwf	GPIO_PinRead@var_portNumber_u8,c
  3366                           
  3367                           ;gpio.c: 198: enm_pinNumber = enm_pinNumber & 0x07;
  3368  007138  5005               	movf	GPIO_PinRead@enm_pinNumber,w,c
  3369  00713A  0B07               	andlw	7
  3370  00713C  6E05               	movwf	GPIO_PinRead@enm_pinNumber,c
  3371                           
  3372                           ;gpio.c: 201: switch(var_portNumber_u8)
  3373  00713E  D04C               	goto	l1210
  3374  007140                     l1198:
  3375                           
  3376                           ;gpio.c: 205: returnStatus = (((PORTA)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3377  007140  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3378  007144  0E01               	movlw	1
  3379  007146  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3380  007148  2A01               	incf	??_GPIO_PinRead,f,c
  3381  00714A  D002               	goto	u174
  3382  00714C                     u175:
  3383  00714C  90D8               	bcf	status,0,c
  3384  00714E  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3385  007150                     u174:
  3386  007150  2E01               	decfsz	??_GPIO_PinRead,f,c
  3387  007152  D7FC               	goto	u175
  3388  007154  5002               	movf	??_GPIO_PinRead+1,w,c
  3389  007156  1480               	andwf	3968,w,c	;volatile
  3390  007158  0900               	iorlw	0
  3391  00715A  B4D8               	btfsc	status,2,c
  3392  00715C  D03B               	goto	u300
  3393  00715E  D029               	goto	u271
  3394  007160                     u190:
  3395  007160  6E04               	movwf	GPIO_PinRead@returnStatus,c
  3396                           
  3397                           ;gpio.c: 206: break;
  3398  007162  D04A               	goto	l1212
  3399  007164                     l1200:
  3400                           
  3401                           ;gpio.c: 210: returnStatus = (((PORTB)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3402  007164  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3403  007168  0E01               	movlw	1
  3404  00716A  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3405  00716C  2A01               	incf	??_GPIO_PinRead,f,c
  3406  00716E  D002               	goto	u204
  3407  007170                     u205:
  3408  007170  90D8               	bcf	status,0,c
  3409  007172  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3410  007174                     u204:
  3411  007174  2E01               	decfsz	??_GPIO_PinRead,f,c
  3412  007176  D7FC               	goto	u205
  3413  007178  5002               	movf	??_GPIO_PinRead+1,w,c
  3414  00717A  1481               	andwf	3969,w,c	;volatile
  3415  00717C  D028               	goto	L3
  3416  00717E                     l1202:
  3417                           
  3418                           ;gpio.c: 215: returnStatus = (((PORTC)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3419  00717E  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3420  007182  0E01               	movlw	1
  3421  007184  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3422  007186  2A01               	incf	??_GPIO_PinRead,f,c
  3423  007188  D002               	goto	u234
  3424  00718A                     u235:
  3425  00718A  90D8               	bcf	status,0,c
  3426  00718C  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3427  00718E                     u234:
  3428  00718E  2E01               	decfsz	??_GPIO_PinRead,f,c
  3429  007190  D7FC               	goto	u235
  3430  007192  5002               	movf	??_GPIO_PinRead+1,w,c
  3431  007194  1482               	andwf	3970,w,c	;volatile
  3432  007196  D01B               	goto	L3
  3433  007198                     l1204:
  3434                           
  3435                           ;gpio.c: 221: returnStatus = (((PORTD)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3436  007198  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3437  00719C  0E01               	movlw	1
  3438  00719E  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3439  0071A0  2A01               	incf	??_GPIO_PinRead,f,c
  3440  0071A2  D002               	goto	u264
  3441  0071A4                     u265:
  3442  0071A4  90D8               	bcf	status,0,c
  3443  0071A6  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3444  0071A8                     u264:
  3445  0071A8  2E01               	decfsz	??_GPIO_PinRead,f,c
  3446  0071AA  D7FC               	goto	u265
  3447  0071AC  5002               	movf	??_GPIO_PinRead+1,w,c
  3448  0071AE  1483               	andwf	3971,w,c	;volatile
  3449  0071B0  D00E               	goto	L3
  3450  0071B2                     u271:
  3451  0071B2  0E01               	movlw	1
  3452  0071B4  D7D5               	goto	u190
  3453  0071B6                     l1206:
  3454                           
  3455                           ;gpio.c: 227: returnStatus = (((PORTE)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3456  0071B6  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3457  0071BA  0E01               	movlw	1
  3458  0071BC  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3459  0071BE  2A01               	incf	??_GPIO_PinRead,f,c
  3460  0071C0  D002               	goto	u294
  3461  0071C2                     u295:
  3462  0071C2  90D8               	bcf	status,0,c
  3463  0071C4  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3464  0071C6                     u294:
  3465  0071C6  2E01               	decfsz	??_GPIO_PinRead,f,c
  3466  0071C8  D7FC               	goto	u295
  3467  0071CA  5002               	movf	??_GPIO_PinRead+1,w,c
  3468  0071CC  1484               	andwf	3972,w,c	;volatile
  3469  0071CE                     L3:
  3470  0071CE  0900               	iorlw	0
  3471  0071D0  A4D8               	btfss	status,2,c
  3472  0071D2  D7EF               	goto	u271
  3473  0071D4                     u300:
  3474  0071D4  0E00               	movlw	0
  3475  0071D6  D7C4               	goto	u190
  3476  0071D8                     l1210:
  3477  0071D8  5003               	movf	GPIO_PinRead@var_portNumber_u8,w,c
  3478                           
  3479                           ; Switch size 1, requested type "space"
  3480                           ; Number of cases is 5, Range of values is 0 to 4
  3481                           ; switch strategies available:
  3482                           ; Name         Instructions Cycles
  3483                           ; simple_byte           16     9 (average)
  3484                           ;	Chosen strategy is simple_byte
  3485  0071DA  0A00               	xorlw	0	; case 0
  3486  0071DC  B4D8               	btfsc	status,2,c
  3487  0071DE  D7B0               	goto	l1198
  3488  0071E0  0A01               	xorlw	1	; case 1
  3489  0071E2  B4D8               	btfsc	status,2,c
  3490  0071E4  D7BF               	goto	l1200
  3491  0071E6  0A03               	xorlw	3	; case 2
  3492  0071E8  B4D8               	btfsc	status,2,c
  3493  0071EA  D7C9               	goto	l1202
  3494  0071EC  0A01               	xorlw	1	; case 3
  3495  0071EE  B4D8               	btfsc	status,2,c
  3496  0071F0  D7D3               	goto	l1204
  3497  0071F2  0A07               	xorlw	7	; case 4
  3498  0071F4  B4D8               	btfsc	status,2,c
  3499  0071F6  D7DF               	goto	l1206
  3500  0071F8                     l1212:
  3501                           
  3502                           ;gpio.c: 230: return returnStatus;
  3503  0071F8  5004               	movf	GPIO_PinRead@returnStatus,w,c
  3504  0071FA  0012               	return	
  3505  0071FC                     __end_of_GPIO_PinRead:
  3506                           	opt stack 0
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           prodh	equ	0xFF4
  3512                           prodl	equ	0xFF3
  3513                           postinc0	equ	0xFEE
  3514                           wreg	equ	0xFE8
  3515                           postdec1	equ	0xFE5
  3516                           fsr1l	equ	0xFE1
  3517                           indf2	equ	0xFDF
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function _GPIO_PinDirection *****************
  3523 ;; Defined at:
  3524 ;;		line 60 in file "gpio.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;  enm_pinNumbe    1    wreg     enum E3211
  3527 ;;  var_pinDirn_    1    0[COMRAM] unsigned char 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  3530 ;;  var_portNumb    1    3[COMRAM] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3540 ;;      Params:         1       0       0       0       0       0       0
  3541 ;;      Locals:         2       0       0       0       0       0       0
  3542 ;;      Temps:          2       0       0       0       0       0       0
  3543 ;;      Totals:         5       0       0       0       0       0       0
  3544 ;;Total ram usage:        5 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; This function calls:
  3547 ;;		Nothing
  3548 ;; This function is called by:
  3549 ;;		_main
  3550 ;;		_switch_Test
  3551 ;;		_LCD_SetUp
  3552 ;;		_lcd_BusyCheck
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text21
  3557  0072E6                     __ptext21:
  3558                           	opt stack 0
  3559  0072E6                     _GPIO_PinDirection:
  3560                           	opt stack 29
  3561                           
  3562                           ;incstack = 0
  3563                           ;GPIO_PinDirection@enm_pinNumber stored from wreg
  3564  0072E6  6E05               	movwf	GPIO_PinDirection@enm_pinNumber,c
  3565                           
  3566                           ;gpio.c: 63: uint8_t var_portNumber_u8;
  3567                           ;gpio.c: 66: var_portNumber_u8 = (enm_pinNumber>>3);
  3568  0072E8  3805               	swapf	GPIO_PinDirection@enm_pinNumber,w,c
  3569  0072EA  46E8               	rlncf	wreg,f,c
  3570  0072EC  0B1F               	andlw	31
  3571  0072EE  6E04               	movwf	GPIO_PinDirection@var_portNumber_u8,c
  3572                           
  3573                           ;gpio.c: 67: enm_pinNumber = enm_pinNumber & 0x07;
  3574  0072F0  5005               	movf	GPIO_PinDirection@enm_pinNumber,w,c
  3575  0072F2  0B07               	andlw	7
  3576  0072F4  6E05               	movwf	GPIO_PinDirection@enm_pinNumber,c
  3577                           
  3578                           ;gpio.c: 71: switch(var_portNumber_u8)
  3579  0072F6  D096               	goto	l1910
  3580  0072F8                     l1878:
  3581                           
  3582                           ;gpio.c: 75: ((var_pinDirn_u8)? ((TRISA) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISA) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3583  0072F8  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3584  0072FA  B4D8               	btfsc	status,2,c
  3585  0072FC  D00D               	goto	l1882
  3586  0072FE  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3587  007302  0E01               	movlw	1
  3588  007304  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3589  007306  2A02               	incf	??_GPIO_PinDirection,f,c
  3590  007308  D002               	goto	u1434
  3591  00730A                     u1435:
  3592  00730A  90D8               	bcf	status,0,c
  3593  00730C  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3594  00730E                     u1434:
  3595  00730E  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3596  007310  D7FC               	goto	u1435
  3597  007312  5003               	movf	??_GPIO_PinDirection+1,w,c
  3598  007314  1292               	iorwf	3986,f,c	;volatile
  3599  007316  0012               	return	
  3600  007318                     l1882:
  3601  007318  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3602  00731C  0E01               	movlw	1
  3603  00731E  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3604  007320  2A02               	incf	??_GPIO_PinDirection,f,c
  3605  007322  D002               	goto	u1444
  3606  007324                     u1445:
  3607  007324  90D8               	bcf	status,0,c
  3608  007326  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3609  007328                     u1444:
  3610  007328  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3611  00732A  D7FC               	goto	u1445
  3612  00732C  5003               	movf	??_GPIO_PinDirection+1,w,c
  3613  00732E  0AFF               	xorlw	255
  3614  007330  1692               	andwf	3986,f,c	;volatile
  3615                           
  3616                           ;gpio.c: 76: break;
  3617  007332  0012               	return	
  3618  007334                     l1884:
  3619                           
  3620                           ;gpio.c: 81: ((var_pinDirn_u8)? ((TRISB) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISB) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3621  007334  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3622  007336  B4D8               	btfsc	status,2,c
  3623  007338  D00D               	goto	l1888
  3624  00733A  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3625  00733E  0E01               	movlw	1
  3626  007340  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3627  007342  2A02               	incf	??_GPIO_PinDirection,f,c
  3628  007344  D002               	goto	u1464
  3629  007346                     u1465:
  3630  007346  90D8               	bcf	status,0,c
  3631  007348  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3632  00734A                     u1464:
  3633  00734A  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3634  00734C  D7FC               	goto	u1465
  3635  00734E  5003               	movf	??_GPIO_PinDirection+1,w,c
  3636  007350  1293               	iorwf	3987,f,c	;volatile
  3637  007352  0012               	return	
  3638  007354                     l1888:
  3639  007354  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3640  007358  0E01               	movlw	1
  3641  00735A  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3642  00735C  2A02               	incf	??_GPIO_PinDirection,f,c
  3643  00735E  D002               	goto	u1474
  3644  007360                     u1475:
  3645  007360  90D8               	bcf	status,0,c
  3646  007362  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3647  007364                     u1474:
  3648  007364  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3649  007366  D7FC               	goto	u1475
  3650  007368  5003               	movf	??_GPIO_PinDirection+1,w,c
  3651  00736A  0AFF               	xorlw	255
  3652  00736C  1693               	andwf	3987,f,c	;volatile
  3653                           
  3654                           ;gpio.c: 82: break;
  3655  00736E  0012               	return	
  3656  007370                     l1890:
  3657                           
  3658                           ;gpio.c: 87: ((var_pinDirn_u8)? ((TRISC) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISC) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3659  007370  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3660  007372  B4D8               	btfsc	status,2,c
  3661  007374  D00D               	goto	l1894
  3662  007376  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3663  00737A  0E01               	movlw	1
  3664  00737C  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3665  00737E  2A02               	incf	??_GPIO_PinDirection,f,c
  3666  007380  D002               	goto	u1494
  3667  007382                     u1495:
  3668  007382  90D8               	bcf	status,0,c
  3669  007384  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3670  007386                     u1494:
  3671  007386  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3672  007388  D7FC               	goto	u1495
  3673  00738A  5003               	movf	??_GPIO_PinDirection+1,w,c
  3674  00738C  1294               	iorwf	3988,f,c	;volatile
  3675  00738E  0012               	return	
  3676  007390                     l1894:
  3677  007390  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3678  007394  0E01               	movlw	1
  3679  007396  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3680  007398  2A02               	incf	??_GPIO_PinDirection,f,c
  3681  00739A  D002               	goto	u1504
  3682  00739C                     u1505:
  3683  00739C  90D8               	bcf	status,0,c
  3684  00739E  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3685  0073A0                     u1504:
  3686  0073A0  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3687  0073A2  D7FC               	goto	u1505
  3688  0073A4  5003               	movf	??_GPIO_PinDirection+1,w,c
  3689  0073A6  0AFF               	xorlw	255
  3690  0073A8  1694               	andwf	3988,f,c	;volatile
  3691                           
  3692                           ;gpio.c: 88: break;
  3693  0073AA  0012               	return	
  3694  0073AC                     l1896:
  3695                           
  3696                           ;gpio.c: 93: ((var_pinDirn_u8)? ((TRISD) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISD) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3697  0073AC  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3698  0073AE  B4D8               	btfsc	status,2,c
  3699  0073B0  D00D               	goto	l1900
  3700  0073B2  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3701  0073B6  0E01               	movlw	1
  3702  0073B8  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3703  0073BA  2A02               	incf	??_GPIO_PinDirection,f,c
  3704  0073BC  D002               	goto	u1524
  3705  0073BE                     u1525:
  3706  0073BE  90D8               	bcf	status,0,c
  3707  0073C0  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3708  0073C2                     u1524:
  3709  0073C2  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3710  0073C4  D7FC               	goto	u1525
  3711  0073C6  5003               	movf	??_GPIO_PinDirection+1,w,c
  3712  0073C8  1295               	iorwf	3989,f,c	;volatile
  3713  0073CA  0012               	return	
  3714  0073CC                     l1900:
  3715  0073CC  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3716  0073D0  0E01               	movlw	1
  3717  0073D2  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3718  0073D4  2A02               	incf	??_GPIO_PinDirection,f,c
  3719  0073D6  D002               	goto	u1534
  3720  0073D8                     u1535:
  3721  0073D8  90D8               	bcf	status,0,c
  3722  0073DA  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3723  0073DC                     u1534:
  3724  0073DC  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3725  0073DE  D7FC               	goto	u1535
  3726  0073E0  5003               	movf	??_GPIO_PinDirection+1,w,c
  3727  0073E2  0AFF               	xorlw	255
  3728  0073E4  1695               	andwf	3989,f,c	;volatile
  3729                           
  3730                           ;gpio.c: 94: break;
  3731  0073E6  0012               	return	
  3732  0073E8                     l1902:
  3733                           
  3734                           ;gpio.c: 98: ((var_pinDirn_u8)? ((TRISE) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISE) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3735  0073E8  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3736  0073EA  B4D8               	btfsc	status,2,c
  3737  0073EC  D00D               	goto	l1906
  3738  0073EE  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3739  0073F2  0E01               	movlw	1
  3740  0073F4  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3741  0073F6  2A02               	incf	??_GPIO_PinDirection,f,c
  3742  0073F8  D002               	goto	u1554
  3743  0073FA                     u1555:
  3744  0073FA  90D8               	bcf	status,0,c
  3745  0073FC  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3746  0073FE                     u1554:
  3747  0073FE  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3748  007400  D7FC               	goto	u1555
  3749  007402  5003               	movf	??_GPIO_PinDirection+1,w,c
  3750  007404  1296               	iorwf	3990,f,c	;volatile
  3751  007406  0012               	return	
  3752  007408                     l1906:
  3753  007408  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3754  00740C  0E01               	movlw	1
  3755  00740E  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3756  007410  2A02               	incf	??_GPIO_PinDirection,f,c
  3757  007412  D002               	goto	u1564
  3758  007414                     u1565:
  3759  007414  90D8               	bcf	status,0,c
  3760  007416  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3761  007418                     u1564:
  3762  007418  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3763  00741A  D7FC               	goto	u1565
  3764  00741C  5003               	movf	??_GPIO_PinDirection+1,w,c
  3765  00741E  0AFF               	xorlw	255
  3766  007420  1696               	andwf	3990,f,c	;volatile
  3767                           
  3768                           ;gpio.c: 101: }
  3769                           
  3770                           ;gpio.c: 99: break;
  3771  007422  0012               	return	
  3772  007424                     l1910:
  3773  007424  5004               	movf	GPIO_PinDirection@var_portNumber_u8,w,c
  3774                           
  3775                           ; Switch size 1, requested type "space"
  3776                           ; Number of cases is 5, Range of values is 0 to 4
  3777                           ; switch strategies available:
  3778                           ; Name         Instructions Cycles
  3779                           ; simple_byte           16     9 (average)
  3780                           ;	Chosen strategy is simple_byte
  3781  007426  0A00               	xorlw	0	; case 0
  3782  007428  B4D8               	btfsc	status,2,c
  3783  00742A  D766               	goto	l1878
  3784  00742C  0A01               	xorlw	1	; case 1
  3785  00742E  B4D8               	btfsc	status,2,c
  3786  007430  D781               	goto	l1884
  3787  007432  0A03               	xorlw	3	; case 2
  3788  007434  B4D8               	btfsc	status,2,c
  3789  007436  D79C               	goto	l1890
  3790  007438  0A01               	xorlw	1	; case 3
  3791  00743A  B4D8               	btfsc	status,2,c
  3792  00743C  D7B7               	goto	l1896
  3793  00743E  0A07               	xorlw	7	; case 4
  3794  007440  A4D8               	btfss	status,2,c
  3795  007442  0012               	return	
  3796  007444  D7D1               	goto	l1902
  3797  007446                     __end_of_GPIO_PinDirection:
  3798                           	opt stack 0
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           postinc0	equ	0xFEE
  3806                           wreg	equ	0xFE8
  3807                           postdec1	equ	0xFE5
  3808                           fsr1l	equ	0xFE1
  3809                           indf2	equ	0xFDF
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function _DELAY_ms *****************
  3815 ;; Defined at:
  3816 ;;		line 75 in file "delay.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  ms_count        2    2[COMRAM] unsigned int 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      void 
  3823 ;; Registers used:
  3824 ;;		wreg, status,2, status,0, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3830 ;;      Params:         2       0       0       0       0       0       0
  3831 ;;      Locals:         0       0       0       0       0       0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0
  3833 ;;      Totals:         2       0       0       0       0       0       0
  3834 ;;Total ram usage:        2 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    1
  3837 ;; This function calls:
  3838 ;;		_DELAY_us
  3839 ;; This function is called by:
  3840 ;;		_main
  3841 ;;		_led_Test
  3842 ;;		_LCD_Init
  3843 ;;		_lcd_BusyCheck
  3844 ;;		_lcd_Reset
  3845 ;;		_DELAY_sec
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text22
  3850  00693A                     __ptext22:
  3851                           	opt stack 0
  3852  00693A                     _DELAY_ms:
  3853                           	opt stack 28
  3854                           
  3855                           ;delay.c: 77: while (ms_count != 0)
  3856                           
  3857                           ;incstack = 0
  3858  00693A  D009               	goto	l1954
  3859  00693C                     l1950:
  3860                           
  3861                           ;delay.c: 78: {
  3862                           ;delay.c: 79: DELAY_us(350u);
  3863  00693C  0E01               	movlw	1
  3864  00693E  6E02               	movwf	DELAY_us@us_count+1,c
  3865  006940  0E5E               	movlw	94
  3866  006942  6E01               	movwf	DELAY_us@us_count,c
  3867  006944  EC94  F034         	call	_DELAY_us	;wreg free
  3868                           
  3869                           ;delay.c: 80: ms_count--;
  3870  006948  0603               	decf	DELAY_ms@ms_count,f,c
  3871  00694A  A0D8               	btfss	status,0,c
  3872  00694C  0604               	decf	DELAY_ms@ms_count+1,f,c
  3873  00694E                     l1954:
  3874  00694E  5003               	movf	DELAY_ms@ms_count,w,c
  3875  006950  1004               	iorwf	DELAY_ms@ms_count+1,w,c
  3876  006952  B4D8               	btfsc	status,2,c
  3877  006954  0012               	return	
  3878  006956  D7F2               	goto	l1950
  3879  006958                     __end_of_DELAY_ms:
  3880                           	opt stack 0
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           prodh	equ	0xFF4
  3886                           prodl	equ	0xFF3
  3887                           postinc0	equ	0xFEE
  3888                           wreg	equ	0xFE8
  3889                           postdec1	equ	0xFE5
  3890                           fsr1l	equ	0xFE1
  3891                           indf2	equ	0xFDF
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _eeprom_Test *****************
  3897 ;; Defined at:
  3898 ;;		line 205 in file "main.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;  write_char      2   72[COMRAM] unsigned int 
  3903 ;;  eeprom_addre    2   70[COMRAM] unsigned int 
  3904 ;;  read_char       2   68[COMRAM] unsigned int 
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3914 ;;      Params:         0       0       0       0       0       0       0
  3915 ;;      Locals:         6       0       0       0       0       0       0
  3916 ;;      Temps:          1       0       0       0       0       0       0
  3917 ;;      Totals:         7       0       0       0       0       0       0
  3918 ;;Total ram usage:        7 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    3
  3921 ;; This function calls:
  3922 ;;		_EEPROM_ReadByte
  3923 ;;		_EEPROM_WriteByte
  3924 ;;		_UART_Printf
  3925 ;; This function is called by:
  3926 ;;		_main
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text23
  3931  006E2A                     __ptext23:
  3932                           	opt stack 0
  3933  006E2A                     _eeprom_Test:
  3934                           	opt stack 27
  3935                           
  3936                           ;main.c: 206: unsigned int eeprom_address = 0, write_char = 'A', read_char;
  3937                           
  3938                           ;incstack = 0
  3939  006E2A  0E00               	movlw	0
  3940  006E2C  6E48               	movwf	eeprom_Test@eeprom_address+1,c
  3941  006E2E  0E00               	movlw	0
  3942  006E30  6E47               	movwf	eeprom_Test@eeprom_address,c
  3943  006E32  0E00               	movlw	0
  3944  006E34  6E4A               	movwf	eeprom_Test@write_char+1,c
  3945  006E36  0E41               	movlw	65
  3946  006E38  6E49               	movwf	eeprom_Test@write_char,c
  3947                           
  3948                           ;main.c: 207: UART_Printf("\n\r\n\rInbuilt Eeprom Test. Writing and reading A-Z to and f
      +                          rom Eeprom.");
  3949  006E3A  0E32               	movlw	low STR_5
  3950  006E3C  6E2C               	movwf	UART_Printf@argList,c
  3951  006E3E  0E7B               	movlw	high STR_5
  3952  006E40  6E2D               	movwf	UART_Printf@argList+1,c
  3953  006E42  ECBB  F03B         	call	_UART_Printf	;wreg free
  3954  006E46                     l2442:
  3955                           
  3956                           ;main.c: 210: UART_Printf("\n\rEeprom Write: %c    ", write_char);
  3957  006E46  0EC5               	movlw	low STR_6
  3958  006E48  6E2C               	movwf	UART_Printf@argList,c
  3959  006E4A  0E7B               	movlw	high STR_6
  3960  006E4C  6E2D               	movwf	UART_Printf@argList+1,c
  3961  006E4E  C049  F02E         	movff	eeprom_Test@write_char,?_UART_Printf+2
  3962  006E52  C04A  F02F         	movff	eeprom_Test@write_char+1,?_UART_Printf+3
  3963  006E56  ECBB  F03B         	call	_UART_Printf	;wreg free
  3964                           
  3965                           ;main.c: 211: EEPROM_WriteByte(eeprom_address, write_char);
  3966  006E5A  C047  F001         	movff	eeprom_Test@eeprom_address,EEPROM_WriteByte@v_eepromAddress_u16
  3967  006E5E  C048  F002         	movff	eeprom_Test@eeprom_address+1,EEPROM_WriteByte@v_eepromAddress_u16+1
  3968  006E62  C049  F003         	movff	eeprom_Test@write_char,EEPROM_WriteByte@v_eepromData_u8
  3969  006E66  EC34  F035         	call	_EEPROM_WriteByte	;wreg free
  3970                           
  3971                           ;main.c: 214: read_char = EEPROM_ReadByte(eeprom_address);
  3972  006E6A  C047  F001         	movff	eeprom_Test@eeprom_address,EEPROM_ReadByte@v_eepromAddress_u16
  3973  006E6E  C048  F002         	movff	eeprom_Test@eeprom_address+1,EEPROM_ReadByte@v_eepromAddress_u16+1
  3974  006E72  EC8C  F034         	call	_EEPROM_ReadByte	;wreg free
  3975  006E76  6E44               	movwf	??_eeprom_Test& (0+255),c
  3976  006E78  5044               	movf	??_eeprom_Test,w,c
  3977  006E7A  6E45               	movwf	eeprom_Test@read_char,c
  3978  006E7C  6A46               	clrf	eeprom_Test@read_char+1,c
  3979                           
  3980                           ;main.c: 215: UART_Printf("Eeprom Read: %c", read_char);
  3981  006E7E  0EEE               	movlw	low STR_7
  3982  006E80  6E2C               	movwf	UART_Printf@argList,c
  3983  006E82  0E7B               	movlw	high STR_7
  3984  006E84  6E2D               	movwf	UART_Printf@argList+1,c
  3985  006E86  C045  F02E         	movff	eeprom_Test@read_char,?_UART_Printf+2
  3986  006E8A  C046  F02F         	movff	eeprom_Test@read_char+1,?_UART_Printf+3
  3987  006E8E  ECBB  F03B         	call	_UART_Printf	;wreg free
  3988                           
  3989                           ;main.c: 216: write_char++;
  3990  006E92  4A49               	infsnz	eeprom_Test@write_char,f,c
  3991  006E94  2A4A               	incf	eeprom_Test@write_char+1,f,c
  3992                           
  3993                           ;main.c: 217: } while (write_char <= 'Z');
  3994  006E96  504A               	movf	eeprom_Test@write_char+1,w,c
  3995  006E98  E104               	bnz	l109
  3996  006E9A  0E5B               	movlw	91
  3997  006E9C  5C49               	subwf	eeprom_Test@write_char,w,c
  3998  006E9E  A0D8               	btfss	status,0,c
  3999  006EA0  D7D2               	goto	l2442
  4000  006EA2                     l109:
  4001  006EA2  D7FF               	goto	l109
  4002  006EA4                     __end_of_eeprom_Test:
  4003                           	opt stack 0
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           postinc0	equ	0xFEE
  4011                           wreg	equ	0xFE8
  4012                           postdec1	equ	0xFE5
  4013                           fsr1l	equ	0xFE1
  4014                           indf2	equ	0xFDF
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _EEPROM_WriteByte *****************
  4020 ;; Defined at:
  4021 ;;		line 63 in file "eeprom.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  v_eepromAddr    2    0[COMRAM] unsigned int 
  4024 ;;  v_eepromData    1    2[COMRAM] unsigned char 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  gie_value       1    3[COMRAM] unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4036 ;;      Params:         3       0       0       0       0       0       0
  4037 ;;      Locals:         1       0       0       0       0       0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0
  4039 ;;      Totals:         4       0       0       0       0       0       0
  4040 ;;Total ram usage:        4 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_eeprom_Test
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text24
  4050  006A68                     __ptext24:
  4051                           	opt stack 0
  4052  006A68                     _EEPROM_WriteByte:
  4053                           	opt stack 29
  4054  006A68                     l170:
  4055  006A68  B2A6               	btfsc	4006,1,c	;volatile
  4056  006A6A  D7FE               	goto	l170
  4057                           
  4058                           ;eeprom.c: 67: EEADR=v_eepromAddress_u16;
  4059  006A6C  C001  FFA9         	movff	EEPROM_WriteByte@v_eepromAddress_u16,4009	;volatile
  4060                           
  4061                           ;eeprom.c: 69: EEDATA=v_eepromData_u8;
  4062  006A70  C003  FFA8         	movff	EEPROM_WriteByte@v_eepromData_u8,4008	;volatile
  4063                           
  4064                           ;eeprom.c: 70: gie_value = GIE;
  4065  006A74  0E00               	movlw	0
  4066  006A76  BEF2               	btfsc	intcon,7,c	;volatile
  4067  006A78  0E01               	movlw	1
  4068  006A7A  6E04               	movwf	EEPROM_WriteByte@gie_value,c
  4069                           
  4070                           ;eeprom.c: 71: GIE = 0;
  4071  006A7C  9EF2               	bcf	intcon,7,c	;volatile
  4072                           
  4073                           ;eeprom.c: 72: ((EECON1) |= ((uint8_t)1<<(2)));
  4074  006A7E  84A6               	bsf	4006,2,c	;volatile
  4075                           
  4076                           ;eeprom.c: 73: EECON2=0x55;
  4077  006A80  0E55               	movlw	85
  4078  006A82  6EA7               	movwf	4007,c	;volatile
  4079                           
  4080                           ;eeprom.c: 74: EECON2=0xaa;
  4081  006A84  0EAA               	movlw	170
  4082  006A86  6EA7               	movwf	4007,c	;volatile
  4083                           
  4084                           ;eeprom.c: 75: ((EECON1) |= ((uint8_t)1<<(1)));
  4085  006A88  82A6               	bsf	4006,1,c	;volatile
  4086                           
  4087                           ;eeprom.c: 76: ((EECON1) &= ~((uint8_t)1<<(2)));
  4088  006A8A  94A6               	bcf	4006,2,c	;volatile
  4089                           
  4090                           ;eeprom.c: 77: GIE = gie_value;
  4091  006A8C  A004               	btfss	EEPROM_WriteByte@gie_value,0,c
  4092  006A8E  D002               	goto	u2360
  4093  006A90  8EF2               	bsf	intcon,7,c	;volatile
  4094  006A92  0012               	return	
  4095  006A94                     u2360:
  4096  006A94  9EF2               	bcf	intcon,7,c	;volatile
  4097  006A96  0012               	return		;funcret
  4098  006A98                     __end_of_EEPROM_WriteByte:
  4099                           	opt stack 0
  4100                           tblptru	equ	0xFF8
  4101                           tblptrh	equ	0xFF7
  4102                           tblptrl	equ	0xFF6
  4103                           tablat	equ	0xFF5
  4104                           prodh	equ	0xFF4
  4105                           prodl	equ	0xFF3
  4106                           intcon	equ	0xFF2
  4107                           postinc0	equ	0xFEE
  4108                           wreg	equ	0xFE8
  4109                           postdec1	equ	0xFE5
  4110                           fsr1l	equ	0xFE1
  4111                           indf2	equ	0xFDF
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _EEPROM_ReadByte *****************
  4117 ;; Defined at:
  4118 ;;		line 93 in file "eeprom.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  v_eepromAddr    2    0[COMRAM] unsigned int 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      unsigned char 
  4125 ;; Registers used:
  4126 ;;		wreg, status,2, status,0
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4132 ;;      Params:         2       0       0       0       0       0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0
  4135 ;;      Totals:         2       0       0       0       0       0       0
  4136 ;;Total ram usage:        2 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_eeprom_Test
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           	psect	text25
  4146  006918                     __ptext25:
  4147                           	opt stack 0
  4148  006918                     _EEPROM_ReadByte:
  4149                           	opt stack 29
  4150  006918                     l176:
  4151  006918  A2A6               	btfss	4006,1,c	;volatile
  4152  00691A  B0A6               	btfsc	4006,0,c	;volatile
  4153  00691C  D7FD               	goto	l176
  4154                           
  4155                           ;eeprom.c: 96: EEADR=v_eepromAddress_u16;
  4156  00691E  C001  FFA9         	movff	EEPROM_ReadByte@v_eepromAddress_u16,4009	;volatile
  4157                           
  4158                           ;eeprom.c: 98: ((EECON1) |= ((uint8_t)1<<(0)));
  4159  006922  80A6               	bsf	4006,0,c	;volatile
  4160                           
  4161                           ;eeprom.c: 100: return(EEDATA);
  4162  006924  50A8               	movf	4008,w,c	;volatile
  4163  006926  0012               	return	
  4164  006928                     __end_of_EEPROM_ReadByte:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           postdec1	equ	0xFE5
  4176                           fsr1l	equ	0xFE1
  4177                           indf2	equ	0xFDF
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function _adc_Test *****************
  4183 ;; Defined at:
  4184 ;;		line 194 in file "main.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;		None
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;		None
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      void 
  4191 ;; Registers used:
  4192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4198 ;;      Params:         0       0       0       0       0       0       0
  4199 ;;      Locals:         0       0       0       0       0       0       0
  4200 ;;      Temps:          0       0       0       0       0       0       0
  4201 ;;      Totals:         0       0       0       0       0       0       0
  4202 ;;Total ram usage:        0 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    3
  4205 ;; This function calls:
  4206 ;;		_ADC_GetAdcValue
  4207 ;;		_ADC_Init
  4208 ;;		_UART_Printf
  4209 ;; This function is called by:
  4210 ;;		_main
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text26
  4215  006958                     __ptext26:
  4216                           	opt stack 0
  4217  006958                     _adc_Test:
  4218                           	opt stack 27
  4219                           
  4220                           ;main.c: 196: ADC_Init();
  4221                           
  4222                           ;incstack = 0
  4223  006958  EC77  F034         	call	_ADC_Init	;wreg free
  4224  00695C                     l2436:
  4225                           
  4226                           ;main.c: 199: {
  4227                           ;main.c: 200: UART_Printf("\n\rADC0 value= %4d",(uint16_t)ADC_GetAdcValue(0));
  4228  00695C  0EDC               	movlw	low STR_4
  4229  00695E  6E2C               	movwf	UART_Printf@argList,c
  4230  006960  0E7B               	movlw	high STR_4
  4231  006962  6E2D               	movwf	UART_Printf@argList+1,c
  4232  006964  0E00               	movlw	0
  4233  006966  EC4C  F035         	call	_ADC_GetAdcValue
  4234  00696A  C003  F02E         	movff	?_ADC_GetAdcValue,?_UART_Printf+2
  4235  00696E  C004  F02F         	movff	?_ADC_GetAdcValue+1,?_UART_Printf+3
  4236  006972  ECBB  F03B         	call	_UART_Printf	;wreg free
  4237  006976  D7F2               	goto	l2436
  4238  006978                     __end_of_adc_Test:
  4239                           	opt stack 0
  4240                           tblptru	equ	0xFF8
  4241                           tblptrh	equ	0xFF7
  4242                           tblptrl	equ	0xFF6
  4243                           tablat	equ	0xFF5
  4244                           prodh	equ	0xFF4
  4245                           prodl	equ	0xFF3
  4246                           intcon	equ	0xFF2
  4247                           postinc0	equ	0xFEE
  4248                           wreg	equ	0xFE8
  4249                           postdec1	equ	0xFE5
  4250                           fsr1l	equ	0xFE1
  4251                           indf2	equ	0xFDF
  4252                           fsr2h	equ	0xFDA
  4253                           fsr2l	equ	0xFD9
  4254                           status	equ	0xFD8
  4255                           
  4256 ;; *************** function _UART_Printf *****************
  4257 ;; Defined at:
  4258 ;;		line 413 in file "uart.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;  argList         2   43[COMRAM] PTR const unsigned char 
  4261 ;;		 -> STR_7(16), STR_6(23), STR_5(69), STR_4(18), 
  4262 ;;		 -> STR_1(131), 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  v_num_u32       4   55[COMRAM] unsigned long 
  4265 ;;  v_num_s32       4   49[COMRAM] long 
  4266 ;;  argp            2   65[COMRAM] PTR void [1]
  4267 ;;		 -> ?_UART_Printf(1), 
  4268 ;;  ptr             2   61[COMRAM] PTR const unsigned char 
  4269 ;;		 -> STR_7(16), STR_6(23), STR_5(69), STR_4(18), 
  4270 ;;		 -> STR_1(131), 
  4271 ;;  v_num_u16       2   59[COMRAM] unsigned int 
  4272 ;;  v_num_s16       2   53[COMRAM] int 
  4273 ;;  str             2   47[COMRAM] PTR unsigned char 
  4274 ;;  v_numOfDigit    1   64[COMRAM] unsigned char 
  4275 ;;  ch              1   63[COMRAM] unsigned char 
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  1    wreg      void 
  4278 ;; Registers used:
  4279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4285 ;;      Params:         4       0       0       0       0       0       0
  4286 ;;      Locals:        20       0       0       0       0       0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0
  4288 ;;      Totals:        24       0       0       0       0       0       0
  4289 ;;Total ram usage:       24 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    2
  4292 ;; This function calls:
  4293 ;;		_UART_TxChar
  4294 ;;		_UART_TxNumber
  4295 ;;		_UART_TxString
  4296 ;; This function is called by:
  4297 ;;		_main
  4298 ;;		_adc_Test
  4299 ;;		_eeprom_Test
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text27
  4304  007776                     __ptext27:
  4305                           	opt stack 0
  4306  007776                     _UART_Printf:
  4307                           	opt stack 27
  4308                           
  4309                           ;uart.c: 415: const char *ptr;
  4310                           ;uart.c: 416: va_list argp;
  4311                           ;uart.c: 417: sint16_t v_num_s16;
  4312                           ;uart.c: 418: sint32_t v_num_s32;
  4313                           ;uart.c: 419: uint16_t v_num_u16;
  4314                           ;uart.c: 420: uint32_t v_num_u32;
  4315                           ;uart.c: 421: char *str;
  4316                           ;uart.c: 422: char ch;
  4317                           ;uart.c: 423: uint8_t v_numOfDigitsToTransmit_u8;
  4318                           ;uart.c: 429: *argp = __va_start();
  4319                           
  4320                           ;incstack = 0
  4321  007776  0E2E               	movlw	low (?_UART_Printf+2)
  4322  007778  6E42               	movwf	UART_Printf@argp,c
  4323  00777A  0E00               	movlw	high (?_UART_Printf+2)
  4324  00777C  6E43               	movwf	UART_Printf@argp+1,c
  4325                           
  4326                           ;uart.c: 432: for(ptr = argList; *ptr != '\0'; ptr++)
  4327  00777E  C02C  F03E         	movff	UART_Printf@argList,UART_Printf@ptr
  4328  007782  C02D  F03F         	movff	UART_Printf@argList+1,UART_Printf@ptr+1
  4329  007786  D189               	goto	l2242
  4330  007788                     l2128:
  4331                           
  4332                           ;uart.c: 433: {
  4333                           ;uart.c: 435: ch= *ptr;
  4334  007788  C03E  FFF6         	movff	UART_Printf@ptr,tblptrl
  4335  00778C  C03F  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  4336  007790                     	if	0	;tblptru may be non-zero
  4337  007790                     	endif
  4338  007790                     	if	0	;tblptru may be non-zero
  4339  007790                     	endif
  4340  007790  0008               	tblrd		*
  4341  007792  CFF5 F040          	movff	tablat,UART_Printf@ch
  4342                           
  4343                           ;uart.c: 436: if(ch == '%')
  4344  007796  0E25               	movlw	37
  4345  007798  1840               	xorwf	UART_Printf@ch,w,c
  4346  00779A  A4D8               	btfss	status,2,c
  4347  00779C  D179               	goto	l2238
  4348                           
  4349                           ;uart.c: 437: {
  4350                           ;uart.c: 438: ptr++;
  4351  00779E  4A3E               	infsnz	UART_Printf@ptr,f,c
  4352  0077A0  2A3F               	incf	UART_Printf@ptr+1,f,c
  4353                           
  4354                           ;uart.c: 439: ch = *ptr;
  4355  0077A2  C03E  FFF6         	movff	UART_Printf@ptr,tblptrl
  4356  0077A6  C03F  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  4357  0077AA                     	if	0	;tblptru may be non-zero
  4358  0077AA                     	endif
  4359  0077AA                     	if	0	;tblptru may be non-zero
  4360  0077AA                     	endif
  4361  0077AA  0008               	tblrd		*
  4362  0077AC  CFF5 F040          	movff	tablat,UART_Printf@ch
  4363                           
  4364                           ;uart.c: 440: if((ch>=0x30) && (ch<=0x39))
  4365  0077B0  0E2F               	movlw	47
  4366  0077B2  6440               	cpfsgt	UART_Printf@ch,c
  4367  0077B4  D01C               	goto	l506
  4368  0077B6  0E3A               	movlw	58
  4369  0077B8  6040               	cpfslt	UART_Printf@ch,c
  4370  0077BA  D019               	goto	l506
  4371                           
  4372                           ;uart.c: 441: {
  4373                           ;uart.c: 442: v_numOfDigitsToTransmit_u8 = 0;
  4374  0077BC  0E00               	movlw	0
  4375  0077BE  6E41               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4376                           
  4377                           ;uart.c: 443: while((ch>=0x30) && (ch<=0x39))
  4378  0077C0  D00F               	goto	l2148
  4379  0077C2                     l2142:
  4380                           
  4381                           ;uart.c: 444: {
  4382                           ;uart.c: 445: v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30)
      +                          ;
  4383  0077C2  5041               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  4384  0077C4  0D0A               	mullw	10
  4385  0077C6  50F3               	movf	prodl,w,c
  4386  0077C8  2440               	addwf	UART_Printf@ch,w,c
  4387  0077CA  0FD0               	addlw	208
  4388  0077CC  6E41               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4389                           
  4390                           ;uart.c: 446: ptr++;
  4391  0077CE  4A3E               	infsnz	UART_Printf@ptr,f,c
  4392  0077D0  2A3F               	incf	UART_Printf@ptr+1,f,c
  4393                           
  4394                           ;uart.c: 447: ch = *ptr;
  4395  0077D2  C03E  FFF6         	movff	UART_Printf@ptr,tblptrl
  4396  0077D6  C03F  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  4397  0077DA                     	if	0	;tblptru may be non-zero
  4398  0077DA                     	endif
  4399  0077DA                     	if	0	;tblptru may be non-zero
  4400  0077DA                     	endif
  4401  0077DA  0008               	tblrd		*
  4402  0077DC  CFF5 F040          	movff	tablat,UART_Printf@ch
  4403  0077E0                     l2148:
  4404  0077E0  0E2F               	movlw	47
  4405  0077E2  6440               	cpfsgt	UART_Printf@ch,c
  4406  0077E4  D126               	goto	l2236
  4407  0077E6  0E39               	movlw	57
  4408  0077E8  6440               	cpfsgt	UART_Printf@ch,c
  4409  0077EA  D7EB               	goto	l2142
  4410  0077EC  D122               	goto	l2236
  4411  0077EE                     l506:
  4412                           
  4413                           ;uart.c: 450: else
  4414                           ;uart.c: 451: {
  4415                           ;uart.c: 452: v_numOfDigitsToTransmit_u8 = 0xffu;
  4416  0077EE  6841               	setf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4417                           
  4418                           ;uart.c: 453: }
  4419                           ;uart.c: 456: switch(ch)
  4420  0077F0  D120               	goto	l2236
  4421  0077F2                     l2152:
  4422                           
  4423                           ;uart.c: 459: case 'c':
  4424                           ;uart.c: 460: ch = (*(uint8_t *)__va_arg((*(uint8_t **)argp), (uint8_t)0));
  4425  0077F2  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4426  0077F6  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4427  0077FA  50DF               	movf	indf2,w,c
  4428  0077FC  6E40               	movwf	UART_Printf@ch,c
  4429  0077FE  0E02               	movlw	2
  4430  007800  2642               	addwf	UART_Printf@argp,f,c
  4431  007802  0E00               	movlw	0
  4432  007804  2243               	addwfc	UART_Printf@argp+1,f,c
  4433                           
  4434                           ;uart.c: 461: UART_TxChar(ch);
  4435  007806  5040               	movf	UART_Printf@ch,w,c
  4436  007808  EC7E  F034         	call	_UART_TxChar
  4437                           
  4438                           ;uart.c: 462: break;
  4439  00780C  D144               	goto	l2240
  4440  00780E                     l2158:
  4441                           
  4442                           ;uart.c: 465: v_num_s16 = (*(sint16_t *)__va_arg((*(sint16_t **)argp), (sint16_t)0));
  4443  00780E  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4444  007812  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4445  007816  CFDE F036          	movff	postinc2,UART_Printf@v_num_s16
  4446  00781A  CFDD F037          	movff	postdec2,UART_Printf@v_num_s16+1
  4447  00781E  0E02               	movlw	2
  4448  007820  2642               	addwf	UART_Printf@argp,f,c
  4449  007822  0E00               	movlw	0
  4450  007824  2243               	addwfc	UART_Printf@argp+1,f,c
  4451                           
  4452                           ;uart.c: 466: if(v_num_s16<0)
  4453  007826  AE37               	btfss	UART_Printf@v_num_s16+1,7,c
  4454  007828  D007               	goto	l2168
  4455                           
  4456                           ;uart.c: 467: {
  4457                           ;uart.c: 468: v_num_s16 = -v_num_s16;
  4458  00782A  6C36               	negf	UART_Printf@v_num_s16,c
  4459  00782C  1E37               	comf	UART_Printf@v_num_s16+1,f,c
  4460  00782E  B0D8               	btfsc	status,0,c
  4461  007830  2A37               	incf	UART_Printf@v_num_s16+1,f,c
  4462                           
  4463                           ;uart.c: 469: UART_TxChar('-');
  4464  007832  0E2D               	movlw	45
  4465  007834  EC7E  F034         	call	_UART_TxChar
  4466  007838                     l2168:
  4467                           
  4468                           ;uart.c: 470: }
  4469                           ;uart.c: 471: UART_TxNumber(10u,v_num_s16,v_numOfDigitsToTransmit_u8);
  4470  007838  C036  F00E         	movff	UART_Printf@v_num_s16,UART_TxNumber@v_number_u32
  4471  00783C  C037  F00F         	movff	UART_Printf@v_num_s16+1,UART_TxNumber@v_number_u32+1
  4472  007840  0E00               	movlw	0
  4473  007842  BE0F               	btfsc	UART_TxNumber@v_number_u32+1,7,c
  4474  007844  0EFF               	movlw	-1
  4475  007846  6E10               	movwf	UART_TxNumber@v_number_u32+2,c
  4476  007848  6E11               	movwf	UART_TxNumber@v_number_u32+3,c
  4477  00784A  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4478  00784E  0E0A               	movlw	10
  4479  007850  ECD3  F03A         	call	_UART_TxNumber
  4480                           
  4481                           ;uart.c: 472: break;
  4482  007854  D120               	goto	l2240
  4483  007856                     l2170:
  4484                           
  4485                           ;uart.c: 475: v_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  4486  007856  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4487  00785A  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4488  00785E  CFDE F032          	movff	postinc2,UART_Printf@v_num_s32
  4489  007862  CFDE F033          	movff	postinc2,UART_Printf@v_num_s32+1
  4490  007866  CFDE F034          	movff	postinc2,UART_Printf@v_num_s32+2
  4491  00786A  CFDE F035          	movff	postinc2,UART_Printf@v_num_s32+3
  4492  00786E  0E04               	movlw	4
  4493  007870  2642               	addwf	UART_Printf@argp,f,c
  4494  007872  0E00               	movlw	0
  4495  007874  2243               	addwfc	UART_Printf@argp+1,f,c
  4496                           
  4497                           ;uart.c: 476: if(v_num_s32<0)
  4498  007876  AE35               	btfss	UART_Printf@v_num_s32+3,7,c
  4499  007878  D00B               	goto	l2180
  4500                           
  4501                           ;uart.c: 477: {
  4502                           ;uart.c: 478: v_num_s32 = -v_num_s32;
  4503  00787A  1E35               	comf	UART_Printf@v_num_s32+3,f,c
  4504  00787C  1E34               	comf	UART_Printf@v_num_s32+2,f,c
  4505  00787E  1E33               	comf	UART_Printf@v_num_s32+1,f,c
  4506  007880  6C32               	negf	UART_Printf@v_num_s32,c
  4507  007882  0E00               	movlw	0
  4508  007884  2233               	addwfc	UART_Printf@v_num_s32+1,f,c
  4509  007886  2234               	addwfc	UART_Printf@v_num_s32+2,f,c
  4510  007888  2235               	addwfc	UART_Printf@v_num_s32+3,f,c
  4511                           
  4512                           ;uart.c: 479: UART_TxChar('-');
  4513  00788A  0E2D               	movlw	45
  4514  00788C  EC7E  F034         	call	_UART_TxChar
  4515  007890                     l2180:
  4516                           
  4517                           ;uart.c: 480: }
  4518                           ;uart.c: 481: UART_TxNumber(10u,v_num_s32,v_numOfDigitsToTransmit_u8);
  4519  007890  C032  F00E         	movff	UART_Printf@v_num_s32,UART_TxNumber@v_number_u32
  4520  007894  C033  F00F         	movff	UART_Printf@v_num_s32+1,UART_TxNumber@v_number_u32+1
  4521  007898  C034  F010         	movff	UART_Printf@v_num_s32+2,UART_TxNumber@v_number_u32+2
  4522  00789C  C035  F011         	movff	UART_Printf@v_num_s32+3,UART_TxNumber@v_number_u32+3
  4523  0078A0  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4524  0078A4  0E0A               	movlw	10
  4525  0078A6  ECD3  F03A         	call	_UART_TxNumber
  4526                           
  4527                           ;uart.c: 482: break;
  4528  0078AA  D0F5               	goto	l2240
  4529  0078AC                     l2182:
  4530                           
  4531                           ;uart.c: 485: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  4532  0078AC  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4533  0078B0  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4534  0078B4  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u16
  4535  0078B8  CFDD F03D          	movff	postdec2,UART_Printf@v_num_u16+1
  4536  0078BC  0E02               	movlw	2
  4537  0078BE  2642               	addwf	UART_Printf@argp,f,c
  4538  0078C0  0E00               	movlw	0
  4539  0078C2  2243               	addwfc	UART_Printf@argp+1,f,c
  4540                           
  4541                           ;uart.c: 486: UART_TxNumber(10u,v_num_u16,v_numOfDigitsToTransmit_u8);
  4542  0078C4  C03C  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  4543  0078C8  C03D  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  4544  0078CC  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  4545  0078CE  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  4546  0078D0  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4547  0078D4  0E0A               	movlw	10
  4548  0078D6  ECD3  F03A         	call	_UART_TxNumber
  4549                           
  4550                           ;uart.c: 487: break;
  4551  0078DA  D0DD               	goto	l2240
  4552  0078DC                     l2188:
  4553                           
  4554                           ;uart.c: 490: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  4555  0078DC  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4556  0078E0  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4557  0078E4  CFDE F038          	movff	postinc2,UART_Printf@v_num_u32
  4558  0078E8  CFDE F039          	movff	postinc2,UART_Printf@v_num_u32+1
  4559  0078EC  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32+2
  4560  0078F0  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+3
  4561  0078F4  0E04               	movlw	4
  4562  0078F6  2642               	addwf	UART_Printf@argp,f,c
  4563  0078F8  0E00               	movlw	0
  4564  0078FA  2243               	addwfc	UART_Printf@argp+1,f,c
  4565                           
  4566                           ;uart.c: 491: UART_TxNumber(10u,v_num_u32,v_numOfDigitsToTransmit_u8);
  4567  0078FC  C038  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  4568  007900  C039  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  4569  007904  C03A  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  4570  007908  C03B  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  4571  00790C  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4572  007910  0E0A               	movlw	10
  4573  007912  ECD3  F03A         	call	_UART_TxNumber
  4574                           
  4575                           ;uart.c: 492: break;
  4576  007916  D0BF               	goto	l2240
  4577  007918                     l2194:
  4578                           
  4579                           ;uart.c: 495: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  4580  007918  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4581  00791C  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4582  007920  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u16
  4583  007924  CFDD F03D          	movff	postdec2,UART_Printf@v_num_u16+1
  4584  007928  0E02               	movlw	2
  4585  00792A  2642               	addwf	UART_Printf@argp,f,c
  4586  00792C  0E00               	movlw	0
  4587  00792E  2243               	addwfc	UART_Printf@argp+1,f,c
  4588                           
  4589                           ;uart.c: 496: UART_TxNumber(16u,v_num_u16,v_numOfDigitsToTransmit_u8);
  4590  007930  C03C  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  4591  007934  C03D  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  4592  007938  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  4593  00793A  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  4594  00793C  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4595  007940  0E10               	movlw	16
  4596  007942  ECD3  F03A         	call	_UART_TxNumber
  4597                           
  4598                           ;uart.c: 497: break;
  4599  007946  D0A7               	goto	l2240
  4600  007948                     l2200:
  4601                           
  4602                           ;uart.c: 500: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  4603  007948  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4604  00794C  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4605  007950  CFDE F038          	movff	postinc2,UART_Printf@v_num_u32
  4606  007954  CFDE F039          	movff	postinc2,UART_Printf@v_num_u32+1
  4607  007958  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32+2
  4608  00795C  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+3
  4609  007960  0E04               	movlw	4
  4610  007962  2642               	addwf	UART_Printf@argp,f,c
  4611  007964  0E00               	movlw	0
  4612  007966  2243               	addwfc	UART_Printf@argp+1,f,c
  4613                           
  4614                           ;uart.c: 501: UART_TxNumber(16u,v_num_u32,v_numOfDigitsToTransmit_u8);
  4615  007968  C038  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  4616  00796C  C039  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  4617  007970  C03A  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  4618  007974  C03B  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  4619  007978  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4620  00797C  0E10               	movlw	16
  4621  00797E  ECD3  F03A         	call	_UART_TxNumber
  4622                           
  4623                           ;uart.c: 502: break;
  4624  007982  D089               	goto	l2240
  4625  007984                     l2206:
  4626                           
  4627                           ;uart.c: 506: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  4628  007984  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4629  007988  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4630  00798C  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u16
  4631  007990  CFDD F03D          	movff	postdec2,UART_Printf@v_num_u16+1
  4632  007994  0E02               	movlw	2
  4633  007996  2642               	addwf	UART_Printf@argp,f,c
  4634  007998  0E00               	movlw	0
  4635  00799A  2243               	addwfc	UART_Printf@argp+1,f,c
  4636                           
  4637                           ;uart.c: 508: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  4638  00799C  2841               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  4639  00799E  A4D8               	btfss	status,2,c
  4640  0079A0  D002               	goto	l2214
  4641                           
  4642                           ;uart.c: 509: v_numOfDigitsToTransmit_u8 = 16;
  4643  0079A2  0E10               	movlw	16
  4644  0079A4  6E41               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4645  0079A6                     l2214:
  4646                           
  4647                           ;uart.c: 511: UART_TxNumber(2u,v_num_u16,v_numOfDigitsToTransmit_u8);
  4648  0079A6  C03C  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  4649  0079AA  C03D  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  4650  0079AE  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  4651  0079B0  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  4652  0079B2  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4653  0079B6  0E02               	movlw	2
  4654  0079B8  ECD3  F03A         	call	_UART_TxNumber
  4655                           
  4656                           ;uart.c: 512: break;
  4657  0079BC  D06C               	goto	l2240
  4658  0079BE                     l2216:
  4659                           
  4660                           ;uart.c: 515: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  4661  0079BE  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4662  0079C2  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4663  0079C6  CFDE F038          	movff	postinc2,UART_Printf@v_num_u32
  4664  0079CA  CFDE F039          	movff	postinc2,UART_Printf@v_num_u32+1
  4665  0079CE  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32+2
  4666  0079D2  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+3
  4667  0079D6  0E04               	movlw	4
  4668  0079D8  2642               	addwf	UART_Printf@argp,f,c
  4669  0079DA  0E00               	movlw	0
  4670  0079DC  2243               	addwfc	UART_Printf@argp+1,f,c
  4671                           
  4672                           ;uart.c: 517: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  4673  0079DE  2841               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  4674  0079E0  A4D8               	btfss	status,2,c
  4675  0079E2  D002               	goto	l2224
  4676                           
  4677                           ;uart.c: 518: v_numOfDigitsToTransmit_u8 = 32;
  4678  0079E4  0E20               	movlw	32
  4679  0079E6  6E41               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4680  0079E8                     l2224:
  4681                           
  4682                           ;uart.c: 520: UART_TxNumber(2u,v_num_u32,v_numOfDigitsToTransmit_u8);
  4683  0079E8  C038  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  4684  0079EC  C039  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  4685  0079F0  C03A  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  4686  0079F4  C03B  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  4687  0079F8  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4688  0079FC  0E02               	movlw	2
  4689  0079FE  ECD3  F03A         	call	_UART_TxNumber
  4690                           
  4691                           ;uart.c: 525: case 'f':
  4692                           ;uart.c: 530: break;
  4693                           
  4694                           ;uart.c: 524: case 'F':
  4695                           
  4696                           ;uart.c: 521: break;
  4697  007A02  D049               	goto	l2240
  4698  007A04                     l2226:
  4699                           
  4700                           ;uart.c: 534: case 's':
  4701                           ;uart.c: 535: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  4702  007A04  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4703  007A08  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4704  007A0C  CFDE F030          	movff	postinc2,UART_Printf@str
  4705  007A10  CFDD F031          	movff	postdec2,UART_Printf@str+1
  4706  007A14  0E02               	movlw	2
  4707  007A16  2642               	addwf	UART_Printf@argp,f,c
  4708  007A18  0E00               	movlw	0
  4709  007A1A  2243               	addwfc	UART_Printf@argp+1,f,c
  4710                           
  4711                           ;uart.c: 536: UART_TxString(str);
  4712  007A1C  C030  F002         	movff	UART_Printf@str,UART_TxString@ptr_string
  4713  007A20  C031  F003         	movff	UART_Printf@str+1,UART_TxString@ptr_string+1
  4714  007A24  ECE0  F034         	call	_UART_TxString	;wreg free
  4715                           
  4716                           ;uart.c: 537: break;
  4717  007A28  D036               	goto	l2240
  4718  007A2A                     l2232:
  4719                           
  4720                           ;uart.c: 540: UART_TxChar('%');
  4721  007A2A  0E25               	movlw	37
  4722  007A2C  EC7E  F034         	call	_UART_TxChar
  4723                           
  4724                           ;uart.c: 542: }
  4725                           
  4726                           ;uart.c: 541: break;
  4727  007A30  D032               	goto	l2240
  4728  007A32                     l2236:
  4729  007A32  5040               	movf	UART_Printf@ch,w,c
  4730                           
  4731                           ; Switch size 1, requested type "space"
  4732                           ; Number of cases is 15, Range of values is 37 to 120
  4733                           ; switch strategies available:
  4734                           ; Name         Instructions Cycles
  4735                           ; simple_byte           46    24 (average)
  4736                           ;	Chosen strategy is simple_byte
  4737  007A34  0A25               	xorlw	37	; case 37
  4738  007A36  B4D8               	btfsc	status,2,c
  4739  007A38  D7F8               	goto	l2232
  4740  007A3A  0A67               	xorlw	103	; case 66
  4741  007A3C  B4D8               	btfsc	status,2,c
  4742  007A3E  D7BF               	goto	l2216
  4743  007A40  0A01               	xorlw	1	; case 67
  4744  007A42  B4D8               	btfsc	status,2,c
  4745  007A44  D6D6               	goto	l2152
  4746  007A46  0A07               	xorlw	7	; case 68
  4747  007A48  B4D8               	btfsc	status,2,c
  4748  007A4A  D705               	goto	l2170
  4749  007A4C  0A02               	xorlw	2	; case 70
  4750  007A4E  B4D8               	btfsc	status,2,c
  4751  007A50  D022               	goto	l2240
  4752  007A52  0A15               	xorlw	21	; case 83
  4753  007A54  B4D8               	btfsc	status,2,c
  4754  007A56  D7D6               	goto	l2226
  4755  007A58  0A06               	xorlw	6	; case 85
  4756  007A5A  B4D8               	btfsc	status,2,c
  4757  007A5C  D73F               	goto	l2188
  4758  007A5E  0A0D               	xorlw	13	; case 88
  4759  007A60  B4D8               	btfsc	status,2,c
  4760  007A62  D772               	goto	l2200
  4761  007A64  0A3A               	xorlw	58	; case 98
  4762  007A66  B4D8               	btfsc	status,2,c
  4763  007A68  D78D               	goto	l2206
  4764  007A6A  0A01               	xorlw	1	; case 99
  4765  007A6C  B4D8               	btfsc	status,2,c
  4766  007A6E  D6C1               	goto	l2152
  4767  007A70  0A07               	xorlw	7	; case 100
  4768  007A72  B4D8               	btfsc	status,2,c
  4769  007A74  D6CC               	goto	l2158
  4770  007A76  0A02               	xorlw	2	; case 102
  4771  007A78  B4D8               	btfsc	status,2,c
  4772  007A7A  D00D               	goto	l2240
  4773  007A7C  0A15               	xorlw	21	; case 115
  4774  007A7E  B4D8               	btfsc	status,2,c
  4775  007A80  D7C1               	goto	l2226
  4776  007A82  0A06               	xorlw	6	; case 117
  4777  007A84  B4D8               	btfsc	status,2,c
  4778  007A86  D712               	goto	l2182
  4779  007A88  0A0D               	xorlw	13	; case 120
  4780  007A8A  B4D8               	btfsc	status,2,c
  4781  007A8C  D745               	goto	l2194
  4782                           
  4783                           ;uart.c: 543: }
  4784  007A8E  D003               	goto	l2240
  4785  007A90                     l2238:
  4786                           
  4787                           ;uart.c: 544: else
  4788                           ;uart.c: 545: {
  4789                           ;uart.c: 547: UART_TxChar(ch);
  4790  007A90  5040               	movf	UART_Printf@ch,w,c
  4791  007A92  EC7E  F034         	call	_UART_TxChar
  4792  007A96                     l2240:
  4793  007A96  4A3E               	infsnz	UART_Printf@ptr,f,c
  4794  007A98  2A3F               	incf	UART_Printf@ptr+1,f,c
  4795  007A9A                     l2242:
  4796  007A9A  C03E  FFF6         	movff	UART_Printf@ptr,tblptrl
  4797  007A9E  C03F  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  4798  007AA2                     	if	0	;tblptru may be non-zero
  4799  007AA2                     	endif
  4800  007AA2                     	if	0	;tblptru may be non-zero
  4801  007AA2                     	endif
  4802  007AA2  0008               	tblrd		*
  4803  007AA4  50F5               	movf	tablat,w,c
  4804  007AA6  0900               	iorlw	0
  4805  007AA8  B4D8               	btfsc	status,2,c
  4806  007AAA  0012               	return	
  4807  007AAC  D66D               	goto	l2128
  4808  007AAE                     __end_of_UART_Printf:
  4809                           	opt stack 0
  4810                           tblptru	equ	0xFF8
  4811                           tblptrh	equ	0xFF7
  4812                           tblptrl	equ	0xFF6
  4813                           tablat	equ	0xFF5
  4814                           prodh	equ	0xFF4
  4815                           prodl	equ	0xFF3
  4816                           intcon	equ	0xFF2
  4817                           postinc0	equ	0xFEE
  4818                           wreg	equ	0xFE8
  4819                           postdec1	equ	0xFE5
  4820                           fsr1l	equ	0xFE1
  4821                           indf2	equ	0xFDF
  4822                           postinc2	equ	0xFDE
  4823                           postdec2	equ	0xFDD
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8
  4827                           
  4828 ;; *************** function _UART_TxString *****************
  4829 ;; Defined at:
  4830 ;;		line 169 in file "uart.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  ptr_string      2    1[COMRAM] PTR const unsigned char 
  4833 ;;		 -> STR_3(54), 
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      void 
  4838 ;; Registers used:
  4839 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4845 ;;      Params:         2       0       0       0       0       0       0
  4846 ;;      Locals:         0       0       0       0       0       0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0
  4848 ;;      Totals:         2       0       0       0       0       0       0
  4849 ;;Total ram usage:        2 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    1
  4852 ;; This function calls:
  4853 ;;		_UART_TxChar
  4854 ;; This function is called by:
  4855 ;;		_switch_Test
  4856 ;;		_UART_Printf
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           	psect	text28
  4861  0069C0                     __ptext28:
  4862                           	opt stack 0
  4863  0069C0                     _UART_TxString:
  4864                           	opt stack 28
  4865                           
  4866                           ;uart.c: 171: while(*ptr_string)
  4867                           
  4868                           ;incstack = 0
  4869  0069C0  D00A               	goto	l2056
  4870  0069C2                     l2052:
  4871                           
  4872                           ;uart.c: 172: UART_TxChar(*ptr_string++);
  4873  0069C2  C002  FFF6         	movff	UART_TxString@ptr_string,tblptrl
  4874  0069C6  C003  FFF7         	movff	UART_TxString@ptr_string+1,tblptrh
  4875  0069CA                     	if	0	;tblptru may be non-zero
  4876  0069CA                     	endif
  4877  0069CA                     	if	0	;tblptru may be non-zero
  4878  0069CA                     	endif
  4879  0069CA  0008               	tblrd		*
  4880  0069CC  50F5               	movf	tablat,w,c
  4881  0069CE  EC7E  F034         	call	_UART_TxChar
  4882  0069D2  4A02               	infsnz	UART_TxString@ptr_string,f,c
  4883  0069D4  2A03               	incf	UART_TxString@ptr_string+1,f,c
  4884  0069D6                     l2056:
  4885  0069D6  C002  FFF6         	movff	UART_TxString@ptr_string,tblptrl
  4886  0069DA  C003  FFF7         	movff	UART_TxString@ptr_string+1,tblptrh
  4887  0069DE                     	if	0	;tblptru may be non-zero
  4888  0069DE                     	endif
  4889  0069DE                     	if	0	;tblptru may be non-zero
  4890  0069DE                     	endif
  4891  0069DE  0008               	tblrd		*
  4892  0069E0  50F5               	movf	tablat,w,c
  4893  0069E2  0900               	iorlw	0
  4894  0069E4  B4D8               	btfsc	status,2,c
  4895  0069E6  0012               	return	
  4896  0069E8  D7EC               	goto	l2052
  4897  0069EA                     __end_of_UART_TxString:
  4898                           	opt stack 0
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           prodh	equ	0xFF4
  4904                           prodl	equ	0xFF3
  4905                           intcon	equ	0xFF2
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           postdec1	equ	0xFE5
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _UART_TxNumber *****************
  4918 ;; Defined at:
  4919 ;;		line 260 in file "uart.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  v_numericSys    1    wreg     unsigned char 
  4922 ;;  v_number_u32    4   13[COMRAM] unsigned long 
  4923 ;;  v_numOfDigit    1   17[COMRAM] unsigned char 
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;  v_numericSys    1   41[COMRAM] unsigned char 
  4926 ;;  a              10   29[COMRAM] unsigned char [10]
  4927 ;;  i               1   42[COMRAM] unsigned char 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  1    wreg      void 
  4930 ;; Registers used:
  4931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4937 ;;      Params:         5       0       0       0       0       0       0
  4938 ;;      Locals:        14       0       0       0       0       0       0
  4939 ;;      Temps:         11       0       0       0       0       0       0
  4940 ;;      Totals:        30       0       0       0       0       0       0
  4941 ;;Total ram usage:       30 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    1
  4944 ;; This function calls:
  4945 ;;		_UART_TxChar
  4946 ;;		___lldiv
  4947 ;; This function is called by:
  4948 ;;		_UART_Printf
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           	psect	text29
  4953  0075A6                     __ptext29:
  4954                           	opt stack 0
  4955  0075A6                     _UART_TxNumber:
  4956                           	opt stack 27
  4957                           
  4958                           ;incstack = 0
  4959                           ;UART_TxNumber@v_numericSystem_u8 stored from wreg
  4960  0075A6  6E2A               	movwf	UART_TxNumber@v_numericSystem_u8,c
  4961                           
  4962                           ;uart.c: 262: uint8_t i=0,a[10];
  4963  0075A8  0E00               	movlw	0
  4964  0075AA  6E2B               	movwf	UART_TxNumber@i,c
  4965                           
  4966                           ;uart.c: 264: if(2u == v_numericSystem_u8)
  4967  0075AC  0E02               	movlw	2
  4968  0075AE  182A               	xorwf	UART_TxNumber@v_numericSystem_u8,w,c
  4969  0075B0  B4D8               	btfsc	status,2,c
  4970  0075B2  D034               	goto	l2088
  4971  0075B4  D037               	goto	l2090
  4972  0075B6                     l2082:
  4973                           
  4974                           ;uart.c: 267: {
  4975                           ;uart.c: 270: i = (((v_number_u32)&(((uint8_t)1<<((v_numOfDigitsToTransmit_u8-1)))))!=0u
      +                          );
  4976  0075B6  C012  F013         	movff	UART_TxNumber@v_numOfDigitsToTransmit_u8,??_UART_TxNumber
  4977  0075BA  0EFF               	movlw	-1
  4978  0075BC  2613               	addwf	??_UART_TxNumber,f,c
  4979  0075BE  0E01               	movlw	1
  4980  0075C0  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  4981  0075C2  0E00               	movlw	0
  4982  0075C4  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  4983  0075C6  2A13               	incf	??_UART_TxNumber,f,c
  4984  0075C8  D003               	goto	u2054
  4985  0075CA                     u2055:
  4986  0075CA  90D8               	bcf	status,0,c
  4987  0075CC  3614               	rlcf	??_UART_TxNumber+1,f,c
  4988  0075CE  3615               	rlcf	??_UART_TxNumber+2,f,c
  4989  0075D0                     u2054:
  4990  0075D0  2E13               	decfsz	??_UART_TxNumber,f,c
  4991  0075D2  D7FB               	goto	u2055
  4992  0075D4  C014  F016         	movff	??_UART_TxNumber+1,??_UART_TxNumber+3
  4993  0075D8  C015  F017         	movff	??_UART_TxNumber+2,??_UART_TxNumber+4
  4994  0075DC  0E00               	movlw	0
  4995  0075DE  BE17               	btfsc	(??_UART_TxNumber+4)& (0+255),7,c
  4996  0075E0  0EFF               	movlw	255
  4997  0075E2  6E18               	movwf	(??_UART_TxNumber+5)& (0+255),c
  4998  0075E4  6E19               	movwf	(??_UART_TxNumber+6)& (0+255),c
  4999  0075E6  500E               	movf	UART_TxNumber@v_number_u32,w,c
  5000  0075E8  1416               	andwf	??_UART_TxNumber+3,w,c
  5001  0075EA  6E1A               	movwf	(??_UART_TxNumber+7)& (0+255),c
  5002  0075EC  500F               	movf	UART_TxNumber@v_number_u32+1,w,c
  5003  0075EE  1417               	andwf	??_UART_TxNumber+4,w,c
  5004  0075F0  6E1B               	movwf	(??_UART_TxNumber+8)& (0+255),c
  5005  0075F2  5010               	movf	UART_TxNumber@v_number_u32+2,w,c
  5006  0075F4  1418               	andwf	??_UART_TxNumber+5,w,c
  5007  0075F6  6E1C               	movwf	(??_UART_TxNumber+9)& (0+255),c
  5008  0075F8  5011               	movf	UART_TxNumber@v_number_u32+3,w,c
  5009  0075FA  1419               	andwf	??_UART_TxNumber+6,w,c
  5010  0075FC  6E1D               	movwf	(??_UART_TxNumber+10)& (0+255),c
  5011  0075FE  501A               	movf	??_UART_TxNumber+7,w,c
  5012  007600  101B               	iorwf	??_UART_TxNumber+8,w,c
  5013  007602  101C               	iorwf	??_UART_TxNumber+9,w,c
  5014  007604  101D               	iorwf	??_UART_TxNumber+10,w,c
  5015  007606  B4D8               	btfsc	status,2,c
  5016  007608  D002               	goto	u2060
  5017  00760A  0E01               	movlw	1
  5018  00760C  D001               	goto	u2070
  5019  00760E                     u2060:
  5020  00760E  0E00               	movlw	0
  5021  007610                     u2070:
  5022  007610  6E2B               	movwf	UART_TxNumber@i,c
  5023                           
  5024                           ;uart.c: 271: UART_TxChar(((i)+0x30));
  5025  007612  502B               	movf	UART_TxNumber@i,w,c
  5026  007614  0F30               	addlw	48
  5027  007616  EC7E  F034         	call	_UART_TxChar
  5028                           
  5029                           ;uart.c: 272: v_numOfDigitsToTransmit_u8--;
  5030  00761A  0612               	decf	UART_TxNumber@v_numOfDigitsToTransmit_u8,f,c
  5031  00761C                     l2088:
  5032  00761C  5012               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  5033  00761E  B4D8               	btfsc	status,2,c
  5034  007620  0012               	return	
  5035  007622  D7C9               	goto	l2082
  5036  007624                     l2090:
  5037                           
  5038                           ;uart.c: 275: else if(v_number_u32==0)
  5039  007624  500E               	movf	UART_TxNumber@v_number_u32,w,c
  5040  007626  100F               	iorwf	UART_TxNumber@v_number_u32+1,w,c
  5041  007628  1010               	iorwf	UART_TxNumber@v_number_u32+2,w,c
  5042  00762A  1011               	iorwf	UART_TxNumber@v_number_u32+3,w,c
  5043  00762C  A4D8               	btfss	status,2,c
  5044  00762E  D004               	goto	l2094
  5045                           
  5046                           ;uart.c: 276: {
  5047                           ;uart.c: 280: UART_TxChar('0');
  5048  007630  0E30               	movlw	48
  5049  007632  EC7E  F034         	call	_UART_TxChar
  5050                           
  5051                           ;uart.c: 281: }
  5052  007636  0012               	return	
  5053  007638                     l2094:
  5054                           
  5055                           ;uart.c: 282: else
  5056                           ;uart.c: 283: {
  5057                           ;uart.c: 284: for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
  5058  007638  0E00               	movlw	0
  5059  00763A  6E2B               	movwf	UART_TxNumber@i,c
  5060  00763C  D04D               	goto	l2112
  5061  00763E                     l2096:
  5062                           
  5063                           ;uart.c: 285: {
  5064                           ;uart.c: 288: if(v_number_u32!=0)
  5065  00763E  500E               	movf	UART_TxNumber@v_number_u32,w,c
  5066  007640  100F               	iorwf	UART_TxNumber@v_number_u32+1,w,c
  5067  007642  1010               	iorwf	UART_TxNumber@v_number_u32+2,w,c
  5068  007644  1011               	iorwf	UART_TxNumber@v_number_u32+3,w,c
  5069  007646  B4D8               	btfsc	status,2,c
  5070  007648  D035               	goto	l2102
  5071                           
  5072                           ;uart.c: 289: {
  5073                           ;uart.c: 296: a[i]=(uint32_t)(v_number_u32 - (v_numericSystem_u8 * (uint32_t)(v_number_u
      +                          32/v_numericSystem_u8)));
  5074  00764A  502B               	movf	UART_TxNumber@i,w,c
  5075  00764C  0D01               	mullw	1
  5076  00764E  0E1E               	movlw	low UART_TxNumber@a
  5077  007650  24F3               	addwf	prodl,w,c
  5078  007652  6ED9               	movwf	fsr2l,c
  5079  007654  0E00               	movlw	high UART_TxNumber@a
  5080  007656  20F4               	addwfc	prodh,w,c
  5081  007658  6EDA               	movwf	fsr2h,c
  5082  00765A  C00E  F001         	movff	UART_TxNumber@v_number_u32,___lldiv@dividend
  5083  00765E  C00F  F002         	movff	UART_TxNumber@v_number_u32+1,___lldiv@dividend+1
  5084  007662  C010  F003         	movff	UART_TxNumber@v_number_u32+2,___lldiv@dividend+2
  5085  007666  C011  F004         	movff	UART_TxNumber@v_number_u32+3,___lldiv@dividend+3
  5086  00766A  502A               	movf	UART_TxNumber@v_numericSystem_u8,w,c
  5087  00766C  6E05               	movwf	___lldiv@divisor,c
  5088  00766E  6A06               	clrf	___lldiv@divisor+1,c
  5089  007670  6A07               	clrf	___lldiv@divisor+2,c
  5090  007672  6A08               	clrf	___lldiv@divisor+3,c
  5091  007674  EC52  F037         	call	___lldiv	;wreg free
  5092  007678  5001               	movf	?___lldiv,w,c
  5093  00767A  022A               	mulwf	UART_TxNumber@v_numericSystem_u8,c
  5094  00767C  50F3               	movf	prodl,w,c
  5095  00767E  0800               	sublw	0
  5096  007680  240E               	addwf	UART_TxNumber@v_number_u32,w,c
  5097  007682  6EDF               	movwf	indf2,c
  5098                           
  5099                           ;uart.c: 297: v_number_u32=v_number_u32/v_numericSystem_u8;
  5100  007684  C00E  F001         	movff	UART_TxNumber@v_number_u32,___lldiv@dividend
  5101  007688  C00F  F002         	movff	UART_TxNumber@v_number_u32+1,___lldiv@dividend+1
  5102  00768C  C010  F003         	movff	UART_TxNumber@v_number_u32+2,___lldiv@dividend+2
  5103  007690  C011  F004         	movff	UART_TxNumber@v_number_u32+3,___lldiv@dividend+3
  5104  007694  502A               	movf	UART_TxNumber@v_numericSystem_u8,w,c
  5105  007696  6E05               	movwf	___lldiv@divisor,c
  5106  007698  6A06               	clrf	___lldiv@divisor+1,c
  5107  00769A  6A07               	clrf	___lldiv@divisor+2,c
  5108  00769C  6A08               	clrf	___lldiv@divisor+3,c
  5109  00769E  EC52  F037         	call	___lldiv	;wreg free
  5110  0076A2  C001  F00E         	movff	?___lldiv,UART_TxNumber@v_number_u32
  5111  0076A6  C002  F00F         	movff	?___lldiv+1,UART_TxNumber@v_number_u32+1
  5112  0076AA  C003  F010         	movff	?___lldiv+2,UART_TxNumber@v_number_u32+2
  5113  0076AE  C004  F011         	movff	?___lldiv+3,UART_TxNumber@v_number_u32+3
  5114                           
  5115                           ;uart.c: 298: }
  5116  0076B2  D011               	goto	l2110
  5117  0076B4                     l2102:
  5118                           
  5119                           ;uart.c: 299: else if( (v_numOfDigitsToTransmit_u8 == 0xffu) ||
  5120                           ;uart.c: 300: (v_numOfDigitsToTransmit_u8 > 10u))
  5121  0076B4  2812               	incf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  5122  0076B6  B4D8               	btfsc	status,2,c
  5123  0076B8  D05A               	goto	l2124
  5124  0076BA  0E0A               	movlw	10
  5125  0076BC  6412               	cpfsgt	UART_TxNumber@v_numOfDigitsToTransmit_u8,c
  5126  0076BE  D001               	goto	l2108
  5127  0076C0  D056               	goto	l2124
  5128  0076C2                     l2108:
  5129                           
  5130                           ;uart.c: 306: else
  5131                           ;uart.c: 307: {
  5132                           ;uart.c: 311: a[i]=0;
  5133  0076C2  502B               	movf	UART_TxNumber@i,w,c
  5134  0076C4  0D01               	mullw	1
  5135  0076C6  0E1E               	movlw	low UART_TxNumber@a
  5136  0076C8  24F3               	addwf	prodl,w,c
  5137  0076CA  6ED9               	movwf	fsr2l,c
  5138  0076CC  0E00               	movlw	high UART_TxNumber@a
  5139  0076CE  20F4               	addwfc	prodh,w,c
  5140  0076D0  6EDA               	movwf	fsr2h,c
  5141  0076D2  0E00               	movlw	0
  5142  0076D4  6EDF               	movwf	indf2,c
  5143  0076D6                     l2110:
  5144  0076D6  2A2B               	incf	UART_TxNumber@i,f,c
  5145  0076D8                     l2112:
  5146  0076D8  5012               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  5147  0076DA  5C2B               	subwf	UART_TxNumber@i,w,c
  5148  0076DC  B0D8               	btfsc	status,0,c
  5149  0076DE  D047               	goto	l2124
  5150  0076E0  D7AE               	goto	l2096
  5151  0076E2                     l2114:
  5152                           
  5153                           ;uart.c: 316: {
  5154                           ;uart.c: 318: UART_TxChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  5155  0076E2  0EFF               	movlw	255
  5156  0076E4  6E13               	movwf	??_UART_TxNumber& (0+255),c
  5157  0076E6  0EFF               	movlw	255
  5158  0076E8  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  5159  0076EA  502B               	movf	UART_TxNumber@i,w,c
  5160  0076EC  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  5161  0076EE  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  5162  0076F0  5013               	movf	??_UART_TxNumber,w,c
  5163  0076F2  2615               	addwf	??_UART_TxNumber+2,f,c
  5164  0076F4  5014               	movf	??_UART_TxNumber+1,w,c
  5165  0076F6  2216               	addwfc	??_UART_TxNumber+3,f,c
  5166  0076F8  0E1E               	movlw	low UART_TxNumber@a
  5167  0076FA  2415               	addwf	??_UART_TxNumber+2,w,c
  5168  0076FC  6ED9               	movwf	fsr2l,c
  5169  0076FE  0E00               	movlw	high UART_TxNumber@a
  5170  007700  2016               	addwfc	??_UART_TxNumber+3,w,c
  5171  007702  6EDA               	movwf	fsr2h,c
  5172  007704  0E0A               	movlw	10
  5173  007706  60DF               	cpfslt	indf2,c
  5174  007708  D015               	goto	l2118
  5175  00770A  0EFF               	movlw	255
  5176  00770C  6E13               	movwf	??_UART_TxNumber& (0+255),c
  5177  00770E  0EFF               	movlw	255
  5178  007710  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  5179  007712  502B               	movf	UART_TxNumber@i,w,c
  5180  007714  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  5181  007716  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  5182  007718  5013               	movf	??_UART_TxNumber,w,c
  5183  00771A  2615               	addwf	??_UART_TxNumber+2,f,c
  5184  00771C  5014               	movf	??_UART_TxNumber+1,w,c
  5185  00771E  2216               	addwfc	??_UART_TxNumber+3,f,c
  5186  007720  0E1E               	movlw	low UART_TxNumber@a
  5187  007722  2415               	addwf	??_UART_TxNumber+2,w,c
  5188  007724  6ED9               	movwf	fsr2l,c
  5189  007726  0E00               	movlw	high UART_TxNumber@a
  5190  007728  2016               	addwfc	??_UART_TxNumber+3,w,c
  5191  00772A  6EDA               	movwf	fsr2h,c
  5192  00772C  50DF               	movf	indf2,w,c
  5193  00772E  6E17               	movwf	(??_UART_TxNumber+4)& (0+255),c
  5194  007730  0E30               	movlw	48
  5195  007732  D014               	goto	L4
  5196  007734                     l2118:
  5197  007734  0EFF               	movlw	255
  5198  007736  6E13               	movwf	??_UART_TxNumber& (0+255),c
  5199  007738  0EFF               	movlw	255
  5200  00773A  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  5201  00773C  502B               	movf	UART_TxNumber@i,w,c
  5202  00773E  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  5203  007740  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  5204  007742  5013               	movf	??_UART_TxNumber,w,c
  5205  007744  2615               	addwf	??_UART_TxNumber+2,f,c
  5206  007746  5014               	movf	??_UART_TxNumber+1,w,c
  5207  007748  2216               	addwfc	??_UART_TxNumber+3,f,c
  5208  00774A  0E1E               	movlw	low UART_TxNumber@a
  5209  00774C  2415               	addwf	??_UART_TxNumber+2,w,c
  5210  00774E  6ED9               	movwf	fsr2l,c
  5211  007750  0E00               	movlw	high UART_TxNumber@a
  5212  007752  2016               	addwfc	??_UART_TxNumber+3,w,c
  5213  007754  6EDA               	movwf	fsr2h,c
  5214  007756  50DF               	movf	indf2,w,c
  5215  007758  6E17               	movwf	(??_UART_TxNumber+4)& (0+255),c
  5216  00775A  0E37               	movlw	55
  5217  00775C                     L4:
  5218  00775C  2417               	addwf	??_UART_TxNumber+4,w,c
  5219  00775E  6E28               	movwf	_UART_TxNumber$514,c
  5220  007760  6A29               	clrf	_UART_TxNumber$514+1,c
  5221  007762  0E00               	movlw	0
  5222  007764  2229               	addwfc	_UART_TxNumber$514+1,f,c
  5223  007766  5028               	movf	_UART_TxNumber$514,w,c
  5224  007768  EC7E  F034         	call	_UART_TxChar
  5225                           
  5226                           ;uart.c: 319: i--;
  5227  00776C  062B               	decf	UART_TxNumber@i,f,c
  5228  00776E                     l2124:
  5229  00776E  502B               	movf	UART_TxNumber@i,w,c
  5230  007770  B4D8               	btfsc	status,2,c
  5231  007772  0012               	return	
  5232  007774  D7B6               	goto	l2114
  5233  007776                     __end_of_UART_TxNumber:
  5234                           	opt stack 0
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           postinc0	equ	0xFEE
  5243                           wreg	equ	0xFE8
  5244                           postdec1	equ	0xFE5
  5245                           fsr1l	equ	0xFE1
  5246                           indf2	equ	0xFDF
  5247                           postinc2	equ	0xFDE
  5248                           postdec2	equ	0xFDD
  5249                           fsr2h	equ	0xFDA
  5250                           fsr2l	equ	0xFD9
  5251                           status	equ	0xFD8
  5252                           
  5253 ;; *************** function _UART_TxChar *****************
  5254 ;; Defined at:
  5255 ;;		line 145 in file "uart.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  v_uartData_u    1    wreg     unsigned char 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  v_uartData_u    1    0[COMRAM] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5269 ;;      Params:         0       0       0       0       0       0       0
  5270 ;;      Locals:         1       0       0       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0
  5272 ;;      Totals:         1       0       0       0       0       0       0
  5273 ;;Total ram usage:        1 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; This function calls:
  5276 ;;		Nothing
  5277 ;; This function is called by:
  5278 ;;		_UART_TxString
  5279 ;;		_UART_TxNumber
  5280 ;;		_UART_Printf
  5281 ;;		_UART_RxString
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text30
  5286  0068FC                     __ptext30:
  5287                           	opt stack 0
  5288  0068FC                     _UART_TxChar:
  5289                           	opt stack 28
  5290                           
  5291                           ;incstack = 0
  5292                           ;UART_TxChar@v_uartData_u8 stored from wreg
  5293  0068FC  6E01               	movwf	UART_TxChar@v_uartData_u8,c
  5294  0068FE                     l453:
  5295  0068FE  A89E               	btfss	3998,4,c	;volatile
  5296  006900  D7FE               	goto	l453
  5297                           
  5298                           ;uart.c: 148: TXIF=0;
  5299  006902  989E               	bcf	3998,4,c	;volatile
  5300                           
  5301                           ;uart.c: 149: TXREG=v_uartData_u8;
  5302  006904  C001  FFAD         	movff	UART_TxChar@v_uartData_u8,4013	;volatile
  5303  006908  0012               	return		;funcret
  5304  00690A                     __end_of_UART_TxChar:
  5305                           	opt stack 0
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           postinc0	equ	0xFEE
  5314                           wreg	equ	0xFE8
  5315                           postdec1	equ	0xFE5
  5316                           fsr1l	equ	0xFE1
  5317                           indf2	equ	0xFDF
  5318                           postinc2	equ	0xFDE
  5319                           postdec2	equ	0xFDD
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function _ADC_Init *****************
  5325 ;; Defined at:
  5326 ;;		line 54 in file "adc.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;		None
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;		None
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5340 ;;      Params:         0       0       0       0       0       0       0
  5341 ;;      Locals:         0       0       0       0       0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0
  5343 ;;      Totals:         0       0       0       0       0       0       0
  5344 ;;Total ram usage:        0 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; This function calls:
  5347 ;;		Nothing
  5348 ;; This function is called by:
  5349 ;;		_adc_Test
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text31
  5354  0068EE                     __ptext31:
  5355                           	opt stack 0
  5356  0068EE                     _ADC_Init:
  5357                           	opt stack 29
  5358                           
  5359                           ;adc.c: 56: ADCON0 = 0x00;
  5360                           
  5361                           ;incstack = 0
  5362  0068EE  0E00               	movlw	0
  5363  0068F0  6EC2               	movwf	4034,c	;volatile
  5364                           
  5365                           ;adc.c: 57: ADCON1 = 0x00;
  5366  0068F2  0E00               	movlw	0
  5367  0068F4  6EC1               	movwf	4033,c	;volatile
  5368                           
  5369                           ;adc.c: 58: ADCON2 = 0x80;
  5370  0068F6  0E80               	movlw	128
  5371  0068F8  6EC0               	movwf	4032,c	;volatile
  5372  0068FA  0012               	return		;funcret
  5373  0068FC                     __end_of_ADC_Init:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodh	equ	0xFF4
  5380                           prodl	equ	0xFF3
  5381                           intcon	equ	0xFF2
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           postdec1	equ	0xFE5
  5385                           fsr1l	equ	0xFE1
  5386                           indf2	equ	0xFDF
  5387                           postinc2	equ	0xFDE
  5388                           postdec2	equ	0xFDD
  5389                           fsr2h	equ	0xFDA
  5390                           fsr2l	equ	0xFD9
  5391                           status	equ	0xFD8
  5392                           
  5393 ;; *************** function _ADC_GetAdcValue *****************
  5394 ;; Defined at:
  5395 ;;		line 77 in file "adc.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;  var_adcChann    1    wreg     unsigned char 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  var_adcChann    1    6[COMRAM] unsigned char 
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  2    2[COMRAM] unsigned int 
  5402 ;; Registers used:
  5403 ;;		wreg, status,2, status,0, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5409 ;;      Params:         2       0       0       0       0       0       0
  5410 ;;      Locals:         1       0       0       0       0       0       0
  5411 ;;      Temps:          2       0       0       0       0       0       0
  5412 ;;      Totals:         5       0       0       0       0       0       0
  5413 ;;Total ram usage:        5 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    1
  5416 ;; This function calls:
  5417 ;;		_DELAY_us
  5418 ;; This function is called by:
  5419 ;;		_adc_Test
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text32
  5424  006A98                     __ptext32:
  5425                           	opt stack 0
  5426  006A98                     _ADC_GetAdcValue:
  5427                           	opt stack 28
  5428                           
  5429                           ;incstack = 0
  5430                           ;ADC_GetAdcValue@var_adcChannel_u8 stored from wreg
  5431  006A98  6E07               	movwf	ADC_GetAdcValue@var_adcChannel_u8,c
  5432                           
  5433                           ;adc.c: 80: ADCON0= (var_adcChannel_u8<<2);
  5434  006A9A  4407               	rlncf	ADC_GetAdcValue@var_adcChannel_u8,w,c
  5435  006A9C  46E8               	rlncf	wreg,f,c
  5436  006A9E  0BFC               	andlw	252
  5437  006AA0  6EC2               	movwf	4034,c	;volatile
  5438                           
  5439                           ;adc.c: 81: ADON = 1;
  5440  006AA2  80C2               	bsf	4034,0,c	;volatile
  5441                           
  5442                           ;adc.c: 82: DELAY_us(10);
  5443  006AA4  0E00               	movlw	0
  5444  006AA6  6E02               	movwf	DELAY_us@us_count+1,c
  5445  006AA8  0E0A               	movlw	10
  5446  006AAA  6E01               	movwf	DELAY_us@us_count,c
  5447  006AAC  EC94  F034         	call	_DELAY_us	;wreg free
  5448                           
  5449                           ;adc.c: 84: GO=1;
  5450  006AB0  82C2               	bsf	4034,1,c	;volatile
  5451  006AB2                     l136:
  5452  006AB2  B2C2               	btfsc	4034,1,c	;volatile
  5453  006AB4  D7FE               	goto	l136
  5454                           
  5455                           ;adc.c: 88: return((ADRESH<<8) + ADRESL);
  5456  006AB6  50C4               	movf	4036,w,c	;volatile
  5457  006AB8  6E06               	movwf	(??_ADC_GetAdcValue+1)& (0+255),c
  5458  006ABA  6A05               	clrf	??_ADC_GetAdcValue& (0+255),c
  5459  006ABC  50C3               	movf	4035,w,c	;volatile
  5460  006ABE  2405               	addwf	??_ADC_GetAdcValue,w,c
  5461  006AC0  6E03               	movwf	?_ADC_GetAdcValue,c
  5462  006AC2  0E00               	movlw	0
  5463  006AC4  2006               	addwfc	??_ADC_GetAdcValue+1,w,c
  5464  006AC6  6E04               	movwf	?_ADC_GetAdcValue+1,c
  5465  006AC8  0012               	return	
  5466  006ACA                     __end_of_ADC_GetAdcValue:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           postinc0	equ	0xFEE
  5476                           wreg	equ	0xFE8
  5477                           postdec1	equ	0xFE5
  5478                           fsr1l	equ	0xFE1
  5479                           indf2	equ	0xFDF
  5480                           postinc2	equ	0xFDE
  5481                           postdec2	equ	0xFDD
  5482                           fsr2h	equ	0xFDA
  5483                           fsr2l	equ	0xFD9
  5484                           status	equ	0xFD8
  5485                           
  5486 ;; *************** function _DELAY_us *****************
  5487 ;; Defined at:
  5488 ;;		line 56 in file "delay.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  us_count        2    0[COMRAM] unsigned int 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, status,0
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5502 ;;      Params:         2       0       0       0       0       0       0
  5503 ;;      Locals:         0       0       0       0       0       0       0
  5504 ;;      Temps:          0       0       0       0       0       0       0
  5505 ;;      Totals:         2       0       0       0       0       0       0
  5506 ;;Total ram usage:        2 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; This function calls:
  5509 ;;		Nothing
  5510 ;; This function is called by:
  5511 ;;		_ADC_GetAdcValue
  5512 ;;		_DELAY_ms
  5513 ;;		_lcd_BusyCheck
  5514 ;;		_lcd_Reset
  5515 ;;		_lcd_SendCmdSignals
  5516 ;;		_lcd_SendDataSignals
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text33
  5521  006928                     __ptext33:
  5522                           	opt stack 0
  5523  006928                     _DELAY_us:
  5524                           	opt stack 28
  5525                           
  5526                           ;delay.c: 58: while (us_count != 0)
  5527                           
  5528                           ;incstack = 0
  5529  006928  D003               	goto	l1874
  5530  00692A                     l1872:
  5531                           
  5532                           ;delay.c: 59: {
  5533                           ;delay.c: 60: us_count--;
  5534  00692A  0601               	decf	DELAY_us@us_count,f,c
  5535  00692C  A0D8               	btfss	status,0,c
  5536  00692E  0602               	decf	DELAY_us@us_count+1,f,c
  5537  006930                     l1874:
  5538  006930  5001               	movf	DELAY_us@us_count,w,c
  5539  006932  1002               	iorwf	DELAY_us@us_count+1,w,c
  5540  006934  B4D8               	btfsc	status,2,c
  5541  006936  0012               	return	
  5542  006938  D7F8               	goto	l1872
  5543  00693A                     __end_of_DELAY_us:
  5544                           	opt stack 0
  5545                           tblptru	equ	0xFF8
  5546                           tblptrh	equ	0xFF7
  5547                           tblptrl	equ	0xFF6
  5548                           tablat	equ	0xFF5
  5549                           prodh	equ	0xFF4
  5550                           prodl	equ	0xFF3
  5551                           intcon	equ	0xFF2
  5552                           postinc0	equ	0xFEE
  5553                           wreg	equ	0xFE8
  5554                           postdec1	equ	0xFE5
  5555                           fsr1l	equ	0xFE1
  5556                           indf2	equ	0xFDF
  5557                           postinc2	equ	0xFDE
  5558                           postdec2	equ	0xFDD
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _UART_RxChar *****************
  5564 ;; Defined at:
  5565 ;;		line 123 in file "uart.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      unsigned char 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5579 ;;      Params:         0       0       0       0       0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_main
  5589 ;;		_UART_RxString
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text34
  5594  0068E4                     __ptext34:
  5595                           	opt stack 0
  5596  0068E4                     _UART_RxChar:
  5597                           	opt stack 30
  5598  0068E4                     l447:
  5599  0068E4  AA9E               	btfss	3998,5,c	;volatile
  5600  0068E6  D7FE               	goto	l447
  5601                           
  5602                           ;uart.c: 126: RCIF=0;
  5603  0068E8  9A9E               	bcf	3998,5,c	;volatile
  5604                           
  5605                           ;uart.c: 127: return(RCREG);
  5606  0068EA  50AE               	movf	4014,w,c	;volatile
  5607  0068EC  0012               	return	
  5608  0068EE                     __end_of_UART_RxChar:
  5609                           	opt stack 0
  5610                           tblptru	equ	0xFF8
  5611                           tblptrh	equ	0xFF7
  5612                           tblptrl	equ	0xFF6
  5613                           tablat	equ	0xFF5
  5614                           prodh	equ	0xFF4
  5615                           prodl	equ	0xFF3
  5616                           intcon	equ	0xFF2
  5617                           postinc0	equ	0xFEE
  5618                           wreg	equ	0xFE8
  5619                           postdec1	equ	0xFE5
  5620                           fsr1l	equ	0xFE1
  5621                           indf2	equ	0xFDF
  5622                           postinc2	equ	0xFDE
  5623                           postdec2	equ	0xFDD
  5624                           fsr2h	equ	0xFDA
  5625                           fsr2l	equ	0xFD9
  5626                           status	equ	0xFD8
  5627                           
  5628 ;; *************** function _UART_Init *****************
  5629 ;; Defined at:
  5630 ;;		line 66 in file "uart.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  v_baudRate_u    4   22[COMRAM] unsigned long 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      void 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5644 ;;      Params:         4       0       0       0       0       0       0
  5645 ;;      Locals:         0       0       0       0       0       0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0
  5647 ;;      Totals:         4       0       0       0       0       0       0
  5648 ;;Total ram usage:        4 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    2
  5651 ;; This function calls:
  5652 ;;		_UART_SetBaudRate
  5653 ;; This function is called by:
  5654 ;;		_main
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text35
  5659  006978                     __ptext35:
  5660                           	opt stack 0
  5661  006978                     _UART_Init:
  5662                           	opt stack 28
  5663                           
  5664                           ;uart.c: 68: TRISC=0x80;
  5665                           
  5666                           ;incstack = 0
  5667  006978  0E80               	movlw	128
  5668  00697A  6E94               	movwf	3988,c	;volatile
  5669                           
  5670                           ;uart.c: 69: TXSTA=0x20;
  5671  00697C  0E20               	movlw	32
  5672  00697E  6EAC               	movwf	4012,c	;volatile
  5673                           
  5674                           ;uart.c: 70: RCSTA=0x90;
  5675  006980  0E90               	movlw	144
  5676  006982  6EAB               	movwf	4011,c	;volatile
  5677                           
  5678                           ;uart.c: 71: UART_SetBaudRate(v_baudRate_u32);
  5679  006984  C017  F00E         	movff	UART_Init@v_baudRate_u32,UART_SetBaudRate@v_baudRate_u32
  5680  006988  C018  F00F         	movff	UART_Init@v_baudRate_u32+1,UART_SetBaudRate@v_baudRate_u32+1
  5681  00698C  C019  F010         	movff	UART_Init@v_baudRate_u32+2,UART_SetBaudRate@v_baudRate_u32+2
  5682  006990  C01A  F011         	movff	UART_Init@v_baudRate_u32+3,UART_SetBaudRate@v_baudRate_u32+3
  5683  006994  ECDA  F036         	call	_UART_SetBaudRate	;wreg free
  5684  006998  0012               	return		;funcret
  5685  00699A                     __end_of_UART_Init:
  5686                           	opt stack 0
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           intcon	equ	0xFF2
  5694                           postinc0	equ	0xFEE
  5695                           wreg	equ	0xFE8
  5696                           postdec1	equ	0xFE5
  5697                           fsr1l	equ	0xFE1
  5698                           indf2	equ	0xFDF
  5699                           postinc2	equ	0xFDE
  5700                           postdec2	equ	0xFDD
  5701                           fsr2h	equ	0xFDA
  5702                           fsr2l	equ	0xFD9
  5703                           status	equ	0xFD8
  5704                           
  5705 ;; *************** function _UART_SetBaudRate *****************
  5706 ;; Defined at:
  5707 ;;		line 91 in file "uart.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  v_baudRate_u    4   13[COMRAM] unsigned long 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  RegValue        1   21[COMRAM] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      void 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5721 ;;      Params:         4       0       0       0       0       0       0
  5722 ;;      Locals:         1       0       0       0       0       0       0
  5723 ;;      Temps:          4       0       0       0       0       0       0
  5724 ;;      Totals:         9       0       0       0       0       0       0
  5725 ;;Total ram usage:        9 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    1
  5728 ;; This function calls:
  5729 ;;		___lldiv
  5730 ;; This function is called by:
  5731 ;;		_UART_Init
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text36
  5736  006DB4                     __ptext36:
  5737                           	opt stack 0
  5738  006DB4                     _UART_SetBaudRate:
  5739                           	opt stack 28
  5740                           
  5741                           ;uart.c: 93: uint8_t RegValue;
  5742                           ;uart.c: 95: if((v_baudRate_u32 >= 2400) && (v_baudRate_u32<=115200UL))
  5743                           
  5744                           ;incstack = 0
  5745  006DB4  5011               	movf	UART_SetBaudRate@v_baudRate_u32+3,w,c
  5746  006DB6  1010               	iorwf	UART_SetBaudRate@v_baudRate_u32+2,w,c
  5747  006DB8  E106               	bnz	u2400
  5748  006DBA  0E60               	movlw	96
  5749  006DBC  5C0E               	subwf	UART_SetBaudRate@v_baudRate_u32,w,c
  5750  006DBE  0E09               	movlw	9
  5751  006DC0  580F               	subwfb	UART_SetBaudRate@v_baudRate_u32+1,w,c
  5752  006DC2  A0D8               	btfss	status,0,c
  5753  006DC4  D02D               	goto	l2374
  5754  006DC6                     u2400:
  5755  006DC6  5011               	movf	UART_SetBaudRate@v_baudRate_u32+3,w,c
  5756  006DC8  E12B               	bnz	l2374
  5757  006DCA  040E               	decf	UART_SetBaudRate@v_baudRate_u32,w,c
  5758  006DCC  0EC2               	movlw	194
  5759  006DCE  580F               	subwfb	UART_SetBaudRate@v_baudRate_u32+1,w,c
  5760  006DD0  0E01               	movlw	1
  5761  006DD2  5810               	subwfb	UART_SetBaudRate@v_baudRate_u32+2,w,c
  5762  006DD4  B0D8               	btfsc	status,0,c
  5763  006DD6  D024               	goto	l2374
  5764                           
  5765                           ;uart.c: 96: {
  5766                           ;uart.c: 99: RegValue = (uint8_t)(uint32_t)((20000000UL / (64*(uint32_t)v_baudRate_u32))
      +                           - 1);
  5767  006DD8  0E00               	movlw	0
  5768  006DDA  6E01               	movwf	___lldiv@dividend,c
  5769  006DDC  0E2D               	movlw	45
  5770  006DDE  6E02               	movwf	___lldiv@dividend+1,c
  5771  006DE0  0E31               	movlw	49
  5772  006DE2  6E03               	movwf	___lldiv@dividend+2,c
  5773  006DE4  0E01               	movlw	1
  5774  006DE6  6E04               	movwf	___lldiv@dividend+3,c
  5775  006DE8  C00E  F012         	movff	UART_SetBaudRate@v_baudRate_u32,??_UART_SetBaudRate
  5776  006DEC  C00F  F013         	movff	UART_SetBaudRate@v_baudRate_u32+1,??_UART_SetBaudRate+1
  5777  006DF0  C010  F014         	movff	UART_SetBaudRate@v_baudRate_u32+2,??_UART_SetBaudRate+2
  5778  006DF4  C011  F015         	movff	UART_SetBaudRate@v_baudRate_u32+3,??_UART_SetBaudRate+3
  5779  006DF8  0E06               	movlw	6
  5780  006DFA                     u2425:
  5781  006DFA  90D8               	bcf	status,0,c
  5782  006DFC  3612               	rlcf	??_UART_SetBaudRate,f,c
  5783  006DFE  3613               	rlcf	??_UART_SetBaudRate+1,f,c
  5784  006E00  3614               	rlcf	??_UART_SetBaudRate+2,f,c
  5785  006E02  3615               	rlcf	??_UART_SetBaudRate+3,f,c
  5786  006E04  2EE8               	decfsz	wreg,f,c
  5787  006E06  D7F9               	goto	u2425
  5788  006E08  C012  F005         	movff	??_UART_SetBaudRate,___lldiv@divisor
  5789  006E0C  C013  F006         	movff	??_UART_SetBaudRate+1,___lldiv@divisor+1
  5790  006E10  C014  F007         	movff	??_UART_SetBaudRate+2,___lldiv@divisor+2
  5791  006E14  C015  F008         	movff	??_UART_SetBaudRate+3,___lldiv@divisor+3
  5792  006E18  EC52  F037         	call	___lldiv	;wreg free
  5793  006E1C  0401               	decf	?___lldiv,w,c
  5794  006E1E  D001               	goto	L5
  5795  006E20                     l2374:
  5796                           
  5797                           ;uart.c: 101: else
  5798                           ;uart.c: 102: {
  5799                           ;uart.c: 104: RegValue = (uint8_t)(uint32_t)((20000000UL / (64*(uint32_t)9600)) - 1);
  5800  006E20  0E1F               	movlw	31
  5801  006E22                     L5:
  5802  006E22  6E16               	movwf	UART_SetBaudRate@RegValue,c
  5803                           
  5804                           ;uart.c: 105: }
  5805                           ;uart.c: 107: SPBRG = RegValue;
  5806  006E24  C016  FFAF         	movff	UART_SetBaudRate@RegValue,4015	;volatile
  5807  006E28  0012               	return		;funcret
  5808  006E2A                     __end_of_UART_SetBaudRate:
  5809                           	opt stack 0
  5810                           tblptru	equ	0xFF8
  5811                           tblptrh	equ	0xFF7
  5812                           tblptrl	equ	0xFF6
  5813                           tablat	equ	0xFF5
  5814                           prodh	equ	0xFF4
  5815                           prodl	equ	0xFF3
  5816                           intcon	equ	0xFF2
  5817                           postinc0	equ	0xFEE
  5818                           wreg	equ	0xFE8
  5819                           postdec1	equ	0xFE5
  5820                           fsr1l	equ	0xFE1
  5821                           indf2	equ	0xFDF
  5822                           postinc2	equ	0xFDE
  5823                           postdec2	equ	0xFDD
  5824                           fsr2h	equ	0xFDA
  5825                           fsr2l	equ	0xFD9
  5826                           status	equ	0xFD8
  5827                           
  5828 ;; *************** function ___lldiv *****************
  5829 ;; Defined at:
  5830 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.36\sources\common\lldiv.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;  dividend        4    0[COMRAM] unsigned long 
  5833 ;;  divisor         4    4[COMRAM] unsigned long 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  quotient        4    8[COMRAM] unsigned long 
  5836 ;;  counter         1   12[COMRAM] unsigned char 
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  4    0[COMRAM] unsigned long 
  5839 ;; Registers used:
  5840 ;;		wreg, status,2, status,0
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5846 ;;      Params:         8       0       0       0       0       0       0
  5847 ;;      Locals:         5       0       0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0
  5849 ;;      Totals:        13       0       0       0       0       0       0
  5850 ;;Total ram usage:       13 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_UART_SetBaudRate
  5856 ;;		_UART_TxNumber
  5857 ;;		_LCD_DisplayNumber
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text37
  5862  006EA4                     __ptext37:
  5863                           	opt stack 0
  5864  006EA4                     ___lldiv:
  5865                           	opt stack 27
  5866                           
  5867                           ;incstack = 0
  5868  006EA4  0E00               	movlw	0
  5869  006EA6  6E09               	movwf	___lldiv@quotient,c
  5870  006EA8  0E00               	movlw	0
  5871  006EAA  6E0A               	movwf	___lldiv@quotient+1,c
  5872  006EAC  0E00               	movlw	0
  5873  006EAE  6E0B               	movwf	___lldiv@quotient+2,c
  5874  006EB0  0E00               	movlw	0
  5875  006EB2  6E0C               	movwf	___lldiv@quotient+3,c
  5876  006EB4  5005               	movf	___lldiv@divisor,w,c
  5877  006EB6  1006               	iorwf	___lldiv@divisor+1,w,c
  5878  006EB8  1007               	iorwf	___lldiv@divisor+2,w,c
  5879  006EBA  1008               	iorwf	___lldiv@divisor+3,w,c
  5880  006EBC  B4D8               	btfsc	status,2,c
  5881  006EBE  D02A               	goto	l886
  5882  006EC0  0E01               	movlw	1
  5883  006EC2  6E0D               	movwf	___lldiv@counter,c
  5884  006EC4  D006               	goto	l2036
  5885  006EC6                     l2034:
  5886  006EC6  90D8               	bcf	status,0,c
  5887  006EC8  3605               	rlcf	___lldiv@divisor,f,c
  5888  006ECA  3606               	rlcf	___lldiv@divisor+1,f,c
  5889  006ECC  3607               	rlcf	___lldiv@divisor+2,f,c
  5890  006ECE  3608               	rlcf	___lldiv@divisor+3,f,c
  5891  006ED0  2A0D               	incf	___lldiv@counter,f,c
  5892  006ED2                     l2036:
  5893  006ED2  AE08               	btfss	___lldiv@divisor+3,7,c
  5894  006ED4  D7F8               	goto	l2034
  5895  006ED6                     l2038:
  5896  006ED6  90D8               	bcf	status,0,c
  5897  006ED8  3609               	rlcf	___lldiv@quotient,f,c
  5898  006EDA  360A               	rlcf	___lldiv@quotient+1,f,c
  5899  006EDC  360B               	rlcf	___lldiv@quotient+2,f,c
  5900  006EDE  360C               	rlcf	___lldiv@quotient+3,f,c
  5901  006EE0  5005               	movf	___lldiv@divisor,w,c
  5902  006EE2  5C01               	subwf	___lldiv@dividend,w,c
  5903  006EE4  5006               	movf	___lldiv@divisor+1,w,c
  5904  006EE6  5802               	subwfb	___lldiv@dividend+1,w,c
  5905  006EE8  5007               	movf	___lldiv@divisor+2,w,c
  5906  006EEA  5803               	subwfb	___lldiv@dividend+2,w,c
  5907  006EEC  5008               	movf	___lldiv@divisor+3,w,c
  5908  006EEE  5804               	subwfb	___lldiv@dividend+3,w,c
  5909  006EF0  A0D8               	btfss	status,0,c
  5910  006EF2  D009               	goto	l2046
  5911  006EF4  5005               	movf	___lldiv@divisor,w,c
  5912  006EF6  5E01               	subwf	___lldiv@dividend,f,c
  5913  006EF8  5006               	movf	___lldiv@divisor+1,w,c
  5914  006EFA  5A02               	subwfb	___lldiv@dividend+1,f,c
  5915  006EFC  5007               	movf	___lldiv@divisor+2,w,c
  5916  006EFE  5A03               	subwfb	___lldiv@dividend+2,f,c
  5917  006F00  5008               	movf	___lldiv@divisor+3,w,c
  5918  006F02  5A04               	subwfb	___lldiv@dividend+3,f,c
  5919  006F04  8009               	bsf	___lldiv@quotient,0,c
  5920  006F06                     l2046:
  5921  006F06  90D8               	bcf	status,0,c
  5922  006F08  3208               	rrcf	___lldiv@divisor+3,f,c
  5923  006F0A  3207               	rrcf	___lldiv@divisor+2,f,c
  5924  006F0C  3206               	rrcf	___lldiv@divisor+1,f,c
  5925  006F0E  3205               	rrcf	___lldiv@divisor,f,c
  5926  006F10  2E0D               	decfsz	___lldiv@counter,f,c
  5927  006F12  D7E1               	goto	l2038
  5928  006F14                     l886:
  5929  006F14  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5930  006F18  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5931  006F1C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5932  006F20  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5933  006F24  0012               	return		;funcret
  5934  006F26                     __end_of___lldiv:
  5935                           	opt stack 0
  5936                           tblptru	equ	0xFF8
  5937                           tblptrh	equ	0xFF7
  5938                           tblptrl	equ	0xFF6
  5939                           tablat	equ	0xFF5
  5940                           prodh	equ	0xFF4
  5941                           prodl	equ	0xFF3
  5942                           intcon	equ	0xFF2
  5943                           postinc0	equ	0xFEE
  5944                           wreg	equ	0xFE8
  5945                           postdec1	equ	0xFE5
  5946                           fsr1l	equ	0xFE1
  5947                           indf2	equ	0xFDF
  5948                           postinc2	equ	0xFDE
  5949                           postdec2	equ	0xFDD
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           tblptru	equ	0xFF8
  5954                           tblptrh	equ	0xFF7
  5955                           tblptrl	equ	0xFF6
  5956                           tablat	equ	0xFF5
  5957                           prodh	equ	0xFF4
  5958                           prodl	equ	0xFF3
  5959                           intcon	equ	0xFF2
  5960                           postinc0	equ	0xFEE
  5961                           wreg	equ	0xFE8
  5962                           postdec1	equ	0xFE5
  5963                           fsr1l	equ	0xFE1
  5964                           indf2	equ	0xFDF
  5965                           postinc2	equ	0xFDE
  5966                           postdec2	equ	0xFDD
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971                           	psect	rparam
  5972  0000                     tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           intcon	equ	0xFF2
  5979                           postinc0	equ	0xFEE
  5980                           wreg	equ	0xFE8
  5981                           postdec1	equ	0xFE5
  5982                           fsr1l	equ	0xFE1
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8


Data Sizes:
    Strings     335
    Constant    0
    Data        4
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     75      95
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    UART_Printf@str	PTR unsigned char  size(2) Largest target is 0

    UART_Printf@argList	PTR const unsigned char  size(2) Largest target is 131
		 -> STR_7(CODE[16]), STR_6(CODE[23]), STR_5(CODE[69]), STR_4(CODE[18]), 
		 -> STR_1(CODE[131]), 

    UART_Printf@ptr	PTR const unsigned char  size(2) Largest target is 131
		 -> STR_7(CODE[16]), STR_6(CODE[23]), STR_5(CODE[69]), STR_4(CODE[18]), 
		 -> STR_1(CODE[131]), 

    UART_Printf@argp	PTR void [1] size(2) Largest target is 1
		 -> ?_UART_Printf(COMRAM[1]), 

    UART_TxString@ptr_string	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_3(CODE[54]), 

    LCD_DisplayString@ptr_stringPointer_u8	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_2(CODE[24]), 


Critical Paths under _main in COMRAM

    _main->_eeprom_Test
    _switch_Test->_GPIO_PinWrite
    _led_Test->_DELAY_ms
    _lcd_Test->_LCD_SetUp
    _LCD_SetUp->_GPIO_PinDirection
    _lcd_Reset->_lcd_SendHigherNibble
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_DisplayString->_LCD_DisplayChar
    _LCD_DisplayChar->_lcd_DataWrite
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_DataWrite->_lcd_SendHigherNibble
    _lcd_DataWrite->_lcd_SendLowerNibble
    _lcd_SendDataSignals->_GPIO_PinWrite
    _LCD_GoToNextLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _LCD_CmdWrite->_lcd_SendHigherNibble
    _LCD_CmdWrite->_lcd_SendLowerNibble
    _lcd_SendLowerNibble->_GPIO_PinWrite
    _lcd_SendHigherNibble->_GPIO_PinWrite
    _lcd_SendCmdSignals->_GPIO_PinWrite
    _lcd_BusyCheck->_GPIO_PinWrite
    _GPIO_PinWrite->_GPIO_PinRead
    _DELAY_ms->_DELAY_us
    _eeprom_Test->_UART_Printf
    _adc_Test->_UART_Printf
    _UART_Printf->_UART_TxNumber
    _UART_TxString->_UART_TxChar
    _UART_TxNumber->___lldiv
    _ADC_GetAdcValue->_DELAY_us
    _UART_Init->_UART_SetBaudRate
    _UART_SetBaudRate->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  106250
                                             74 COMRAM     1     1      0
                           _DELAY_ms
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
                          _UART_Init
                        _UART_Printf
                        _UART_RxChar
                           _adc_Test
                        _eeprom_Test
                           _lcd_Test
                           _led_Test
                        _switch_Test
 ---------------------------------------------------------------------------------
 (1) _switch_Test                                          0     0      0    4262
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (1) _led_Test                                             4     4      0    1506
                                              4 COMRAM     4     4      0
                           _DELAY_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_Test                                             0     0      0   80468
                  _LCD_DisplayString
                           _LCD_Init
                          _LCD_SetUp
 ---------------------------------------------------------------------------------
 (2) _LCD_SetUp                                           11     1     10    2954
                                              5 COMRAM    11     1     10
                  _GPIO_PinDirection
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             2     1      1   49929
                                             13 COMRAM     2     1      1
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (3) _lcd_Reset                                            0     0      0    7248
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
 ---------------------------------------------------------------------------------
 (3) _LCD_Clear                                            0     0      0   27476
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToLine                                         1     1      0   13771
                                             12 COMRAM     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayString                                    2     0      2   27585
                                             13 COMRAM     2     0      2
                    _LCD_DisplayChar
 ---------------------------------------------------------------------------------
 (3) _LCD_DisplayChar                                      1     1      0   27476
                                             12 COMRAM     1     1      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_DataWrite                                        1     1      0   13705
                                             11 COMRAM     1     1      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendDataSignals                                  0     0      0    2917
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToNextLine                                     0     0      0   13705
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (3) _LCD_CmdWrite                                         1     1      0   13705
                                             11 COMRAM     1     1      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (4) _lcd_SendLowerNibble                                  1     1      0    2278
                                             10 COMRAM     1     1      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_SendHigherNibble                                 1     1      0    2278
                                             10 COMRAM     1     1      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_SendCmdSignals                                   0     0      0    2917
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_BusyCheck                                        1     1      0    6143
                                             10 COMRAM     1     1      0
                           _DELAY_ms
                           _DELAY_us
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinWrite                                        5     4      1    2190
                                              5 COMRAM     5     4      1
                       _GPIO_PinRead (ARG)
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinRead                                         5     5      0     135
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinDirection                                    5     4      1    1742
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _DELAY_ms                                             2     0      2    1326
                                              2 COMRAM     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (1) _eeprom_Test                                          7     7      0    4547
                                             67 COMRAM     7     7      0
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
                        _UART_Printf
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteByte                                     4     1      3     195
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _EEPROM_ReadByte                                      2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_Test                                             0     0      0    4879
                    _ADC_GetAdcValue
                           _ADC_Init
                        _UART_Printf
 ---------------------------------------------------------------------------------
 (2) _UART_Printf                                         24    20      4    4130
                                             43 COMRAM    24    20      4
                    _ADC_GetAdcValue (ARG)
                        _UART_TxChar
                      _UART_TxNumber
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (2) _UART_TxString                                        2     0      2     195
                                              1 COMRAM     2     0      2
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (3) _UART_TxNumber                                       30    25      5    2502
                                             13 COMRAM    30    25      5
                        _UART_TxChar
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UART_TxChar                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetAdcValue                                      5     3      2     749
                                              2 COMRAM     5     3      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (3) _DELAY_us                                             2     0      2     727
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4    1042
                                             22 COMRAM     4     0      4
                   _UART_SetBaudRate
 ---------------------------------------------------------------------------------
 (2) _UART_SetBaudRate                                     9     5      4     956
                                             13 COMRAM     9     5      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     802
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DELAY_ms
     _DELAY_us
   _GPIO_PinDirection
   _GPIO_PinRead
   _GPIO_PinWrite
     _GPIO_PinRead (ARG)
   _UART_Init
     _UART_SetBaudRate
       ___lldiv
   _UART_Printf
     _ADC_GetAdcValue (ARG)
       _DELAY_us
     _UART_TxChar (ARG)
     _UART_TxNumber (ARG)
       _UART_TxChar
       ___lldiv
     _UART_TxString (ARG)
       _UART_TxChar
   _UART_RxChar
   _adc_Test
     _ADC_GetAdcValue
       _DELAY_us
     _ADC_Init
     _UART_Printf
       _ADC_GetAdcValue (ARG)
         _DELAY_us
       _UART_TxChar (ARG)
       _UART_TxNumber (ARG)
         _UART_TxChar
         ___lldiv
       _UART_TxString (ARG)
         _UART_TxChar
   _eeprom_Test
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _UART_Printf
       _ADC_GetAdcValue (ARG)
         _DELAY_us
       _UART_TxChar (ARG)
       _UART_TxNumber (ARG)
         _UART_TxChar
         ___lldiv
       _UART_TxString (ARG)
         _UART_TxChar
   _lcd_Test
     _LCD_DisplayString
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendHigherNibble
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendLowerNibble
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendHigherNibble
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendLowerNibble
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
     _LCD_Init
       _DELAY_ms
         _DELAY_us
       _LCD_Clear
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendHigherNibble
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendLowerNibble
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
         _LCD_GoToLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendHigherNibble
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendLowerNibble
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
         _lcd_SendHigherNibble
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
         _lcd_SendLowerNibble
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
       _lcd_Reset
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
         _lcd_SendHigherNibble
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
     _LCD_SetUp
       _GPIO_PinDirection
   _led_Test
     _DELAY_ms
       _DELAY_us
   _switch_Test
     _GPIO_PinDirection
     _GPIO_PinRead
     _GPIO_PinWrite
       _GPIO_PinRead (ARG)
     _UART_TxString
       _UART_TxChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     4B      5F       1       74.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5F      15        0.0%
DATA                 0      0      5F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Tue Aug 09 09:57:45 2016

                          ?_LCD_CmdWrite 0001                                       l64 723C  
                                     l82 6F8E                                       l89 6C14  
                                     _GO 007E11                            ?_LCD_GoToLine 0001  
                            __CFG_BORV$2 000000                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                              __CFG_OSC$HS 000000  
                                    l109 6EA2                                      l136 6AB2  
                                    l170 6A68                                      l176 6918  
                                    l329 6DA8                                      l506 77EE  
                                    l453 68FE                                      l447 68E4  
                                    l395 6FE2                                      l886 6F14  
                                    _GIE 007F97                             __CFG_CPB$OFF 000000  
                                    u300 71D4                                      u204 7174  
                                    u205 7170                                      u234 718E  
                                    u235 718A                                      u190 7160  
                                    u174 7150                                      u271 71B2  
                                    u175 714C                                      u264 71A8  
                                    u265 71A4                             __CFG_CPD$OFF 000000  
                                    u294 71C6                                      u295 71C2  
        EEPROM_WriteByte@v_eepromData_u8 0003                                      prod 000FF3  
                                    wreg 000FE8                  __end_of_ADC_GetAdcValue 6ACA  
                __end_of_LCD_DisplayChar 69C0                             __CFG_LVP$OFF 000000  
                           __CFG_WDT$OFF 000000                                     l1200 7164  
                                   l1202 717E                                     l1210 71D8  
                                   l1204 7198                                     l1212 71F8  
                                   l2020 6B22                                     l2110 76D6  
                                   l2102 76B4                                     l1206 71B6  
                                   l2112 76D8                                     l2200 7948  
                                   l2008 69FC                                     l2016 6B12  
                                   l2034 6EC6                                     l2114 76E2  
                                   l2036 6ED2                                     l2108 76C2  
                                   l2124 776E                                     l2052 69C2  
                                   l2046 6F06                                     l2038 6ED6  
                                   l2118 7734                                     l2214 79A6  
                                   l2206 7984                                     l2142 77C2  
                                   l2056 69D6                                     l2232 7A2A  
                                   l2224 79E8                                     l2216 79BE  
                                   l2240 7A96                                     l2152 77F2  
                                   l2128 7788                                     l2082 75B6  
                                   l2090 7624                                     l2226 7A04  
                                   l2170 7856                                     l2242 7A9A  
                                   l2322 6A16                                     l2314 6D96  
                                   l2180 7890                                     l2236 7A32  
                                   l2148 77E0                                     l2068 69AA  
                                   l2308 6D7A                                     l2094 7638  
                                   l2182 78AC                                     l2158 780E  
                                   l2238 7A90                                     l1198 7140  
                                   l2326 6A2A                                     l2430 6CE2  
                                   l2096 763E                                     l2088 761C  
                                   l2168 7838                                     l2408 6F7E  
                                   l2194 7918                                     l2442 6E46  
                                   l2274 70B0                                     l2188 78DC  
                                   l2436 695C                                     l1900 73CC  
                                   l2276 70B6                                     l2460 727E  
                                   l2374 6E20                                     l1902 73E8  
                                   l1910 7424                                     l2286 70E2  
                                   l2470 72B2                                     l1920 7494  
                                   l2384 6F3A                                     l2472 72B8  
                                   l2464 729E                                     l1906 7408  
                                   l1930 74F0                                     l1914 7458  
                                   l2474 72BE                                     l2466 72A6  
                                   l1932 750C                                     l1924 74B4  
                                   l2468 72AC                                     l1950 693C  
                                   l1942 7568                                     l1926 74D0  
                                   l1918 7478                                     l2478 72C4  
                                   l1872 692A                                     l1936 752C  
                                   l1874 6930                                     l1954 694E  
                                   l1890 7370                                     l1882 7318  
                                   l1938 7548                                     l1946 7584  
                                   l1884 7334                                     l1964 704A  
                                   l1894 7390                                     l1878 72F8  
                                   l1982 6AE0                                     l1896 73AC  
                                   l1888 7354                                     l1968 705C  
                                   l1986 6AF0                                     _ADON 007E10  
                                   STR_1 7AAF                                     STR_2 7BAD  
                                   STR_3 7B77                                     STR_4 7BDC  
                                   STR_5 7B32                                     STR_6 7BC5  
                                   STR_7 7BEE                                     u2060 760E  
                                   _LATA 000F89                                     u2070 7610  
                                   u2054 75D0                                     _LATB 000F8A  
                                   u2055 75CA                                     _LATC 000F8B  
                                   u2400 6DC6                                     u1504 73A0  
                                   _LATD 000F8C                                     u1505 739C  
                                   _LATE 000F8D                                     u1434 730E  
                                   u1435 730A                                     u1524 73C2  
                                   u1444 7328                                     u1525 73BE  
                                   u1445 7324                                     u1534 73DC  
                                   u1614 74AA                                     u1535 73D8  
                                   u1615 74A6                                     u2360 6A94  
                                   u1464 734A                                     u1704 755E  
                                   u1624 74C4                                     u1800 6C90  
                                   u2425 6DFA                                     u1465 7346  
                                   u1705 755A                                     u1625 74C0  
                                   u1554 73FE                                     u1474 7364  
                                   u1714 7578                                     u1810 6C92  
                                   u1555 73FA                                     u1475 7360  
                                   u1715 7574                                     u1564 7418  
                                   u1644 74E6                                     u1900 6C56  
                                   u1820 6CA2                                     u1565 7414  
                                   u1645 74E2                                     u1494 7386  
                                   u1654 7500                                     u1910 6C58  
                                   u1830 6CA4                                     u1495 7382  
                                   u1655 74FC                                     u1584 746E  
                                   u1840 6C20                                     u1760 6C6C  
                                   u1585 746A                                     u1674 7522  
                                   u1594 7488                                     u1850 6C22  
                                   u1770 6C6E                                     u1675 751E  
                                   u1595 7484                                     u1684 753C  
                                   u1860 6C32                                     u1780 6C7E  
                                   u1685 7538                                     u1870 6C34  
                                   u1790 6C80                                     u1880 6C44  
                                   u1890 6C46                                     _RCIF 007CF5  
                                   _TXIF 007CF4                                     _main 71FC  
                     __size_of_LCD_Clear 000E                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                         __end_of_ADC_Init 68FC  
                     __size_of_LCD_SetUp 00C0                                     prodl 000FF3  
                                   start 0000                            __CFG_IESO$OFF 000000  
                       __end_of_DELAY_ms 6958                         __end_of_DELAY_us 693A  
               __size_of_EEPROM_ReadByte 0010                            __CFG_MCLRE$ON 000000  
                           ___param_bank 000010                            ?_GPIO_PinRead 0001  
                            _switch_Test 6CAE                           ??_LCD_CmdWrite 000C  
                            LCD_SetUp@D0 0008                              LCD_SetUp@D1 0009  
                            LCD_SetUp@D2 000A                              LCD_SetUp@D3 000B  
                            LCD_SetUp@D4 000C                              LCD_SetUp@D5 000D  
                            LCD_SetUp@D6 000E                              LCD_SetUp@D7 000F  
                            LCD_SetUp@EN 0007                              LCD_SetUp@RS 0010  
                            LCD_SetUp@RW 0006                           ??_LCD_GoToLine 000D  
                          _GPIO_PinWrite 7446                         __end_of_LCD_Init 6DB4  
                  eeprom_Test@write_char 0049                  LCD_CmdWrite@v_lcdCmd_u8 000C  
                                  ?_main 0001                                    _EEADR 000FA9  
                        __end_of___lldiv 6F26                                    _RCREG 000FAE  
                                  _RCSTA 000FAB                                    _SPBRG 000FAF  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _PORTD 000F83  
                                  _PORTE 000F84                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _TXREG 000FAD                                    _TXSTA 000FAC  
                          __CFG_PWRT$OFF 000000                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                     __size_of_UART_Init 0022                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000    LCD_DisplayString@ptr_stringPointer_u8 000E  
                         __CFG_BOREN$OFF 000000                                    tablat 000FF5  
           __end_of_lcd_SendHigherNibble 6C62                                    status 000FD8  
                         ??_GPIO_PinRead 0001                          __initialization 6B9A  
             GPIO_PinWrite@enm_pinNumber 000A                             __end_of_main 72E6  
                         ?_GPIO_PinWrite 0006                        _GPIO_PinDirection 72E6  
                                 ??_main 004B              __size_of_lcd_SendCmdSignals 0036  
                      __end_of_LCD_Clear 6918                            __activetblptr 000002  
                     ?_GPIO_PinDirection 0001                        __end_of_LCD_SetUp 712A  
                       ?_ADC_GetAdcValue 0003                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                       ?_LCD_DisplayChar 0001              LCD_DisplayChar@v_lcdData_u8 000D  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                                   _EECON1 000FA6  
                                 _EECON2 000FA7                      ??_GPIO_PinDirection 0002  
                       __end_of_adc_Test 6978                        ?_UART_SetBaudRate 000E  
                  lcd_BusyCheck@busyflag 000B                       ??_UART_SetBaudRate 0012  
                           ?_UART_RxChar 0001                             ?_UART_TxChar 0001  
                   __size_of_eeprom_Test 007A                             ?_UART_Printf 002C  
                         __CFG_XINST$OFF 000000                         __end_of_lcd_Test 6C16  
                       __end_of_led_Test 6FBE                GPIO_PinRead@enm_pinNumber 0005  
                      __end_of_UART_Init 699A                                ??___lldiv 0009  
              __end_of_GPIO_PinDirection 7446                        ??_EEPROM_ReadByte 0003  
                        led_Test@pattern 0007                                   clear_0 6BA0  
         GPIO_PinDirection@enm_pinNumber 0005                 __end_of_EEPROM_WriteByte 6A98  
                       DELAY_ms@ms_count 0003  UART_TxNumber@v_numOfDigitsToTransmit_u8 0012  
                           __pdataCOMRAM 005C                                ?_ADC_Init 0001  
                           __mediumconst 7AAE                        ?_LCD_GoToNextLine 0001  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                                ?_DELAY_ms 0003  
                              ?_DELAY_us 0001              __end_of_lcd_SendLowerNibble 6CAE  
                     ??_LCD_GoToNextLine 000D                     __end_of_LCD_CmdWrite 6AFC  
                   __end_of_LCD_GoToLine 6A68              lcd_SendLowerNibble@dataByte 000B  
                             __accesstop 0080                  __end_of__initialization 6BC6  
                              ?_LCD_Init 000E                          __CFG_PBADEN$OFF 000000  
                  __end_of_UART_TxNumber 7776                            ___rparam_used 000001  
                  __end_of_UART_TxString 69EA                          ??_GPIO_PinWrite 0007  
                         __pcstackCOMRAM 0001                    __end_of_lcd_DataWrite 6B2E  
                   _lcd_SendHigherNibble 6C16                       __size_of_lcd_Reset 005A  
                             ??_ADC_Init 0001             __size_of_lcd_SendDataSignals 0036  
                             ??_DELAY_ms 0005                               ??_DELAY_us 0003  
                   __end_of_GPIO_PinRead 71FC           GPIO_PinWrite@var_portNumber_u8 0009  
                  __end_of_lcd_BusyCheck 706A             lcd_SendHigherNibble@dataByte 000B  
           GPIO_PinWrite@var_pinValue_u8 0006                               ??_LCD_Init 000F  
                           ?_switch_Test 0001      EEPROM_WriteByte@v_eepromAddress_u16 0001  
             __size_of_GPIO_PinDirection 0160                                ?_adc_Test 0001  
                  ?_lcd_SendHigherNibble 0001                                  _GO_DONE 007E11  
                              ?_lcd_Test 0001                         DELAY_us@us_count 0001  
                              ?_led_Test 0001                EEPROM_WriteByte@gie_value 0004  
                                __Hparam 0000                        __end_of_lcd_Reset 6D5A  
                                __Lparam 0000                     __size_of_UART_RxChar 000A  
                   __size_of_UART_TxChar 000E                     __size_of_UART_Printf 0338  
              LCD_Init@v_lcdNoOfLines_u8 000F                                  ___lldiv 6EA4  
     EEPROM_ReadByte@v_eepromAddress_u16 0001                          __CFG_STVREN$OFF 000000  
                                __pcinit 6B9A                               ??_adc_Test 0044  
                                __ramtop 0600                                  __ptext0 71FC  
                                __ptext1 6CAE                                  __ptext2 6F26  
                                __ptext3 6BD0                                  __ptext4 706A  
                                __ptext5 6D5A                                  __ptext6 6D00  
                                __ptext7 690A                                  __ptext8 6A3E  
                                __ptext9 6A14                    __size_of_LCD_CmdWrite 0032  
                              _LCDConfig 004C                    __size_of_LCD_GoToLine 002A  
                              _LCD_Clear 690A                           UART_Printf@ptr 003E  
                         UART_Printf@str 0030                               ??_lcd_Test 0011  
                              _LCD_SetUp 706A                               ??_led_Test 0005  
                   end_of_initialization 6BC6                           UART_TxNumber@a 001E  
                         UART_TxNumber@i 002B             LCD_Init@v_MaxCharsPerLine_u8 000E  
                          __Lmediumconst 7AAE                          _EEPROM_ReadByte 6918  
                        ___lldiv@divisor 0005                          ___lldiv@counter 000D  
         UART_SetBaudRate@v_baudRate_u32 000E                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                   ??_lcd_SendHigherNibble 000B  
             __end_of_lcd_SendCmdSignals 6B64                             _LCD_CmdWrite 6ACA  
                              _UART_Init 6978                __size_of_UART_SetBaudRate 0076  
                           _LCD_GoToLine 6A3E         ADC_GetAdcValue@var_adcChannel_u8 0007  
                  __size_of_GPIO_PinRead 00D2                        ?_EEPROM_WriteByte 0001  
                     ??_EEPROM_WriteByte 0004                               ?_LCD_Clear 0001  
                             ?_LCD_SetUp 0006                        __size_of_ADC_Init 000E  
                      __size_of_DELAY_ms 001E                        __size_of_DELAY_us 0012  
                          ??_eeprom_Test 0044                 __size_of_ADC_GetAdcValue 0032  
               __size_of_LCD_DisplayChar 0026                        __size_of_LCD_Init 005A  
                             main@option 004B                __size_of_LCD_GoToNextLine 002A  
                    _lcd_SendDataSignals 6B64          UART_TxNumber@v_numericSystem_u8 002A  
     GPIO_PinDirection@var_portNumber_u8 0004                             _GPIO_PinRead 712A  
                   __size_of_switch_Test 0052                               ?_UART_Init 0017  
                          __pidataCOMRAM 68E0                 _ARR_LcdLineNumAddress_U8 005C  
                    start_initialization 6B9A                     ?_lcd_SendDataSignals 0001  
                 _v_LcdTrackCursorPos_U8 005A                  __end_of_EEPROM_ReadByte 6928  
          GPIO_PinRead@var_portNumber_u8 0003             __size_of_lcd_SendLowerNibble 004C  
        GPIO_PinDirection@var_pinDirn_u8 0001                      __end_of_eeprom_Test 6EA4  
                  __end_of_GPIO_PinWrite 75A6                         __CFG_LPT1OSC$OFF 000000  
                      _UART_TxNumber$514 0028                        __size_of_adc_Test 0020  
                  ??_lcd_SendDataSignals 000B                     _v_LcdTrackLineNum_U8 005B  
                 __size_of_UART_TxNumber 01D0                              __pbssCOMRAM 004C  
                  lcd_DataWrite@dataByte 000C                   __size_of_UART_TxString 002A  
                            ??_LCD_Clear 000E                              ??_LCD_SetUp 0010  
                 __size_of_lcd_DataWrite 0032                        __size_of_lcd_Test 0046  
                      __size_of_led_Test 0098              LCD_GoToLine@v_lineNumber_u8 000D  
                      __CFG_CCP2MX$PORTC 000000                            __pmediumconst 7AAE  
                               ?___lldiv 0001                        ??_ADC_GetAdcValue 0005  
                              _lcd_Reset 6D00                        ??_LCD_DisplayChar 000D  
                            ??_UART_Init 001B                         _UART_SetBaudRate 6DB4  
                 __size_of_lcd_BusyCheck 00AC                                 _ADC_Init 68EE  
                      _LCD_DisplayString 6A14                                 _DELAY_ms 693A  
                               _DELAY_us 6928                       ?_LCD_DisplayString 000E  
                       ?_EEPROM_ReadByte 0001                            UART_Printf@ch 0040  
                               _LCD_Init 6D5A                              _eeprom_Test 6E2A  
                    ??_LCD_DisplayString 0010                            ??_UART_RxChar 0001  
                          ??_UART_TxChar 0001                            _UART_TxNumber 75A6  
                       _LCD_GoToNextLine 69EA                            ??_UART_Printf 0030  
                          _UART_TxString 69C0                         __CFG_WDTPS$32768 000000  
                UART_Init@v_baudRate_u32 0017                               ?_lcd_Reset 0001  
                          _lcd_DataWrite 6AFC                  UART_TxString@ptr_string 0002  
               GPIO_PinRead@returnStatus 0004                                led_Test@i 0005  
              __end_of_LCD_DisplayString 6A3E                       _lcd_SendCmdSignals 6B2E  
                              copy_data0 6BBA                            _lcd_BusyCheck 6FBE  
              __size_of_EEPROM_WriteByte 0030                      ?_lcd_SendCmdSignals 0001  
              UART_TxNumber@v_number_u32 000E                           ?_UART_TxNumber 000E  
                         ?_UART_TxString 0002                                 __Hrparam 0000  
               UART_TxChar@v_uartData_u8 0001                                 __Lrparam 0000  
                         ?_lcd_DataWrite 0001                      __end_of_UART_RxChar 68EE  
                    __end_of_UART_TxChar 690A                         __size_of___lldiv 0082  
                    __end_of_UART_Printf 7AAE                                 _adc_Test 6958  
                   ??_lcd_SendCmdSignals 000B            __size_of_lcd_SendHigherNibble 004C  
                    _lcd_SendLowerNibble 6C62                                 __ptext10 699A  
                               __ptext11 6AFC                                 __ptext20 712A  
                               __ptext12 6B64                                 __ptext21 72E6  
                               __ptext13 69EA                                 __ptext30 68FC  
                               __ptext22 693A                                 __ptext14 6ACA  
                               __ptext31 68EE                                 __ptext23 6E2A  
                               __ptext15 6C62                                 __ptext32 6A98  
                               __ptext24 6A68                                 __ptext16 6C16  
                               __ptext33 6928                                 __ptext25 6918  
                               __ptext17 6B2E                                 __ptext34 68E4  
                               __ptext26 6958                                 __ptext18 6FBE  
                               __ptext35 6978                                 __ptext27 7776  
                               __ptext19 7446                                 __ptext36 6DB4  
                               __ptext28 69C0                                 __ptext37 6EA4  
                               __ptext29 75A6                                 _lcd_Test 6BD0  
                               _led_Test 6F26                           ?_lcd_BusyCheck 0001  
                          __size_of_main 00EA                     ?_lcd_SendLowerNibble 0001  
                          ??_switch_Test 000B                          UART_Printf@argp 0042  
                            ??_lcd_Reset 000C                 UART_SetBaudRate@RegValue 0016  
             __size_of_LCD_DisplayString 002A                eeprom_Test@eeprom_address 0047  
                        ??_UART_TxNumber 0013                 __end_of_UART_SetBaudRate 6E2A  
                        _ADC_GetAdcValue 6A98                          ??_UART_TxString 0004  
                  ??_lcd_SendLowerNibble 000B                         ___lldiv@dividend 0001  
                        _LCD_DisplayChar 699A                              _UART_RxChar 68E4  
                            _UART_TxChar 68FC                              _UART_Printf 7776  
                        ??_lcd_DataWrite 000C              __end_of_lcd_SendDataSignals 6B9A  
                    __end_of_switch_Test 6D00                         ___lldiv@quotient 0009  
               __end_of_LCD_GoToNextLine 6A14                          ??_lcd_BusyCheck 000B  
                   eeprom_Test@read_char 0045                   __size_of_GPIO_PinWrite 0160  
  UART_Printf@v_numOfDigitsToTransmit_u8 0041                       UART_Printf@argList 002C  
                       _EEPROM_WriteByte 6A68                             ?_eeprom_Test 0001  
                   UART_Printf@v_num_s16 0036                     UART_Printf@v_num_s32 0032  
                   UART_Printf@v_num_u16 003C                     UART_Printf@v_num_u32 0038  
