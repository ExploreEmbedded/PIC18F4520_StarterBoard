

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Aug 13 19:13:42 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	idataCOMRAM
    53  0068D0                     __pidataCOMRAM:
    54                           	opt stack 0
    55                           
    56                           ;initializer for _ARR_LcdLineNumAddress_U8
    57  0068D0  80                 	db	128
    58  0068D1  C0                 	db	192
    59  0068D2  90                 	db	144
    60  0068D3  D0                 	db	208
    61                           
    62                           	psect	mediumconst
    63  007A9E                     __pmediumconst:
    64                           	opt stack 0
    65  007A9E  00                 	db	0
    66  007A9F                     _A_KeyLookUptable_U8:
    67                           	opt stack 0
    68  007A9F  30                 	db	48
    69  007AA0  31                 	db	49
    70  007AA1  32                 	db	50
    71  007AA2  33                 	db	51
    72  007AA3  34                 	db	52
    73  007AA4  35                 	db	53
    74  007AA5  36                 	db	54
    75  007AA6  37                 	db	55
    76  007AA7  38                 	db	56
    77  007AA8  39                 	db	57
    78  007AA9  41                 	db	65
    79  007AAA  42                 	db	66
    80  007AAB  43                 	db	67
    81  007AAC  44                 	db	68
    82  007AAD  45                 	db	69
    83  007AAE  46                 	db	70
    84  007AAF                     __end_of_A_KeyLookUptable_U8:
    85                           	opt stack 0
    86  0000                     _ADCON0	set	4034
    87  0000                     _ADCON1	set	4033
    88  0000                     _ADCON2	set	4032
    89  0000                     _ADRESH	set	4036
    90  0000                     _ADRESL	set	4035
    91  0000                     _EEADR	set	4009
    92  0000                     _EECON1	set	4006
    93  0000                     _EECON2	set	4007
    94  0000                     _EEDATA	set	4008
    95  0000                     _LATA	set	3977
    96  0000                     _LATB	set	3978
    97  0000                     _LATC	set	3979
    98  0000                     _LATD	set	3980
    99  0000                     _LATE	set	3981
   100  0000                     _PORTA	set	3968
   101  0000                     _PORTB	set	3969
   102  0000                     _PORTC	set	3970
   103  0000                     _PORTD	set	3971
   104  0000                     _PORTE	set	3972
   105  0000                     _RCREG	set	4014
   106  0000                     _RCSTA	set	4011
   107  0000                     _SPBRG	set	4015
   108  0000                     _TRISA	set	3986
   109  0000                     _TRISB	set	3987
   110  0000                     _TRISC	set	3988
   111  0000                     _TRISD	set	3989
   112  0000                     _TRISE	set	3990
   113  0000                     _TXREG	set	4013
   114  0000                     _TXSTA	set	4012
   115  0000                     _ADON	set	32272
   116  0000                     _GIE	set	32663
   117  0000                     _GO	set	32273
   118  0000                     _GO_DONE	set	32273
   119  0000                     _RCIF	set	31989
   120  0000                     _TXIF	set	31988
   121  007AAF                     STR_1:
   122  007AAF  0A                 	db	10
   123  007AB0  0D                 	db	13
   124  007AB1  0A                 	db	10
   125  007AB2  0D                 	db	13
   126  007AB3  53                 	db	83	;'S'
   127  007AB4  74                 	db	116	;'t'
   128  007AB5  61                 	db	97	;'a'
   129  007AB6  72                 	db	114	;'r'
   130  007AB7  74                 	db	116	;'t'
   131  007AB8  65                 	db	101	;'e'
   132  007AB9  72                 	db	114	;'r'
   133  007ABA  20                 	db	32
   134  007ABB  50                 	db	80	;'P'
   135  007ABC  49                 	db	73	;'I'
   136  007ABD  43                 	db	67	;'C'
   137  007ABE  20                 	db	32
   138  007ABF  74                 	db	116	;'t'
   139  007AC0  65                 	db	101	;'e'
   140  007AC1  73                 	db	115	;'s'
   141  007AC2  74                 	db	116	;'t'
   142  007AC3  20                 	db	32
   143  007AC4  4D                 	db	77	;'M'
   144  007AC5  65                 	db	101	;'e'
   145  007AC6  6E                 	db	110	;'n'
   146  007AC7  75                 	db	117	;'u'
   147  007AC8  0A                 	db	10
   148  007AC9  0D                 	db	13
   149  007ACA  20                 	db	32
   150  007ACB  31                 	db	49	;'1'
   151  007ACC  2E                 	db	46
   152  007ACD  4C                 	db	76	;'L'
   153  007ACE  65                 	db	101	;'e'
   154  007ACF  64                 	db	100	;'d'
   155  007AD0  20                 	db	32
   156  007AD1  74                 	db	116	;'t'
   157  007AD2  65                 	db	101	;'e'
   158  007AD3  73                 	db	115	;'s'
   159  007AD4  74                 	db	116	;'t'
   160  007AD5  0A                 	db	10
   161  007AD6  0D                 	db	13
   162  007AD7  20                 	db	32
   163  007AD8  32                 	db	50	;'2'
   164  007AD9  2E                 	db	46
   165  007ADA  4C                 	db	76	;'L'
   166  007ADB  63                 	db	99	;'c'
   167  007ADC  64                 	db	100	;'d'
   168  007ADD  20                 	db	32
   169  007ADE  74                 	db	116	;'t'
   170  007ADF  65                 	db	101	;'e'
   171  007AE0  73                 	db	115	;'s'
   172  007AE1  74                 	db	116	;'t'
   173  007AE2  0A                 	db	10
   174  007AE3  0D                 	db	13
   175  007AE4  20                 	db	32
   176  007AE5  33                 	db	51	;'3'
   177  007AE6  2E                 	db	46
   178  007AE7  53                 	db	83	;'S'
   179  007AE8  77                 	db	119	;'w'
   180  007AE9  69                 	db	105	;'i'
   181  007AEA  74                 	db	116	;'t'
   182  007AEB  63                 	db	99	;'c'
   183  007AEC  68                 	db	104	;'h'
   184  007AED  20                 	db	32
   185  007AEE  74                 	db	116	;'t'
   186  007AEF  65                 	db	101	;'e'
   187  007AF0  73                 	db	115	;'s'
   188  007AF1  74                 	db	116	;'t'
   189  007AF2  0A                 	db	10
   190  007AF3  0D                 	db	13
   191  007AF4  20                 	db	32
   192  007AF5  34                 	db	52	;'4'
   193  007AF6  2E                 	db	46
   194  007AF7  41                 	db	65	;'A'
   195  007AF8  64                 	db	100	;'d'
   196  007AF9  63                 	db	99	;'c'
   197  007AFA  20                 	db	32
   198  007AFB  54                 	db	84	;'T'
   199  007AFC  65                 	db	101	;'e'
   200  007AFD  73                 	db	115	;'s'
   201  007AFE  74                 	db	116	;'t'
   202  007AFF  0A                 	db	10
   203  007B00  0D                 	db	13
   204  007B01  20                 	db	32
   205  007B02  35                 	db	53	;'5'
   206  007B03  2E                 	db	46
   207  007B04  45                 	db	69	;'E'
   208  007B05  65                 	db	101	;'e'
   209  007B06  70                 	db	112	;'p'
   210  007B07  72                 	db	114	;'r'
   211  007B08  6F                 	db	111	;'o'
   212  007B09  6D                 	db	109	;'m'
   213  007B0A  20                 	db	32
   214  007B0B  54                 	db	84	;'T'
   215  007B0C  65                 	db	101	;'e'
   216  007B0D  73                 	db	115	;'s'
   217  007B0E  74                 	db	116	;'t'
   218  007B0F  20                 	db	32
   219  007B10  0A                 	db	10
   220  007B11  0D                 	db	13
   221  007B12  53                 	db	83	;'S'
   222  007B13  65                 	db	101	;'e'
   223  007B14  6C                 	db	108	;'l'
   224  007B15  65                 	db	101	;'e'
   225  007B16  63                 	db	99	;'c'
   226  007B17  74                 	db	116	;'t'
   227  007B18  20                 	db	32
   228  007B19  4F                 	db	79	;'O'
   229  007B1A  6E                 	db	110	;'n'
   230  007B1B  65                 	db	101	;'e'
   231  007B1C  20                 	db	32
   232  007B1D  6F                 	db	111	;'o'
   233  007B1E  66                 	db	102	;'f'
   234  007B1F  20                 	db	32
   235  007B20  74                 	db	116	;'t'
   236  007B21  68                 	db	104	;'h'
   237  007B22  65                 	db	101	;'e'
   238  007B23  20                 	db	32
   239  007B24  61                 	db	97	;'a'
   240  007B25  62                 	db	98	;'b'
   241  007B26  6F                 	db	111	;'o'
   242  007B27  76                 	db	118	;'v'
   243  007B28  65                 	db	101	;'e'
   244  007B29  20                 	db	32
   245  007B2A  6F                 	db	111	;'o'
   246  007B2B  70                 	db	112	;'p'
   247  007B2C  74                 	db	116	;'t'
   248  007B2D  69                 	db	105	;'i'
   249  007B2E  6F                 	db	111	;'o'
   250  007B2F  6E                 	db	110	;'n'
   251  007B30  73                 	db	115	;'s'
   252  007B31  00                 	db	0
   253  007B32                     STR_5:
   254  007B32  0A                 	db	10
   255  007B33  0D                 	db	13
   256  007B34  0A                 	db	10
   257  007B35  0D                 	db	13
   258  007B36  49                 	db	73	;'I'
   259  007B37  6E                 	db	110	;'n'
   260  007B38  62                 	db	98	;'b'
   261  007B39  75                 	db	117	;'u'
   262  007B3A  69                 	db	105	;'i'
   263  007B3B  6C                 	db	108	;'l'
   264  007B3C  74                 	db	116	;'t'
   265  007B3D  20                 	db	32
   266  007B3E  45                 	db	69	;'E'
   267  007B3F  65                 	db	101	;'e'
   268  007B40  70                 	db	112	;'p'
   269  007B41  72                 	db	114	;'r'
   270  007B42  6F                 	db	111	;'o'
   271  007B43  6D                 	db	109	;'m'
   272  007B44  20                 	db	32
   273  007B45  54                 	db	84	;'T'
   274  007B46  65                 	db	101	;'e'
   275  007B47  73                 	db	115	;'s'
   276  007B48  74                 	db	116	;'t'
   277  007B49  2E                 	db	46
   278  007B4A  20                 	db	32
   279  007B4B  57                 	db	87	;'W'
   280  007B4C  72                 	db	114	;'r'
   281  007B4D  69                 	db	105	;'i'
   282  007B4E  74                 	db	116	;'t'
   283  007B4F  69                 	db	105	;'i'
   284  007B50  6E                 	db	110	;'n'
   285  007B51  67                 	db	103	;'g'
   286  007B52  20                 	db	32
   287  007B53  61                 	db	97	;'a'
   288  007B54  6E                 	db	110	;'n'
   289  007B55  64                 	db	100	;'d'
   290  007B56  20                 	db	32
   291  007B57  72                 	db	114	;'r'
   292  007B58  65                 	db	101	;'e'
   293  007B59  61                 	db	97	;'a'
   294  007B5A  64                 	db	100	;'d'
   295  007B5B  69                 	db	105	;'i'
   296  007B5C  6E                 	db	110	;'n'
   297  007B5D  67                 	db	103	;'g'
   298  007B5E  20                 	db	32
   299  007B5F  41                 	db	65	;'A'
   300  007B60  2D                 	db	45
   301  007B61  5A                 	db	90	;'Z'
   302  007B62  20                 	db	32
   303  007B63  74                 	db	116	;'t'
   304  007B64  6F                 	db	111	;'o'
   305  007B65  20                 	db	32
   306  007B66  61                 	db	97	;'a'
   307  007B67  6E                 	db	110	;'n'
   308  007B68  64                 	db	100	;'d'
   309  007B69  20                 	db	32
   310  007B6A  66                 	db	102	;'f'
   311  007B6B  72                 	db	114	;'r'
   312  007B6C  6F                 	db	111	;'o'
   313  007B6D  6D                 	db	109	;'m'
   314  007B6E  20                 	db	32
   315  007B6F  45                 	db	69	;'E'
   316  007B70  65                 	db	101	;'e'
   317  007B71  70                 	db	112	;'p'
   318  007B72  72                 	db	114	;'r'
   319  007B73  6F                 	db	111	;'o'
   320  007B74  6D                 	db	109	;'m'
   321  007B75  2E                 	db	46
   322  007B76  00                 	db	0
   323  007B77                     STR_3:
   324  007B77  0A                 	db	10
   325  007B78  0A                 	db	10
   326  007B79  0A                 	db	10
   327  007B7A  0D                 	db	13
   328  007B7B  50                 	db	80	;'P'
   329  007B7C  72                 	db	114	;'r'
   330  007B7D  65                 	db	101	;'e'
   331  007B7E  73                 	db	115	;'s'
   332  007B7F  73                 	db	115	;'s'
   333  007B80  20                 	db	32
   334  007B81  74                 	db	116	;'t'
   335  007B82  68                 	db	104	;'h'
   336  007B83  65                 	db	101	;'e'
   337  007B84  20                 	db	32
   338  007B85  73                 	db	115	;'s'
   339  007B86  77                 	db	119	;'w'
   340  007B87  69                 	db	105	;'i'
   341  007B88  74                 	db	116	;'t'
   342  007B89  63                 	db	99	;'c'
   343  007B8A  68                 	db	104	;'h'
   344  007B8B  65                 	db	101	;'e'
   345  007B8C  73                 	db	115	;'s'
   346  007B8D  20                 	db	32
   347  007B8E  61                 	db	97	;'a'
   348  007B8F  6E                 	db	110	;'n'
   349  007B90  64                 	db	100	;'d'
   350  007B91  20                 	db	32
   351  007B92  6F                 	db	111	;'o'
   352  007B93  62                 	db	98	;'b'
   353  007B94  73                 	db	115	;'s'
   354  007B95  65                 	db	101	;'e'
   355  007B96  72                 	db	114	;'r'
   356  007B97  76                 	db	118	;'v'
   357  007B98  65                 	db	101	;'e'
   358  007B99  20                 	db	32
   359  007B9A  74                 	db	116	;'t'
   360  007B9B  68                 	db	104	;'h'
   361  007B9C  65                 	db	101	;'e'
   362  007B9D  20                 	db	32
   363  007B9E  6F                 	db	111	;'o'
   364  007B9F  75                 	db	117	;'u'
   365  007BA0  74                 	db	116	;'t'
   366  007BA1  70                 	db	112	;'p'
   367  007BA2  75                 	db	117	;'u'
   368  007BA3  74                 	db	116	;'t'
   369  007BA4  20                 	db	32
   370  007BA5  6F                 	db	111	;'o'
   371  007BA6  6E                 	db	110	;'n'
   372  007BA7  20                 	db	32
   373  007BA8  4C                 	db	76	;'L'
   374  007BA9  65                 	db	101	;'e'
   375  007BAA  64                 	db	100	;'d'
   376  007BAB  73                 	db	115	;'s'
   377  007BAC  00                 	db	0
   378  007BAD                     STR_2:
   379  007BAD  45                 	db	69	;'E'
   380  007BAE  78                 	db	120	;'x'
   381  007BAF  70                 	db	112	;'p'
   382  007BB0  6C                 	db	108	;'l'
   383  007BB1  6F                 	db	111	;'o'
   384  007BB2  72                 	db	114	;'r'
   385  007BB3  65                 	db	101	;'e'
   386  007BB4  0A                 	db	10
   387  007BB5  20                 	db	32
   388  007BB6  53                 	db	83	;'S'
   389  007BB7  74                 	db	116	;'t'
   390  007BB8  61                 	db	97	;'a'
   391  007BB9  72                 	db	114	;'r'
   392  007BBA  74                 	db	116	;'t'
   393  007BBB  65                 	db	101	;'e'
   394  007BBC  72                 	db	114	;'r'
   395  007BBD  20                 	db	32
   396  007BBE  50                 	db	80	;'P'
   397  007BBF  69                 	db	105	;'i'
   398  007BC0  63                 	db	99	;'c'
   399  007BC1  2E                 	db	46
   400  007BC2  2E                 	db	46
   401  007BC3  2E                 	db	46
   402  007BC4  00                 	db	0
   403  007BC5                     STR_6:
   404  007BC5  0A                 	db	10
   405  007BC6  0D                 	db	13
   406  007BC7  45                 	db	69	;'E'
   407  007BC8  65                 	db	101	;'e'
   408  007BC9  70                 	db	112	;'p'
   409  007BCA  72                 	db	114	;'r'
   410  007BCB  6F                 	db	111	;'o'
   411  007BCC  6D                 	db	109	;'m'
   412  007BCD  20                 	db	32
   413  007BCE  57                 	db	87	;'W'
   414  007BCF  72                 	db	114	;'r'
   415  007BD0  69                 	db	105	;'i'
   416  007BD1  74                 	db	116	;'t'
   417  007BD2  65                 	db	101	;'e'
   418  007BD3  3A                 	db	58	;':'
   419  007BD4  20                 	db	32
   420  007BD5  25                 	db	37
   421  007BD6  63                 	db	99	;'c'
   422  007BD7  20                 	db	32
   423  007BD8  20                 	db	32
   424  007BD9  20                 	db	32
   425  007BDA  20                 	db	32
   426  007BDB  00                 	db	0
   427  007BDC                     STR_4:
   428  007BDC  0A                 	db	10
   429  007BDD  0D                 	db	13
   430  007BDE  41                 	db	65	;'A'
   431  007BDF  44                 	db	68	;'D'
   432  007BE0  43                 	db	67	;'C'
   433  007BE1  30                 	db	48	;'0'
   434  007BE2  20                 	db	32
   435  007BE3  76                 	db	118	;'v'
   436  007BE4  61                 	db	97	;'a'
   437  007BE5  6C                 	db	108	;'l'
   438  007BE6  75                 	db	117	;'u'
   439  007BE7  65                 	db	101	;'e'
   440  007BE8  3D                 	db	61	;'='
   441  007BE9  20                 	db	32
   442  007BEA  25                 	db	37
   443  007BEB  34                 	db	52	;'4'
   444  007BEC  64                 	db	100	;'d'
   445  007BED  00                 	db	0
   446  007BEE                     STR_7:
   447  007BEE  45                 	db	69	;'E'
   448  007BEF  65                 	db	101	;'e'
   449  007BF0  70                 	db	112	;'p'
   450  007BF1  72                 	db	114	;'r'
   451  007BF2  6F                 	db	111	;'o'
   452  007BF3  6D                 	db	109	;'m'
   453  007BF4  20                 	db	32
   454  007BF5  52                 	db	82	;'R'
   455  007BF6  65                 	db	101	;'e'
   456  007BF7  61                 	db	97	;'a'
   457  007BF8  64                 	db	100	;'d'
   458  007BF9  3A                 	db	58	;':'
   459  007BFA  20                 	db	32
   460  007BFB  25                 	db	37
   461  007BFC  63                 	db	99	;'c'
   462  007BFD  00                 	db	0
   463                           
   464                           ; #config settings
   465  007BFE  00                 	db	0	; dummy byte at the end
   466  0000                     
   467                           	psect	cinit
   468  006B8A                     __pcinit:
   469                           	opt stack 0
   470  006B8A                     start_initialization:
   471                           	opt stack 0
   472  006B8A                     __initialization:
   473                           	opt stack 0
   474                           
   475                           ; Clear objects allocated to COMRAM (24 bytes)
   476  006B8A  EE00  F04C         	lfsr	0,__pbssCOMRAM
   477  006B8E  0E18               	movlw	24
   478  006B90                     clear_0:
   479  006B90  6AEE               	clrf	postinc0,c
   480  006B92  06E8               	decf	wreg,f,c
   481  006B94  E1FD               	bnz	clear_0
   482                           
   483                           ; Initialize objects allocated to COMRAM (4 bytes)
   484                           ; load TBLPTR registers with __pidataCOMRAM
   485  006B96  0ED0               	movlw	low __pidataCOMRAM
   486  006B98  6EF6               	movwf	tblptrl,c
   487  006B9A  0E68               	movlw	high __pidataCOMRAM
   488  006B9C  6EF7               	movwf	tblptrh,c
   489  006B9E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   490  006BA0  6EF8               	movwf	tblptru,c
   491  006BA2  EE00  F064         	lfsr	0,__pdataCOMRAM
   492  006BA6  EE10 F004          	lfsr	1,4
   493  006BAA                     copy_data0:
   494  006BAA  0009               	tblrd		*+
   495  006BAC  CFF5 FFEE          	movff	tablat,postinc0
   496  006BB0  50E5               	movf	postdec1,w,c
   497  006BB2  50E1               	movf	fsr1l,w,c
   498  006BB4  E1FA               	bnz	copy_data0
   499  006BB6                     end_of_initialization:
   500                           	opt stack 0
   501  006BB6                     __end_of__initialization:
   502                           	opt stack 0
   503  006BB6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   504  006BB8  6EF8               	movwf	tblptru,c
   505  006BBA  0100               	movlb	0
   506  006BBC  EFF6  F038         	goto	_main	;jump to C main() function
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           postdec1	equ	0xFE5
   514                           fsr1l	equ	0xFE1
   515                           
   516                           	psect	bssCOMRAM
   517  00004C                     __pbssCOMRAM:
   518                           	opt stack 0
   519  00004C                     _LCDConfig:
   520                           	opt stack 0
   521  00004C                     	ds	14
   522  00005A                     _A_ColsPins_U8:
   523                           	opt stack 0
   524  00005A                     	ds	4
   525  00005E                     _A_RowsPins_U8:
   526                           	opt stack 0
   527  00005E                     	ds	4
   528  000062                     _v_LcdTrackCursorPos_U8:
   529                           	opt stack 0
   530  000062                     	ds	1
   531  000063                     _v_LcdTrackLineNum_U8:
   532                           	opt stack 0
   533  000063                     	ds	1
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1l	equ	0xFE1
   542                           
   543                           	psect	dataCOMRAM
   544  000064                     __pdataCOMRAM:
   545                           	opt stack 0
   546  000064                     _ARR_LcdLineNumAddress_U8:
   547                           	opt stack 0
   548  000064                     	ds	4
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           postdec1	equ	0xFE5
   556                           fsr1l	equ	0xFE1
   557                           
   558                           	psect	cstackCOMRAM
   559  000001                     __pcstackCOMRAM:
   560                           	opt stack 0
   561  000001                     ??_GPIO_PinRead:
   562  000001                     ?___lldiv:
   563                           	opt stack 0
   564  000001                     GPIO_PinDirection@var_pinDirn_u8:
   565                           	opt stack 0
   566  000001                     UART_TxChar@v_uartData_u8:
   567                           	opt stack 0
   568  000001                     DELAY_us@us_count:
   569                           	opt stack 0
   570  000001                     EEPROM_WriteByte@v_eepromAddress_u16:
   571                           	opt stack 0
   572  000001                     EEPROM_ReadByte@v_eepromAddress_u16:
   573                           	opt stack 0
   574  000001                     ___lldiv@dividend:
   575                           	opt stack 0
   576                           
   577                           ; 4 bytes @ 0x0
   578  000001                     	ds	1
   579  000002                     ??_GPIO_PinDirection:
   580  000002                     UART_TxString@ptr_string:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x1
   584  000002                     	ds	1
   585  000003                     ?_ADC_GetAdcValue:
   586                           	opt stack 0
   587  000003                     EEPROM_WriteByte@v_eepromData_u8:
   588                           	opt stack 0
   589  000003                     GPIO_PinRead@var_portNumber_u8:
   590                           	opt stack 0
   591  000003                     DELAY_ms@ms_count:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x2
   595  000003                     	ds	1
   596  000004                     EEPROM_WriteByte@gie_value:
   597                           	opt stack 0
   598  000004                     GPIO_PinDirection@var_portNumber_u8:
   599                           	opt stack 0
   600  000004                     GPIO_PinRead@returnStatus:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x3
   604  000004                     	ds	1
   605  000005                     ??_ADC_GetAdcValue:
   606  000005                     GPIO_PinDirection@enm_pinNumber:
   607                           	opt stack 0
   608  000005                     GPIO_PinRead@enm_pinNumber:
   609                           	opt stack 0
   610  000005                     led_Test@i:
   611                           	opt stack 0
   612  000005                     ___lldiv@divisor:
   613                           	opt stack 0
   614                           
   615                           ; 4 bytes @ 0x4
   616  000005                     	ds	1
   617  000006                     GPIO_PinWrite@var_pinValue_u8:
   618                           	opt stack 0
   619  000006                     LCD_SetUp@RW:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x5
   623  000006                     	ds	1
   624  000007                     ??_GPIO_PinWrite:
   625  000007                     ADC_GetAdcValue@var_adcChannel_u8:
   626                           	opt stack 0
   627  000007                     LCD_SetUp@EN:
   628                           	opt stack 0
   629  000007                     led_Test@pattern:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x6
   633  000007                     	ds	1
   634  000008                     LCD_SetUp@D0:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x7
   638  000008                     	ds	1
   639  000009                     GPIO_PinWrite@var_portNumber_u8:
   640                           	opt stack 0
   641  000009                     LCD_SetUp@D1:
   642                           	opt stack 0
   643  000009                     ___lldiv@quotient:
   644                           	opt stack 0
   645                           
   646                           ; 4 bytes @ 0x8
   647  000009                     	ds	1
   648  00000A                     GPIO_PinWrite@enm_pinNumber:
   649                           	opt stack 0
   650  00000A                     LCD_SetUp@D2:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x9
   654  00000A                     	ds	1
   655  00000B                     LCD_SetUp@D3:
   656                           	opt stack 0
   657  00000B                     lcd_BusyCheck@busyflag:
   658                           	opt stack 0
   659  00000B                     lcd_SendHigherNibble@dataByte:
   660                           	opt stack 0
   661  00000B                     lcd_SendLowerNibble@dataByte:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0xA
   665  00000B                     	ds	1
   666  00000C                     LCD_SetUp@D4:
   667                           	opt stack 0
   668  00000C                     LCD_CmdWrite@v_lcdCmd_u8:
   669                           	opt stack 0
   670  00000C                     lcd_DataWrite@dataByte:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0xB
   674  00000C                     	ds	1
   675  00000D                     LCD_SetUp@D5:
   676                           	opt stack 0
   677  00000D                     LCD_GoToLine@v_lineNumber_u8:
   678                           	opt stack 0
   679  00000D                     LCD_DisplayChar@v_lcdData_u8:
   680                           	opt stack 0
   681  00000D                     ___lldiv@counter:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0xC
   685  00000D                     	ds	1
   686  00000E                     LCD_SetUp@D6:
   687                           	opt stack 0
   688  00000E                     LCD_Init@v_MaxCharsPerLine_u8:
   689                           	opt stack 0
   690  00000E                     LCD_DisplayString@ptr_stringPointer_u8:
   691                           	opt stack 0
   692  00000E                     UART_SetBaudRate@v_baudRate_u32:
   693                           	opt stack 0
   694  00000E                     UART_TxNumber@v_number_u32:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0xD
   698  00000E                     	ds	1
   699  00000F                     LCD_SetUp@D7:
   700                           	opt stack 0
   701  00000F                     LCD_Init@v_lcdNoOfLines_u8:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0xE
   705  00000F                     	ds	1
   706  000010                     LCD_SetUp@RS:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0xF
   710  000010                     	ds	1
   711  000011                     
   712                           ; 1 bytes @ 0x10
   713  000011                     	ds	1
   714  000012                     ??_UART_SetBaudRate:
   715  000012                     UART_TxNumber@v_numOfDigitsToTransmit_u8:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x11
   719  000012                     	ds	1
   720  000013                     ??_UART_TxNumber:
   721                           
   722                           ; 1 bytes @ 0x12
   723  000013                     	ds	3
   724  000016                     UART_SetBaudRate@RegValue:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x15
   728  000016                     	ds	1
   729  000017                     UART_Init@v_baudRate_u32:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x16
   733  000017                     	ds	4
   734  00001B                     
   735                           ; 1 bytes @ 0x1A
   736  00001B                     	ds	3
   737  00001E                     UART_TxNumber@a:
   738                           	opt stack 0
   739                           
   740                           ; 10 bytes @ 0x1D
   741  00001E                     	ds	10
   742  000028                     _UART_TxNumber$586:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x27
   746  000028                     	ds	2
   747  00002A                     UART_TxNumber@v_numericSystem_u8:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x29
   751  00002A                     	ds	1
   752  00002B                     UART_TxNumber@i:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x2A
   756  00002B                     	ds	1
   757  00002C                     ?_UART_Printf:
   758                           	opt stack 0
   759  00002C                     UART_Printf@argList:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x2B
   763  00002C                     	ds	4
   764  000030                     UART_Printf@str:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x2F
   768  000030                     	ds	2
   769  000032                     UART_Printf@v_num_s32:
   770                           	opt stack 0
   771                           
   772                           ; 4 bytes @ 0x31
   773  000032                     	ds	4
   774  000036                     UART_Printf@v_num_s16:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x35
   778  000036                     	ds	2
   779  000038                     UART_Printf@v_num_u32:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x37
   783  000038                     	ds	4
   784  00003C                     UART_Printf@v_num_u16:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x3B
   788  00003C                     	ds	2
   789  00003E                     UART_Printf@ptr:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x3D
   793  00003E                     	ds	2
   794  000040                     UART_Printf@ch:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x3F
   798  000040                     	ds	1
   799  000041                     UART_Printf@v_numOfDigitsToTransmit_u8:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x40
   803  000041                     	ds	1
   804  000042                     UART_Printf@argp:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x41
   808  000042                     	ds	2
   809  000044                     ??_eeprom_Test:
   810                           
   811                           ; 1 bytes @ 0x43
   812  000044                     	ds	1
   813  000045                     eeprom_Test@read_char:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x44
   817  000045                     	ds	2
   818  000047                     eeprom_Test@eeprom_address:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x46
   822  000047                     	ds	2
   823  000049                     eeprom_Test@write_char:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x48
   827  000049                     	ds	2
   828  00004B                     main@option:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x4A
   832  00004B                     	ds	1
   833                           tblptru	equ	0xFF8
   834                           tblptrh	equ	0xFF7
   835                           tblptrl	equ	0xFF6
   836                           tablat	equ	0xFF5
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           postdec1	equ	0xFE5
   840                           fsr1l	equ	0xFE1
   841                           
   842 ;;
   843 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   844 ;;
   845 ;; *************** function _main *****************
   846 ;; Defined at:
   847 ;;		line 57 in file "main.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  option          1   74[COMRAM] unsigned char 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  2   62[None  ] int 
   854 ;; Registers used:
   855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   861 ;;      Params:         0       0       0       0       0       0       0
   862 ;;      Locals:         1       0       0       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0       0       0
   864 ;;      Totals:         1       0       0       0       0       0       0
   865 ;;Total ram usage:        1 bytes
   866 ;; Hardware stack levels required when called:    8
   867 ;; This function calls:
   868 ;;		_DELAY_ms
   869 ;;		_GPIO_PinDirection
   870 ;;		_GPIO_PinRead
   871 ;;		_GPIO_PinWrite
   872 ;;		_UART_Init
   873 ;;		_UART_Printf
   874 ;;		_UART_RxChar
   875 ;;		_adc_Test
   876 ;;		_eeprom_Test
   877 ;;		_lcd_Test
   878 ;;		_led_Test
   879 ;;		_switch_Test
   880 ;; This function is called by:
   881 ;;		Startup code after reset
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text0
   886  0071EC                     __ptext0:
   887                           	opt stack 0
   888  0071EC                     _main:
   889                           	opt stack 23
   890                           
   891                           ;main.c: 60: char option;
   892                           ;main.c: 62: GPIO_PinDirection(PD_2,0x01u);
   893                           
   894                           ;incstack = 0
   895  0071EC  0E01               	movlw	1
   896  0071EE  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   897  0071F0  0E1A               	movlw	26
   898  0071F2  EC6B  F039         	call	_GPIO_PinDirection
   899                           
   900                           ;main.c: 63: GPIO_PinDirection(PD_3,0x01u);
   901  0071F6  0E01               	movlw	1
   902  0071F8  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   903  0071FA  0E1B               	movlw	27
   904  0071FC  EC6B  F039         	call	_GPIO_PinDirection
   905                           
   906                           ;main.c: 65: if((GPIO_PinRead(PD_2)==1) && (GPIO_PinRead(PD_3)==1))
   907  007200  0E1A               	movlw	26
   908  007202  EC8D  F038         	call	_GPIO_PinRead
   909  007206  06E8               	decf	wreg,f,c
   910  007208  A4D8               	btfss	status,2,c
   911  00720A  D031               	goto	l2792
   912  00720C  0E1B               	movlw	27
   913  00720E  EC8D  F038         	call	_GPIO_PinRead
   914  007212  06E8               	decf	wreg,f,c
   915  007214  A4D8               	btfss	status,2,c
   916  007216  D02B               	goto	l2792
   917                           
   918                           ;main.c: 66: {
   919                           ;main.c: 68: GPIO_PinDirection(PD_0,0x00u);
   920  007218  0E00               	movlw	0
   921  00721A  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   922  00721C  0E18               	movlw	24
   923  00721E  EC6B  F039         	call	_GPIO_PinDirection
   924                           
   925                           ;main.c: 69: GPIO_PinDirection(PD_1,0x00u);
   926  007222  0E00               	movlw	0
   927  007224  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
   928  007226  0E19               	movlw	25
   929  007228  EC6B  F039         	call	_GPIO_PinDirection
   930  00722C                     l64:
   931                           
   932                           ;main.c: 72: {
   933                           ;main.c: 73: GPIO_PinWrite(PD_0,1);
   934  00722C  0E01               	movlw	1
   935  00722E  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
   936  007230  0E18               	movlw	24
   937  007232  EC1B  F03A         	call	_GPIO_PinWrite
   938                           
   939                           ;main.c: 74: GPIO_PinWrite(PD_1,1);
   940  007236  0E01               	movlw	1
   941  007238  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
   942  00723A  0E19               	movlw	25
   943  00723C  EC1B  F03A         	call	_GPIO_PinWrite
   944                           
   945                           ;main.c: 75: DELAY_ms(200);
   946  007240  0E00               	movlw	0
   947  007242  6E04               	movwf	DELAY_ms@ms_count+1,c
   948  007244  0EC8               	movlw	200
   949  007246  6E03               	movwf	DELAY_ms@ms_count,c
   950  007248  EC95  F034         	call	_DELAY_ms	;wreg free
   951                           
   952                           ;main.c: 77: GPIO_PinWrite(PD_0,0);
   953  00724C  0E00               	movlw	0
   954  00724E  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
   955  007250  0E18               	movlw	24
   956  007252  EC1B  F03A         	call	_GPIO_PinWrite
   957                           
   958                           ;main.c: 78: GPIO_PinWrite(PD_1,0);
   959  007256  0E00               	movlw	0
   960  007258  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
   961  00725A  0E19               	movlw	25
   962  00725C  EC1B  F03A         	call	_GPIO_PinWrite
   963                           
   964                           ;main.c: 79: DELAY_ms(200);
   965  007260  0E00               	movlw	0
   966  007262  6E04               	movwf	DELAY_ms@ms_count+1,c
   967  007264  0EC8               	movlw	200
   968  007266  6E03               	movwf	DELAY_ms@ms_count,c
   969  007268  EC95  F034         	call	_DELAY_ms	;wreg free
   970  00726C  D7DF               	goto	l64
   971  00726E                     l2792:
   972                           
   973                           ;main.c: 80: }
   974                           ;main.c: 81: }
   975                           ;main.c: 84: UART_Init(9600);
   976  00726E  0E80               	movlw	128
   977  007270  6E17               	movwf	UART_Init@v_baudRate_u32,c
   978  007272  0E25               	movlw	37
   979  007274  6E18               	movwf	UART_Init@v_baudRate_u32+1,c
   980  007276  0E00               	movlw	0
   981  007278  6E19               	movwf	UART_Init@v_baudRate_u32+2,c
   982  00727A  0E00               	movlw	0
   983  00727C  6E1A               	movwf	UART_Init@v_baudRate_u32+3,c
   984  00727E  ECB4  F034         	call	_UART_Init	;wreg free
   985                           
   986                           ;main.c: 85: UART_Printf("\n\r\n\rStarter PIC test Menu\n\r 1.Led test\n\r 2.Lcd test\n\
      +                          r 3.Switch test\n\r 4.Adc Test\n\r 5.Eeprom Test \n\rSelect One of the above options");
   987  007282  0EAF               	movlw	low STR_1
   988  007284  6E2C               	movwf	UART_Printf@argList,c
   989  007286  0E7A               	movlw	high STR_1
   990  007288  6E2D               	movwf	UART_Printf@argList+1,c
   991  00728A  ECB3  F03B         	call	_UART_Printf	;wreg free
   992  00728E                     l2796:
   993                           
   994                           ;main.c: 88: {
   995                           ;main.c: 89: option = UART_RxChar();
   996  00728E  EC6A  F034         	call	_UART_RxChar	;wreg free
   997  007292  6E4B               	movwf	main@option,c
   998                           
   999                           ;main.c: 90: switch(option)
  1000  007294  D00F               	goto	l2810
  1001  007296                     l2798:
  1002                           
  1003                           ;main.c: 93: led_Test();
  1004  007296  EC8B  F037         	call	_led_Test	;wreg free
  1005                           
  1006                           ;main.c: 94: break;
  1007  00729A  D7F9               	goto	l2796
  1008  00729C                     l2800:
  1009                           
  1010                           ;main.c: 97: lcd_Test();
  1011  00729C  ECE0  F035         	call	_lcd_Test	;wreg free
  1012                           
  1013                           ;main.c: 98: break;
  1014  0072A0  D7F6               	goto	l2796
  1015  0072A2                     l2802:
  1016                           
  1017                           ;main.c: 101: switch_Test();
  1018  0072A2  EC4F  F036         	call	_switch_Test	;wreg free
  1019                           
  1020                           ;main.c: 102: break;
  1021  0072A6  D7F3               	goto	l2796
  1022  0072A8                     l2804:
  1023                           
  1024                           ;main.c: 105: adc_Test();
  1025  0072A8  ECA4  F034         	call	_adc_Test	;wreg free
  1026                           
  1027                           ;main.c: 106: break;
  1028  0072AC  D7F0               	goto	l2796
  1029  0072AE                     l2806:
  1030                           
  1031                           ;main.c: 109: eeprom_Test();
  1032  0072AE  EC0D  F037         	call	_eeprom_Test	;wreg free
  1033                           
  1034                           ;main.c: 114: }
  1035                           
  1036                           ;main.c: 113: break;
  1037                           
  1038                           ;main.c: 112: default:
  1039                           
  1040                           ;main.c: 110: break;
  1041  0072B2  D7ED               	goto	l2796
  1042  0072B4                     l2810:
  1043  0072B4  504B               	movf	main@option,w,c
  1044                           
  1045                           ; Switch size 1, requested type "space"
  1046                           ; Number of cases is 5, Range of values is 49 to 53
  1047                           ; switch strategies available:
  1048                           ; Name         Instructions Cycles
  1049                           ; simple_byte           16     9 (average)
  1050                           ;	Chosen strategy is simple_byte
  1051  0072B6  0A31               	xorlw	49	; case 49
  1052  0072B8  B4D8               	btfsc	status,2,c
  1053  0072BA  D7ED               	goto	l2798
  1054  0072BC  0A03               	xorlw	3	; case 50
  1055  0072BE  B4D8               	btfsc	status,2,c
  1056  0072C0  D7ED               	goto	l2800
  1057  0072C2  0A01               	xorlw	1	; case 51
  1058  0072C4  B4D8               	btfsc	status,2,c
  1059  0072C6  D7ED               	goto	l2802
  1060  0072C8  0A07               	xorlw	7	; case 52
  1061  0072CA  B4D8               	btfsc	status,2,c
  1062  0072CC  D7ED               	goto	l2804
  1063  0072CE  0A01               	xorlw	1	; case 53
  1064  0072D0  B4D8               	btfsc	status,2,c
  1065  0072D2  D7ED               	goto	l2806
  1066  0072D4  D7DC               	goto	l2796
  1067  0072D6                     __end_of_main:
  1068                           	opt stack 0
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           postinc0	equ	0xFEE
  1074                           wreg	equ	0xFE8
  1075                           postdec1	equ	0xFE5
  1076                           fsr1l	equ	0xFE1
  1077                           status	equ	0xFD8
  1078                           
  1079 ;; *************** function _switch_Test *****************
  1080 ;; Defined at:
  1081 ;;		line 176 in file "main.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1095 ;;      Params:         0       0       0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0       0       0
  1098 ;;      Totals:         0       0       0       0       0       0       0
  1099 ;;Total ram usage:        0 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    2
  1102 ;; This function calls:
  1103 ;;		_GPIO_PinDirection
  1104 ;;		_GPIO_PinRead
  1105 ;;		_GPIO_PinWrite
  1106 ;;		_UART_TxString
  1107 ;; This function is called by:
  1108 ;;		_main
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           	psect	text1
  1113  006C9E                     __ptext1:
  1114                           	opt stack 0
  1115  006C9E                     _switch_Test:
  1116                           	opt stack 28
  1117                           
  1118                           ;main.c: 178: GPIO_PinDirection(PD_0,0x00u);
  1119                           
  1120                           ;incstack = 0
  1121  006C9E  0E00               	movlw	0
  1122  006CA0  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1123  006CA2  0E18               	movlw	24
  1124  006CA4  EC6B  F039         	call	_GPIO_PinDirection
  1125                           
  1126                           ;main.c: 179: GPIO_PinDirection(PD_1,0x00u);
  1127  006CA8  0E00               	movlw	0
  1128  006CAA  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1129  006CAC  0E19               	movlw	25
  1130  006CAE  EC6B  F039         	call	_GPIO_PinDirection
  1131                           
  1132                           ;main.c: 180: GPIO_PinDirection(PD_2,0x01u);
  1133  006CB2  0E01               	movlw	1
  1134  006CB4  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1135  006CB6  0E1A               	movlw	26
  1136  006CB8  EC6B  F039         	call	_GPIO_PinDirection
  1137                           
  1138                           ;main.c: 181: GPIO_PinDirection(PD_3,0x01u);
  1139  006CBC  0E01               	movlw	1
  1140  006CBE  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1141  006CC0  0E1B               	movlw	27
  1142  006CC2  EC6B  F039         	call	_GPIO_PinDirection
  1143                           
  1144                           ;main.c: 182: UART_TxString("\n\n\n\rPress the switches and observe the output on Leds")
      +                          ;
  1145  006CC6  0E77               	movlw	low STR_3
  1146  006CC8  6E02               	movwf	UART_TxString@ptr_string,c
  1147  006CCA  0E7B               	movlw	high STR_3
  1148  006CCC  6E03               	movwf	UART_TxString@ptr_string+1,c
  1149  006CCE  ECD8  F034         	call	_UART_TxString	;wreg free
  1150  006CD2                     l2674:
  1151                           
  1152                           ;main.c: 185: {
  1153                           ;main.c: 186: GPIO_PinWrite(PD_0,GPIO_PinRead(PD_2));
  1154  006CD2  0E1A               	movlw	26
  1155  006CD4  EC8D  F038         	call	_GPIO_PinRead
  1156  006CD8  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  1157  006CDA  0E18               	movlw	24
  1158  006CDC  EC1B  F03A         	call	_GPIO_PinWrite
  1159                           
  1160                           ;main.c: 187: GPIO_PinWrite(PD_1,GPIO_PinRead(PD_3));
  1161  006CE0  0E1B               	movlw	27
  1162  006CE2  EC8D  F038         	call	_GPIO_PinRead
  1163  006CE6  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  1164  006CE8  0E19               	movlw	25
  1165  006CEA  EC1B  F03A         	call	_GPIO_PinWrite
  1166  006CEE  D7F1               	goto	l2674
  1167  006CF0                     __end_of_switch_Test:
  1168                           	opt stack 0
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           postinc0	equ	0xFEE
  1174                           wreg	equ	0xFE8
  1175                           postdec1	equ	0xFE5
  1176                           fsr1l	equ	0xFE1
  1177                           status	equ	0xFD8
  1178                           
  1179 ;; *************** function _led_Test *****************
  1180 ;; Defined at:
  1181 ;;		line 120 in file "main.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;		None
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;  pattern         2    6[COMRAM] int 
  1186 ;;  i               2    4[COMRAM] int 
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      void 
  1189 ;; Registers used:
  1190 ;;		wreg, status,2, status,0, cstack
  1191 ;; Tracked objects:
  1192 ;;		On entry : 0/0
  1193 ;;		On exit  : 0/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1196 ;;      Params:         0       0       0       0       0       0       0
  1197 ;;      Locals:         4       0       0       0       0       0       0
  1198 ;;      Temps:          0       0       0       0       0       0       0
  1199 ;;      Totals:         4       0       0       0       0       0       0
  1200 ;;Total ram usage:        4 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; Hardware stack levels required when called:    2
  1203 ;; This function calls:
  1204 ;;		_DELAY_ms
  1205 ;; This function is called by:
  1206 ;;		_main
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text2
  1211  006F16                     __ptext2:
  1212                           	opt stack 0
  1213  006F16                     _led_Test:
  1214                           	opt stack 28
  1215                           
  1216                           ;main.c: 122: int i,pattern;
  1217                           ;main.c: 123: TRISA = 0x00u;
  1218                           
  1219                           ;incstack = 0
  1220  006F16  0E00               	movlw	0
  1221  006F18  6E92               	movwf	3986,c	;volatile
  1222                           
  1223                           ;main.c: 124: TRISB = 0x00u;
  1224  006F1A  0E00               	movlw	0
  1225  006F1C  6E93               	movwf	3987,c	;volatile
  1226                           
  1227                           ;main.c: 125: TRISC = 0x00u;
  1228  006F1E  0E00               	movlw	0
  1229  006F20  6E94               	movwf	3988,c	;volatile
  1230                           
  1231                           ;main.c: 126: TRISD = 0x00u;
  1232  006F22  0E00               	movlw	0
  1233  006F24  6E95               	movwf	3989,c	;volatile
  1234                           
  1235                           ;main.c: 127: TRISE = 0x00u;
  1236  006F26  0E00               	movlw	0
  1237  006F28  6E96               	movwf	3990,c	;volatile
  1238  006F2A                     l2628:
  1239                           
  1240                           ;main.c: 130: {
  1241                           ;main.c: 132: PORTA = 0xff;
  1242  006F2A  6880               	setf	3968,c	;volatile
  1243                           
  1244                           ;main.c: 133: PORTB = 0xff;
  1245  006F2C  6881               	setf	3969,c	;volatile
  1246                           
  1247                           ;main.c: 134: PORTC = 0xff;
  1248  006F2E  6882               	setf	3970,c	;volatile
  1249                           
  1250                           ;main.c: 135: PORTD = 0xff;
  1251  006F30  6883               	setf	3971,c	;volatile
  1252                           
  1253                           ;main.c: 136: PORTE = 0xff;
  1254  006F32  6884               	setf	3972,c	;volatile
  1255                           
  1256                           ;main.c: 137: DELAY_ms(500);
  1257  006F34  0E01               	movlw	1
  1258  006F36  6E04               	movwf	DELAY_ms@ms_count+1,c
  1259  006F38  0EF4               	movlw	244
  1260  006F3A  6E03               	movwf	DELAY_ms@ms_count,c
  1261  006F3C  EC95  F034         	call	_DELAY_ms	;wreg free
  1262                           
  1263                           ;main.c: 139: PORTA = 0x00;
  1264  006F40  0E00               	movlw	0
  1265  006F42  6E80               	movwf	3968,c	;volatile
  1266                           
  1267                           ;main.c: 140: PORTB = 0x00;
  1268  006F44  0E00               	movlw	0
  1269  006F46  6E81               	movwf	3969,c	;volatile
  1270                           
  1271                           ;main.c: 141: PORTC = 0x00;
  1272  006F48  0E00               	movlw	0
  1273  006F4A  6E82               	movwf	3970,c	;volatile
  1274                           
  1275                           ;main.c: 142: PORTD = 0x00;
  1276  006F4C  0E00               	movlw	0
  1277  006F4E  6E83               	movwf	3971,c	;volatile
  1278                           
  1279                           ;main.c: 143: PORTE = 0xff;
  1280  006F50  6884               	setf	3972,c	;volatile
  1281                           
  1282                           ;main.c: 144: DELAY_ms(500);
  1283  006F52  0E01               	movlw	1
  1284  006F54  6E04               	movwf	DELAY_ms@ms_count+1,c
  1285  006F56  0EF4               	movlw	244
  1286  006F58  6E03               	movwf	DELAY_ms@ms_count,c
  1287  006F5A  EC95  F034         	call	_DELAY_ms	;wreg free
  1288                           
  1289                           ;main.c: 146: pattern=0x01;
  1290  006F5E  0E00               	movlw	0
  1291  006F60  6E08               	movwf	led_Test@pattern+1,c
  1292  006F62  0E01               	movlw	1
  1293  006F64  6E07               	movwf	led_Test@pattern,c
  1294                           
  1295                           ;main.c: 147: for(i=0;i<8;i++)
  1296  006F66  0E00               	movlw	0
  1297  006F68  6E06               	movwf	led_Test@i+1,c
  1298  006F6A  0E00               	movlw	0
  1299  006F6C  6E05               	movwf	led_Test@i,c
  1300  006F6E                     l2652:
  1301  006F6E  BE06               	btfsc	led_Test@i+1,7,c
  1302  006F70  D006               	goto	l82
  1303  006F72  5006               	movf	led_Test@i+1,w,c
  1304  006F74  E1DA               	bnz	l2628
  1305  006F76  0E08               	movlw	8
  1306  006F78  5C05               	subwf	led_Test@i,w,c
  1307  006F7A  B0D8               	btfsc	status,0,c
  1308  006F7C  D7D6               	goto	l2628
  1309  006F7E                     l82:
  1310                           
  1311                           ;main.c: 148: {
  1312                           ;main.c: 149: PORTA = pattern;
  1313  006F7E  C007  FF80         	movff	led_Test@pattern,3968	;volatile
  1314                           
  1315                           ;main.c: 150: PORTB = pattern;
  1316  006F82  C007  FF81         	movff	led_Test@pattern,3969	;volatile
  1317                           
  1318                           ;main.c: 151: PORTC = pattern;
  1319  006F86  C007  FF82         	movff	led_Test@pattern,3970	;volatile
  1320                           
  1321                           ;main.c: 152: PORTD = pattern;
  1322  006F8A  C007  FF83         	movff	led_Test@pattern,3971	;volatile
  1323                           
  1324                           ;main.c: 153: PORTE = pattern;
  1325  006F8E  C007  FF84         	movff	led_Test@pattern,3972	;volatile
  1326                           
  1327                           ;main.c: 154: pattern = pattern<<1;
  1328  006F92  90D8               	bcf	status,0,c
  1329  006F94  3407               	rlcf	led_Test@pattern,w,c
  1330  006F96  6E07               	movwf	led_Test@pattern,c
  1331  006F98  3408               	rlcf	led_Test@pattern+1,w,c
  1332  006F9A  6E08               	movwf	led_Test@pattern+1,c
  1333                           
  1334                           ;main.c: 155: DELAY_ms(200);
  1335  006F9C  0E00               	movlw	0
  1336  006F9E  6E04               	movwf	DELAY_ms@ms_count+1,c
  1337  006FA0  0EC8               	movlw	200
  1338  006FA2  6E03               	movwf	DELAY_ms@ms_count,c
  1339  006FA4  EC95  F034         	call	_DELAY_ms	;wreg free
  1340  006FA8  4A05               	infsnz	led_Test@i,f,c
  1341  006FAA  2A06               	incf	led_Test@i+1,f,c
  1342  006FAC  D7E0               	goto	l2652
  1343  006FAE                     __end_of_led_Test:
  1344                           	opt stack 0
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           postdec1	equ	0xFE5
  1352                           fsr1l	equ	0xFE1
  1353                           status	equ	0xFD8
  1354                           
  1355 ;; *************** function _lcd_Test *****************
  1356 ;; Defined at:
  1357 ;;		line 163 in file "main.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;		None
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;		None
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      void 
  1364 ;; Registers used:
  1365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1371 ;;      Params:         0       0       0       0       0       0       0
  1372 ;;      Locals:         0       0       0       0       0       0       0
  1373 ;;      Temps:          0       0       0       0       0       0       0
  1374 ;;      Totals:         0       0       0       0       0       0       0
  1375 ;;Total ram usage:        0 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    7
  1378 ;; This function calls:
  1379 ;;		_LCD_DisplayString
  1380 ;;		_LCD_Init
  1381 ;;		_LCD_SetUp
  1382 ;; This function is called by:
  1383 ;;		_main
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text3
  1388  006BC0                     __ptext3:
  1389                           	opt stack 0
  1390  006BC0                     _lcd_Test:
  1391                           	opt stack 23
  1392                           
  1393                           ;main.c: 165: LCD_SetUp(PB_0,PB_1,PB_2,P_NC,P_NC,P_NC,P_NC,PB_4,PB_5,PB_6,PB_7);
  1394                           
  1395                           ;incstack = 0
  1396  006BC0  0E09               	movlw	9
  1397  006BC2  6E06               	movwf	LCD_SetUp@RW,c
  1398  006BC4  0E0A               	movlw	10
  1399  006BC6  6E07               	movwf	LCD_SetUp@EN,c
  1400  006BC8  0EFF               	movlw	255
  1401  006BCA  6E08               	movwf	LCD_SetUp@D0,c
  1402  006BCC  0EFF               	movlw	255
  1403  006BCE  6E09               	movwf	LCD_SetUp@D1,c
  1404  006BD0  0EFF               	movlw	255
  1405  006BD2  6E0A               	movwf	LCD_SetUp@D2,c
  1406  006BD4  0EFF               	movlw	255
  1407  006BD6  6E0B               	movwf	LCD_SetUp@D3,c
  1408  006BD8  0E0C               	movlw	12
  1409  006BDA  6E0C               	movwf	LCD_SetUp@D4,c
  1410  006BDC  0E0D               	movlw	13
  1411  006BDE  6E0D               	movwf	LCD_SetUp@D5,c
  1412  006BE0  0E0E               	movlw	14
  1413  006BE2  6E0E               	movwf	LCD_SetUp@D6,c
  1414  006BE4  0E0F               	movlw	15
  1415  006BE6  6E0F               	movwf	LCD_SetUp@D7,c
  1416  006BE8  0E08               	movlw	8
  1417  006BEA  EC2D  F038         	call	_LCD_SetUp
  1418                           
  1419                           ;main.c: 166: LCD_Init(2,16);
  1420  006BEE  0E10               	movlw	16
  1421  006BF0  6E0E               	movwf	LCD_Init@v_MaxCharsPerLine_u8,c
  1422  006BF2  0E02               	movlw	2
  1423  006BF4  ECA5  F036         	call	_LCD_Init
  1424                           
  1425                           ;main.c: 167: LCD_DisplayString("Explore\n Starter Pic...");
  1426  006BF8  0EAD               	movlw	low STR_2
  1427  006BFA  6E0E               	movwf	LCD_DisplayString@ptr_stringPointer_u8,c
  1428  006BFC  0E7B               	movlw	high STR_2
  1429  006BFE  6E0F               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1,c
  1430  006C00  EC02  F035         	call	_LCD_DisplayString	;wreg free
  1431  006C04                     l89:
  1432  006C04  D7FF               	goto	l89
  1433  006C06                     __end_of_lcd_Test:
  1434                           	opt stack 0
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           status	equ	0xFD8
  1444                           
  1445 ;; *************** function _LCD_SetUp *****************
  1446 ;; Defined at:
  1447 ;;		line 135 in file "../00-libfiles/lcd.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  RS              1    wreg     enum E3222
  1450 ;;  RW              1    5[COMRAM] enum E3222
  1451 ;;  EN              1    6[COMRAM] enum E3222
  1452 ;;  D0              1    7[COMRAM] enum E3222
  1453 ;;  D1              1    8[COMRAM] enum E3222
  1454 ;;  D2              1    9[COMRAM] enum E3222
  1455 ;;  D3              1   10[COMRAM] enum E3222
  1456 ;;  D4              1   11[COMRAM] enum E3222
  1457 ;;  D5              1   12[COMRAM] enum E3222
  1458 ;;  D6              1   13[COMRAM] enum E3222
  1459 ;;  D7              1   14[COMRAM] enum E3222
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;  RS              1   15[COMRAM] enum E3222
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      void 
  1464 ;; Registers used:
  1465 ;;		wreg, status,2, status,0, cstack
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1471 ;;      Params:        10       0       0       0       0       0       0
  1472 ;;      Locals:         1       0       0       0       0       0       0
  1473 ;;      Temps:          0       0       0       0       0       0       0
  1474 ;;      Totals:        11       0       0       0       0       0       0
  1475 ;;Total ram usage:       11 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:    1
  1478 ;; This function calls:
  1479 ;;		_GPIO_PinDirection
  1480 ;; This function is called by:
  1481 ;;		_lcd_Test
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text4
  1486  00705A                     __ptext4:
  1487                           	opt stack 0
  1488  00705A                     _LCD_SetUp:
  1489                           	opt stack 28
  1490                           
  1491                           ;incstack = 0
  1492                           ;LCD_SetUp@RS stored from wreg
  1493  00705A  6E10               	movwf	LCD_SetUp@RS,c
  1494                           
  1495                           ;lcd.c: 148: LCDConfig.RS = RS;
  1496  00705C  C010  F04F         	movff	LCD_SetUp@RS,_LCDConfig+3
  1497                           
  1498                           ;lcd.c: 149: LCDConfig.RW = RW;
  1499  007060  C006  F050         	movff	LCD_SetUp@RW,_LCDConfig+4
  1500                           
  1501                           ;lcd.c: 150: LCDConfig.EN = EN;
  1502  007064  C007  F051         	movff	LCD_SetUp@EN,_LCDConfig+5
  1503                           
  1504                           ;lcd.c: 152: LCDConfig.D0 = D0;
  1505  007068  C008  F052         	movff	LCD_SetUp@D0,_LCDConfig+6
  1506                           
  1507                           ;lcd.c: 153: LCDConfig.D1 = D1;
  1508  00706C  C009  F053         	movff	LCD_SetUp@D1,_LCDConfig+7
  1509                           
  1510                           ;lcd.c: 154: LCDConfig.D2 = D2;
  1511  007070  C00A  F054         	movff	LCD_SetUp@D2,_LCDConfig+8
  1512                           
  1513                           ;lcd.c: 155: LCDConfig.D3 = D3;
  1514  007074  C00B  F055         	movff	LCD_SetUp@D3,_LCDConfig+9
  1515                           
  1516                           ;lcd.c: 156: LCDConfig.D4 = D4;
  1517  007078  C00C  F056         	movff	LCD_SetUp@D4,_LCDConfig+10
  1518                           
  1519                           ;lcd.c: 157: LCDConfig.D5 = D5;
  1520  00707C  C00D  F057         	movff	LCD_SetUp@D5,_LCDConfig+11
  1521                           
  1522                           ;lcd.c: 158: LCDConfig.D6 = D6;
  1523  007080  C00E  F058         	movff	LCD_SetUp@D6,_LCDConfig+12
  1524                           
  1525                           ;lcd.c: 159: LCDConfig.D7 = D7;
  1526  007084  C00F  F059         	movff	LCD_SetUp@D7,_LCDConfig+13
  1527                           
  1528                           ;lcd.c: 162: if((D0 == P_NC) || (D1 == P_NC) || (D2 == P_NC) || (D3 == P_NC))
  1529  007088  2808               	incf	LCD_SetUp@D0,w,c
  1530  00708A  B4D8               	btfsc	status,2,c
  1531  00708C  D009               	goto	l2518
  1532  00708E  2809               	incf	LCD_SetUp@D1,w,c
  1533  007090  B4D8               	btfsc	status,2,c
  1534  007092  D006               	goto	l2518
  1535  007094  280A               	incf	LCD_SetUp@D2,w,c
  1536  007096  B4D8               	btfsc	status,2,c
  1537  007098  D003               	goto	l2518
  1538  00709A  280B               	incf	LCD_SetUp@D3,w,c
  1539  00709C  A4D8               	btfss	status,2,c
  1540  00709E  D003               	goto	l2520
  1541  0070A0                     l2518:
  1542                           
  1543                           ;lcd.c: 163: {
  1544                           ;lcd.c: 164: LCDConfig.v_LcdMode_U8 = 4;
  1545  0070A0  0E04               	movlw	4
  1546  0070A2  6E4E               	movwf	_LCDConfig+2,c
  1547                           
  1548                           ;lcd.c: 165: }
  1549  0070A4  D016               	goto	l2530
  1550  0070A6                     l2520:
  1551                           
  1552                           ;lcd.c: 166: else
  1553                           ;lcd.c: 167: {
  1554                           ;lcd.c: 168: LCDConfig.v_LcdMode_U8 = 8;
  1555  0070A6  0E08               	movlw	8
  1556  0070A8  6E4E               	movwf	_LCDConfig+2,c
  1557                           
  1558                           ;lcd.c: 169: GPIO_PinDirection(D0,0x00u);
  1559  0070AA  0E00               	movlw	0
  1560  0070AC  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1561  0070AE  5008               	movf	LCD_SetUp@D0,w,c
  1562  0070B0  EC6B  F039         	call	_GPIO_PinDirection
  1563                           
  1564                           ;lcd.c: 170: GPIO_PinDirection(D1,0x00u);
  1565  0070B4  0E00               	movlw	0
  1566  0070B6  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1567  0070B8  5009               	movf	LCD_SetUp@D1,w,c
  1568  0070BA  EC6B  F039         	call	_GPIO_PinDirection
  1569                           
  1570                           ;lcd.c: 171: GPIO_PinDirection(D2,0x00u);
  1571  0070BE  0E00               	movlw	0
  1572  0070C0  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1573  0070C2  500A               	movf	LCD_SetUp@D2,w,c
  1574  0070C4  EC6B  F039         	call	_GPIO_PinDirection
  1575                           
  1576                           ;lcd.c: 172: GPIO_PinDirection(D3,0x00u);
  1577  0070C8  0E00               	movlw	0
  1578  0070CA  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1579  0070CC  500B               	movf	LCD_SetUp@D3,w,c
  1580  0070CE  EC6B  F039         	call	_GPIO_PinDirection
  1581  0070D2                     l2530:
  1582                           
  1583                           ;lcd.c: 173: }
  1584                           ;lcd.c: 176: GPIO_PinDirection(RS,0x00u);
  1585  0070D2  0E00               	movlw	0
  1586  0070D4  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1587  0070D6  5010               	movf	LCD_SetUp@RS,w,c
  1588  0070D8  EC6B  F039         	call	_GPIO_PinDirection
  1589                           
  1590                           ;lcd.c: 177: GPIO_PinDirection(RW,0x00u);
  1591  0070DC  0E00               	movlw	0
  1592  0070DE  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1593  0070E0  5006               	movf	LCD_SetUp@RW,w,c
  1594  0070E2  EC6B  F039         	call	_GPIO_PinDirection
  1595                           
  1596                           ;lcd.c: 178: GPIO_PinDirection(EN,0x00u);
  1597  0070E6  0E00               	movlw	0
  1598  0070E8  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1599  0070EA  5007               	movf	LCD_SetUp@EN,w,c
  1600  0070EC  EC6B  F039         	call	_GPIO_PinDirection
  1601                           
  1602                           ;lcd.c: 180: GPIO_PinDirection(D4,0x00u);
  1603  0070F0  0E00               	movlw	0
  1604  0070F2  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1605  0070F4  500C               	movf	LCD_SetUp@D4,w,c
  1606  0070F6  EC6B  F039         	call	_GPIO_PinDirection
  1607                           
  1608                           ;lcd.c: 181: GPIO_PinDirection(D5,0x00u);
  1609  0070FA  0E00               	movlw	0
  1610  0070FC  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1611  0070FE  500D               	movf	LCD_SetUp@D5,w,c
  1612  007100  EC6B  F039         	call	_GPIO_PinDirection
  1613                           
  1614                           ;lcd.c: 182: GPIO_PinDirection(D6,0x00u);
  1615  007104  0E00               	movlw	0
  1616  007106  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1617  007108  500E               	movf	LCD_SetUp@D6,w,c
  1618  00710A  EC6B  F039         	call	_GPIO_PinDirection
  1619                           
  1620                           ;lcd.c: 183: GPIO_PinDirection(D7,0x00u);
  1621  00710E  0E00               	movlw	0
  1622  007110  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  1623  007112  500F               	movf	LCD_SetUp@D7,w,c
  1624  007114  EC6B  F039         	call	_GPIO_PinDirection
  1625  007118  0012               	return		;funcret
  1626  00711A                     __end_of_LCD_SetUp:
  1627                           	opt stack 0
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           tblptrl	equ	0xFF6
  1631                           tablat	equ	0xFF5
  1632                           postinc0	equ	0xFEE
  1633                           wreg	equ	0xFE8
  1634                           postdec1	equ	0xFE5
  1635                           fsr1l	equ	0xFE1
  1636                           status	equ	0xFD8
  1637                           
  1638 ;; *************** function _LCD_Init *****************
  1639 ;; Defined at:
  1640 ;;		line 198 in file "../00-libfiles/lcd.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;  v_lcdNoOfLin    1    wreg     unsigned char 
  1643 ;;  v_MaxCharsPe    1   13[COMRAM] unsigned char 
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;  v_lcdNoOfLin    1   14[COMRAM] unsigned char 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      void 
  1648 ;; Registers used:
  1649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1655 ;;      Params:         1       0       0       0       0       0       0
  1656 ;;      Locals:         1       0       0       0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0
  1658 ;;      Totals:         2       0       0       0       0       0       0
  1659 ;;Total ram usage:        2 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    6
  1662 ;; This function calls:
  1663 ;;		_DELAY_ms
  1664 ;;		_LCD_Clear
  1665 ;;		_LCD_CmdWrite
  1666 ;;		_lcd_Reset
  1667 ;; This function is called by:
  1668 ;;		_lcd_Test
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text5
  1673  006D4A                     __ptext5:
  1674                           	opt stack 0
  1675  006D4A                     _LCD_Init:
  1676                           	opt stack 23
  1677                           
  1678                           ;incstack = 0
  1679                           ;LCD_Init@v_lcdNoOfLines_u8 stored from wreg
  1680  006D4A  6E0F               	movwf	LCD_Init@v_lcdNoOfLines_u8,c
  1681                           
  1682                           ;lcd.c: 202: LCDConfig.v_MaxSupportedChars_U8 = v_MaxCharsPerLine_u8;
  1683  006D4C  C00E  F04D         	movff	LCD_Init@v_MaxCharsPerLine_u8,_LCDConfig+1
  1684                           
  1685                           ;lcd.c: 203: LCDConfig.v_MaxSupportedLines_U8 = v_lcdNoOfLines_u8;
  1686  006D50  C00F  F04C         	movff	LCD_Init@v_lcdNoOfLines_u8,_LCDConfig
  1687                           
  1688                           ;lcd.c: 204: if(v_lcdNoOfLines_u8 > 0x02)
  1689  006D54  0E02               	movlw	2
  1690  006D56  640F               	cpfsgt	LCD_Init@v_lcdNoOfLines_u8,c
  1691  006D58  D008               	goto	l2552
  1692                           
  1693                           ;lcd.c: 205: {
  1694                           ;lcd.c: 206: ARR_LcdLineNumAddress_U8[0x02] = 0x90 + (v_MaxCharsPerLine_u8 & 0x0fu);
  1695  006D5A  500E               	movf	LCD_Init@v_MaxCharsPerLine_u8,w,c
  1696  006D5C  0B0F               	andlw	15
  1697  006D5E  0F90               	addlw	144
  1698  006D60  6E66               	movwf	_ARR_LcdLineNumAddress_U8+2,c
  1699                           
  1700                           ;lcd.c: 207: ARR_LcdLineNumAddress_U8[0x03] = 0xd0 + (v_MaxCharsPerLine_u8 & 0x0fu);
  1701  006D62  500E               	movf	LCD_Init@v_MaxCharsPerLine_u8,w,c
  1702  006D64  0B0F               	andlw	15
  1703  006D66  0FD0               	addlw	208
  1704  006D68  6E67               	movwf	_ARR_LcdLineNumAddress_U8+3,c
  1705  006D6A                     l2552:
  1706                           
  1707                           ;lcd.c: 208: }
  1708                           ;lcd.c: 210: DELAY_ms(100);
  1709  006D6A  0E00               	movlw	0
  1710  006D6C  6E04               	movwf	DELAY_ms@ms_count+1,c
  1711  006D6E  0E64               	movlw	100
  1712  006D70  6E03               	movwf	DELAY_ms@ms_count,c
  1713  006D72  EC95  F034         	call	_DELAY_ms	;wreg free
  1714                           
  1715                           ;lcd.c: 212: if(LCDConfig.v_LcdMode_U8 == 8u)
  1716  006D76  0E08               	movlw	8
  1717  006D78  184E               	xorwf	_LCDConfig+2,w,c
  1718  006D7A  A4D8               	btfss	status,2,c
  1719  006D7C  D004               	goto	l2558
  1720                           
  1721                           ;lcd.c: 213: {
  1722                           ;lcd.c: 214: LCD_CmdWrite(0x38u);
  1723  006D7E  0E38               	movlw	56
  1724  006D80  EC5D  F035         	call	_LCD_CmdWrite
  1725                           
  1726                           ;lcd.c: 215: }
  1727  006D84  D009               	goto	l389
  1728  006D86                     l2558:
  1729                           
  1730                           ;lcd.c: 216: else if(LCDConfig.v_LcdMode_U8 == 4u)
  1731  006D86  0E04               	movlw	4
  1732  006D88  184E               	xorwf	_LCDConfig+2,w,c
  1733  006D8A  A4D8               	btfss	status,2,c
  1734  006D8C  D005               	goto	l389
  1735                           
  1736                           ;lcd.c: 217: {
  1737                           ;lcd.c: 218: lcd_Reset();
  1738  006D8E  EC78  F036         	call	_lcd_Reset	;wreg free
  1739                           
  1740                           ;lcd.c: 219: LCD_CmdWrite(0x28u);
  1741  006D92  0E28               	movlw	40
  1742  006D94  EC5D  F035         	call	_LCD_CmdWrite
  1743  006D98                     l389:
  1744                           
  1745                           ;lcd.c: 220: }
  1746                           ;lcd.c: 222: LCD_CmdWrite(0x0Eu);
  1747  006D98  0E0E               	movlw	14
  1748  006D9A  EC5D  F035         	call	_LCD_CmdWrite
  1749                           
  1750                           ;lcd.c: 223: LCD_Clear();
  1751  006D9E  EC7D  F034         	call	_LCD_Clear	;wreg free
  1752  006DA2  0012               	return		;funcret
  1753  006DA4                     __end_of_LCD_Init:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1l	equ	0xFE1
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _lcd_Reset *****************
  1766 ;; Defined at:
  1767 ;;		line 913 in file "../00-libfiles/lcd.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;		None
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1781 ;;      Params:         0       0       0       0       0       0       0
  1782 ;;      Locals:         0       0       0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0
  1784 ;;      Totals:         0       0       0       0       0       0       0
  1785 ;;Total ram usage:        0 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    2
  1788 ;; This function calls:
  1789 ;;		_DELAY_ms
  1790 ;;		_DELAY_us
  1791 ;;		_lcd_SendCmdSignals
  1792 ;;		_lcd_SendHigherNibble
  1793 ;; This function is called by:
  1794 ;;		_LCD_Init
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text6
  1799  006CF0                     __ptext6:
  1800                           	opt stack 0
  1801  006CF0                     _lcd_Reset:
  1802                           	opt stack 26
  1803                           
  1804                           ;lcd.c: 916: lcd_SendHigherNibble(0x30);
  1805                           
  1806                           ;incstack = 0
  1807  006CF0  0E30               	movlw	48
  1808  006CF2  EC03  F036         	call	_lcd_SendHigherNibble
  1809                           
  1810                           ;lcd.c: 917: lcd_SendCmdSignals();
  1811  006CF6  EC8F  F035         	call	_lcd_SendCmdSignals	;wreg free
  1812                           
  1813                           ;lcd.c: 918: DELAY_ms(100);
  1814  006CFA  0E00               	movlw	0
  1815  006CFC  6E04               	movwf	DELAY_ms@ms_count+1,c
  1816  006CFE  0E64               	movlw	100
  1817  006D00  6E03               	movwf	DELAY_ms@ms_count,c
  1818  006D02  EC95  F034         	call	_DELAY_ms	;wreg free
  1819                           
  1820                           ;lcd.c: 919: lcd_SendHigherNibble(0x30);
  1821  006D06  0E30               	movlw	48
  1822  006D08  EC03  F036         	call	_lcd_SendHigherNibble
  1823                           
  1824                           ;lcd.c: 920: lcd_SendCmdSignals();
  1825  006D0C  EC8F  F035         	call	_lcd_SendCmdSignals	;wreg free
  1826                           
  1827                           ;lcd.c: 921: DELAY_us(200);
  1828  006D10  0E00               	movlw	0
  1829  006D12  6E02               	movwf	DELAY_us@us_count+1,c
  1830  006D14  0EC8               	movlw	200
  1831  006D16  6E01               	movwf	DELAY_us@us_count,c
  1832  006D18  EC8C  F034         	call	_DELAY_us	;wreg free
  1833                           
  1834                           ;lcd.c: 922: lcd_SendHigherNibble(0x30);
  1835  006D1C  0E30               	movlw	48
  1836  006D1E  EC03  F036         	call	_lcd_SendHigherNibble
  1837                           
  1838                           ;lcd.c: 923: lcd_SendCmdSignals();
  1839  006D22  EC8F  F035         	call	_lcd_SendCmdSignals	;wreg free
  1840                           
  1841                           ;lcd.c: 924: DELAY_us(200);
  1842  006D26  0E00               	movlw	0
  1843  006D28  6E02               	movwf	DELAY_us@us_count+1,c
  1844  006D2A  0EC8               	movlw	200
  1845  006D2C  6E01               	movwf	DELAY_us@us_count,c
  1846  006D2E  EC8C  F034         	call	_DELAY_us	;wreg free
  1847                           
  1848                           ;lcd.c: 925: lcd_SendHigherNibble(0x20);
  1849  006D32  0E20               	movlw	32
  1850  006D34  EC03  F036         	call	_lcd_SendHigherNibble
  1851                           
  1852                           ;lcd.c: 926: lcd_SendCmdSignals();
  1853  006D38  EC8F  F035         	call	_lcd_SendCmdSignals	;wreg free
  1854                           
  1855                           ;lcd.c: 927: DELAY_us(200);
  1856  006D3C  0E00               	movlw	0
  1857  006D3E  6E02               	movwf	DELAY_us@us_count+1,c
  1858  006D40  0EC8               	movlw	200
  1859  006D42  6E01               	movwf	DELAY_us@us_count,c
  1860  006D44  EC8C  F034         	call	_DELAY_us	;wreg free
  1861  006D48  0012               	return		;funcret
  1862  006D4A                     __end_of_lcd_Reset:
  1863                           	opt stack 0
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _LCD_Clear *****************
  1875 ;; Defined at:
  1876 ;;		line 237 in file "../00-libfiles/lcd.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1890 ;;      Params:         0       0       0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0
  1893 ;;      Totals:         0       0       0       0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    5
  1897 ;; This function calls:
  1898 ;;		_LCD_CmdWrite
  1899 ;;		_LCD_GoToLine
  1900 ;; This function is called by:
  1901 ;;		_LCD_Init
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           	psect	text7
  1906  0068FA                     __ptext7:
  1907                           	opt stack 0
  1908  0068FA                     _LCD_Clear:
  1909                           	opt stack 23
  1910                           
  1911                           ;lcd.c: 239: LCD_CmdWrite(0x01u);
  1912                           
  1913                           ;incstack = 0
  1914  0068FA  0E01               	movlw	1
  1915  0068FC  EC5D  F035         	call	_LCD_CmdWrite
  1916                           
  1917                           ;lcd.c: 240: LCD_GoToLine(0x00);
  1918  006900  0E00               	movlw	0
  1919  006902  EC17  F035         	call	_LCD_GoToLine
  1920  006906  0012               	return		;funcret
  1921  006908                     __end_of_LCD_Clear:
  1922                           	opt stack 0
  1923                           tblptru	equ	0xFF8
  1924                           tblptrh	equ	0xFF7
  1925                           tblptrl	equ	0xFF6
  1926                           tablat	equ	0xFF5
  1927                           postinc0	equ	0xFEE
  1928                           wreg	equ	0xFE8
  1929                           postdec1	equ	0xFE5
  1930                           fsr1l	equ	0xFE1
  1931                           status	equ	0xFD8
  1932                           
  1933 ;; *************** function _LCD_GoToLine *****************
  1934 ;; Defined at:
  1935 ;;		line 265 in file "../00-libfiles/lcd.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  v_lineNumber    1    wreg     unsigned char 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  v_lineNumber    1   12[COMRAM] unsigned char 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1949 ;;      Params:         0       0       0       0       0       0       0
  1950 ;;      Locals:         1       0       0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0
  1952 ;;      Totals:         1       0       0       0       0       0       0
  1953 ;;Total ram usage:        1 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    4
  1956 ;; This function calls:
  1957 ;;		_LCD_CmdWrite
  1958 ;; This function is called by:
  1959 ;;		_LCD_Clear
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text8
  1964  006A2E                     __ptext8:
  1965                           	opt stack 0
  1966  006A2E                     _LCD_GoToLine:
  1967                           	opt stack 23
  1968                           
  1969                           ;incstack = 0
  1970                           ;LCD_GoToLine@v_lineNumber_u8 stored from wreg
  1971  006A2E  6E0D               	movwf	LCD_GoToLine@v_lineNumber_u8,c
  1972                           
  1973                           ;lcd.c: 267: if(v_lineNumber_u8 < LCDConfig.v_MaxSupportedLines_U8)
  1974  006A30  504C               	movf	_LCDConfig,w,c
  1975  006A32  5C0D               	subwf	LCD_GoToLine@v_lineNumber_u8,w,c
  1976  006A34  B0D8               	btfsc	status,0,c
  1977  006A36  0012               	return	
  1978                           
  1979                           ;lcd.c: 268: {
  1980                           ;lcd.c: 271: v_LcdTrackCursorPos_U8 = 0x00;
  1981  006A38  0E00               	movlw	0
  1982  006A3A  6E62               	movwf	_v_LcdTrackCursorPos_U8,c
  1983                           
  1984                           ;lcd.c: 272: v_LcdTrackLineNum_U8 = v_lineNumber_u8;
  1985  006A3C  C00D  F063         	movff	LCD_GoToLine@v_lineNumber_u8,_v_LcdTrackLineNum_U8
  1986                           
  1987                           ;lcd.c: 273: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_lineNumber_u8]);
  1988  006A40  500D               	movf	LCD_GoToLine@v_lineNumber_u8,w,c
  1989  006A42  0D01               	mullw	1
  1990  006A44  0E64               	movlw	low _ARR_LcdLineNumAddress_U8
  1991  006A46  24F3               	addwf	prodl,w,c
  1992  006A48  6ED9               	movwf	fsr2l,c
  1993  006A4A  0E00               	movlw	high _ARR_LcdLineNumAddress_U8
  1994  006A4C  20F4               	addwfc	prodh,w,c
  1995  006A4E  6EDA               	movwf	fsr2h,c
  1996  006A50  50DF               	movf	indf2,w,c
  1997  006A52  EC5D  F035         	call	_LCD_CmdWrite
  1998  006A56  0012               	return	
  1999  006A58                     __end_of_LCD_GoToLine:
  2000                           	opt stack 0
  2001                           tblptru	equ	0xFF8
  2002                           tblptrh	equ	0xFF7
  2003                           tblptrl	equ	0xFF6
  2004                           tablat	equ	0xFF5
  2005                           prodh	equ	0xFF4
  2006                           prodl	equ	0xFF3
  2007                           postinc0	equ	0xFEE
  2008                           wreg	equ	0xFE8
  2009                           postdec1	equ	0xFE5
  2010                           fsr1l	equ	0xFE1
  2011                           indf2	equ	0xFDF
  2012                           fsr2h	equ	0xFDA
  2013                           fsr2l	equ	0xFD9
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function _LCD_DisplayString *****************
  2017 ;; Defined at:
  2018 ;;		line 427 in file "../00-libfiles/lcd.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  ptr_stringPo    2   13[COMRAM] PTR const unsigned char 
  2021 ;;		 -> STR_2(24), 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2033 ;;      Params:         2       0       0       0       0       0       0
  2034 ;;      Locals:         0       0       0       0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0
  2036 ;;      Totals:         2       0       0       0       0       0       0
  2037 ;;Total ram usage:        2 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    6
  2040 ;; This function calls:
  2041 ;;		_LCD_DisplayChar
  2042 ;; This function is called by:
  2043 ;;		_lcd_Test
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	text9
  2048  006A04                     __ptext9:
  2049                           	opt stack 0
  2050  006A04                     _LCD_DisplayString:
  2051                           	opt stack 23
  2052                           
  2053                           ;lcd.c: 429: while((*ptr_stringPointer_u8)!=0)
  2054                           
  2055                           ;incstack = 0
  2056  006A04  D00A               	goto	l2570
  2057  006A06                     l2566:
  2058                           
  2059                           ;lcd.c: 430: LCD_DisplayChar(*ptr_stringPointer_u8++);
  2060  006A06  C00E  FFF6         	movff	LCD_DisplayString@ptr_stringPointer_u8,tblptrl
  2061  006A0A  C00F  FFF7         	movff	LCD_DisplayString@ptr_stringPointer_u8+1,tblptrh
  2062  006A0E                     	if	0	;tblptru may be non-zero
  2063  006A0E                     	endif
  2064  006A0E                     	if	0	;tblptru may be non-zero
  2065  006A0E                     	endif
  2066  006A0E  0008               	tblrd		*
  2067  006A10  50F5               	movf	tablat,w,c
  2068  006A12  ECC5  F034         	call	_LCD_DisplayChar
  2069  006A16  4A0E               	infsnz	LCD_DisplayString@ptr_stringPointer_u8,f,c
  2070  006A18  2A0F               	incf	LCD_DisplayString@ptr_stringPointer_u8+1,f,c
  2071  006A1A                     l2570:
  2072  006A1A  C00E  FFF6         	movff	LCD_DisplayString@ptr_stringPointer_u8,tblptrl
  2073  006A1E  C00F  FFF7         	movff	LCD_DisplayString@ptr_stringPointer_u8+1,tblptrh
  2074  006A22                     	if	0	;tblptru may be non-zero
  2075  006A22                     	endif
  2076  006A22                     	if	0	;tblptru may be non-zero
  2077  006A22                     	endif
  2078  006A22  0008               	tblrd		*
  2079  006A24  50F5               	movf	tablat,w,c
  2080  006A26  0900               	iorlw	0
  2081  006A28  B4D8               	btfsc	status,2,c
  2082  006A2A  0012               	return	
  2083  006A2C  D7EC               	goto	l2566
  2084  006A2E                     __end_of_LCD_DisplayString:
  2085                           	opt stack 0
  2086                           tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           prodh	equ	0xFF4
  2091                           prodl	equ	0xFF3
  2092                           postinc0	equ	0xFEE
  2093                           wreg	equ	0xFE8
  2094                           postdec1	equ	0xFE5
  2095                           fsr1l	equ	0xFE1
  2096                           indf2	equ	0xFDF
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _LCD_DisplayChar *****************
  2102 ;; Defined at:
  2103 ;;		line 392 in file "../00-libfiles/lcd.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  v_lcdData_u8    1    wreg     unsigned char 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  v_lcdData_u8    1   12[COMRAM] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2117 ;;      Params:         0       0       0       0       0       0       0
  2118 ;;      Locals:         1       0       0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0
  2120 ;;      Totals:         1       0       0       0       0       0       0
  2121 ;;Total ram usage:        1 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    5
  2124 ;; This function calls:
  2125 ;;		_LCD_GoToNextLine
  2126 ;;		_lcd_DataWrite
  2127 ;; This function is called by:
  2128 ;;		_LCD_DisplayString
  2129 ;;		_LCD_DisplayNumber
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text10
  2134  00698A                     __ptext10:
  2135                           	opt stack 0
  2136  00698A                     _LCD_DisplayChar:
  2137                           	opt stack 23
  2138                           
  2139                           ;incstack = 0
  2140                           ;LCD_DisplayChar@v_lcdData_u8 stored from wreg
  2141  00698A  6E0D               	movwf	LCD_DisplayChar@v_lcdData_u8,c
  2142                           
  2143                           ;lcd.c: 394: if((v_LcdTrackCursorPos_U8>=LCDConfig.v_MaxSupportedChars_U8) || (v_lcdData
      +                          _u8=='\n'))
  2144  00698C  504D               	movf	_LCDConfig+1,w,c
  2145  00698E  5C62               	subwf	_v_LcdTrackCursorPos_U8,w,c
  2146  006990  B0D8               	btfsc	status,0,c
  2147  006992  D003               	goto	l2312
  2148  006994  0E0A               	movlw	10
  2149  006996  180D               	xorwf	LCD_DisplayChar@v_lcdData_u8,w,c
  2150  006998  B4D8               	btfsc	status,2,c
  2151  00699A                     l2312:
  2152                           
  2153                           ;lcd.c: 395: {
  2154                           ;lcd.c: 398: LCD_GoToNextLine();
  2155  00699A  ECED  F034         	call	_LCD_GoToNextLine	;wreg free
  2156                           
  2157                           ;lcd.c: 399: }
  2158                           ;lcd.c: 400: if(v_lcdData_u8!='\n')
  2159  00699E  0E0A               	movlw	10
  2160  0069A0  180D               	xorwf	LCD_DisplayChar@v_lcdData_u8,w,c
  2161  0069A2  B4D8               	btfsc	status,2,c
  2162  0069A4  0012               	return	
  2163                           
  2164                           ;lcd.c: 401: {
  2165                           ;lcd.c: 403: lcd_DataWrite(v_lcdData_u8);
  2166  0069A6  500D               	movf	LCD_DisplayChar@v_lcdData_u8,w,c
  2167  0069A8  EC76  F035         	call	_lcd_DataWrite
  2168                           
  2169                           ;lcd.c: 404: v_LcdTrackCursorPos_U8++;
  2170  0069AC  2A62               	incf	_v_LcdTrackCursorPos_U8,f,c
  2171  0069AE  0012               	return	
  2172  0069B0                     __end_of_LCD_DisplayChar:
  2173                           	opt stack 0
  2174                           tblptru	equ	0xFF8
  2175                           tblptrh	equ	0xFF7
  2176                           tblptrl	equ	0xFF6
  2177                           tablat	equ	0xFF5
  2178                           prodh	equ	0xFF4
  2179                           prodl	equ	0xFF3
  2180                           postinc0	equ	0xFEE
  2181                           wreg	equ	0xFE8
  2182                           postdec1	equ	0xFE5
  2183                           fsr1l	equ	0xFE1
  2184                           indf2	equ	0xFDF
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _lcd_DataWrite *****************
  2190 ;; Defined at:
  2191 ;;		line 826 in file "../00-libfiles/lcd.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  dataByte        1    wreg     unsigned char 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  dataByte        1   11[COMRAM] unsigned char 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2205 ;;      Params:         0       0       0       0       0       0       0
  2206 ;;      Locals:         1       0       0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0
  2208 ;;      Totals:         1       0       0       0       0       0       0
  2209 ;;Total ram usage:        1 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    3
  2212 ;; This function calls:
  2213 ;;		_lcd_BusyCheck
  2214 ;;		_lcd_SendDataSignals
  2215 ;;		_lcd_SendHigherNibble
  2216 ;;		_lcd_SendLowerNibble
  2217 ;; This function is called by:
  2218 ;;		_LCD_DisplayChar
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text11
  2223  006AEC                     __ptext11:
  2224                           	opt stack 0
  2225  006AEC                     _lcd_DataWrite:
  2226                           	opt stack 24
  2227                           
  2228                           ;incstack = 0
  2229                           ;lcd_DataWrite@dataByte stored from wreg
  2230  006AEC  6E0C               	movwf	lcd_DataWrite@dataByte,c
  2231                           
  2232                           ;lcd.c: 828: lcd_BusyCheck();
  2233  006AEE  ECD7  F037         	call	_lcd_BusyCheck	;wreg free
  2234                           
  2235                           ;lcd.c: 829: if(LCDConfig.v_LcdMode_U8 == 8u)
  2236  006AF2  0E08               	movlw	8
  2237  006AF4  184E               	xorwf	_LCDConfig+2,w,c
  2238  006AF6  A4D8               	btfss	status,2,c
  2239  006AF8  D004               	goto	l2260
  2240                           
  2241                           ;lcd.c: 830: {
  2242                           ;lcd.c: 831: lcd_SendLowerNibble(dataByte);
  2243  006AFA  500C               	movf	lcd_DataWrite@dataByte,w,c
  2244  006AFC  EC29  F036         	call	_lcd_SendLowerNibble
  2245                           
  2246                           ;lcd.c: 832: }
  2247  006B00  D008               	goto	l2264
  2248  006B02                     l2260:
  2249                           
  2250                           ;lcd.c: 833: else
  2251                           ;lcd.c: 834: {
  2252                           ;lcd.c: 835: lcd_SendHigherNibble(dataByte);
  2253  006B02  500C               	movf	lcd_DataWrite@dataByte,w,c
  2254  006B04  EC03  F036         	call	_lcd_SendHigherNibble
  2255                           
  2256                           ;lcd.c: 836: lcd_SendDataSignals();
  2257  006B08  ECAA  F035         	call	_lcd_SendDataSignals	;wreg free
  2258                           
  2259                           ;lcd.c: 837: dataByte = dataByte << 4;
  2260  006B0C  380C               	swapf	lcd_DataWrite@dataByte,w,c
  2261  006B0E  0BF0               	andlw	240
  2262  006B10  6E0C               	movwf	lcd_DataWrite@dataByte,c
  2263  006B12                     l2264:
  2264                           
  2265                           ;lcd.c: 838: }
  2266                           ;lcd.c: 840: lcd_SendHigherNibble(dataByte);
  2267  006B12  500C               	movf	lcd_DataWrite@dataByte,w,c
  2268  006B14  EC03  F036         	call	_lcd_SendHigherNibble
  2269                           
  2270                           ;lcd.c: 841: lcd_SendDataSignals();
  2271  006B18  ECAA  F035         	call	_lcd_SendDataSignals	;wreg free
  2272  006B1C  0012               	return		;funcret
  2273  006B1E                     __end_of_lcd_DataWrite:
  2274                           	opt stack 0
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           prodh	equ	0xFF4
  2280                           prodl	equ	0xFF3
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           postdec1	equ	0xFE5
  2284                           fsr1l	equ	0xFE1
  2285                           indf2	equ	0xFDF
  2286                           fsr2h	equ	0xFDA
  2287                           fsr2l	equ	0xFD9
  2288                           status	equ	0xFD8
  2289                           
  2290 ;; *************** function _lcd_SendDataSignals *****************
  2291 ;; Defined at:
  2292 ;;		line 1002 in file "../00-libfiles/lcd.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;		None
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;		None
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2, status,0, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2306 ;;      Params:         0       0       0       0       0       0       0
  2307 ;;      Locals:         0       0       0       0       0       0       0
  2308 ;;      Temps:          0       0       0       0       0       0       0
  2309 ;;      Totals:         0       0       0       0       0       0       0
  2310 ;;Total ram usage:        0 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    1
  2313 ;; This function calls:
  2314 ;;		_DELAY_us
  2315 ;;		_GPIO_PinWrite
  2316 ;; This function is called by:
  2317 ;;		_lcd_DataWrite
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text12
  2322  006B54                     __ptext12:
  2323                           	opt stack 0
  2324  006B54                     _lcd_SendDataSignals:
  2325                           	opt stack 25
  2326                           
  2327                           ;lcd.c: 1004: GPIO_PinWrite(LCDConfig.RS,1);
  2328                           
  2329                           ;incstack = 0
  2330  006B54  0E01               	movlw	1
  2331  006B56  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2332  006B58  504F               	movf	_LCDConfig+3,w,c
  2333  006B5A  EC1B  F03A         	call	_GPIO_PinWrite
  2334                           
  2335                           ;lcd.c: 1005: GPIO_PinWrite(LCDConfig.RW,0);
  2336  006B5E  0E00               	movlw	0
  2337  006B60  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2338  006B62  5050               	movf	_LCDConfig+4,w,c
  2339  006B64  EC1B  F03A         	call	_GPIO_PinWrite
  2340                           
  2341                           ;lcd.c: 1006: GPIO_PinWrite(LCDConfig.EN,1);
  2342  006B68  0E01               	movlw	1
  2343  006B6A  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2344  006B6C  5051               	movf	_LCDConfig+5,w,c
  2345  006B6E  EC1B  F03A         	call	_GPIO_PinWrite
  2346                           
  2347                           ;lcd.c: 1007: DELAY_us(10);
  2348  006B72  0E00               	movlw	0
  2349  006B74  6E02               	movwf	DELAY_us@us_count+1,c
  2350  006B76  0E0A               	movlw	10
  2351  006B78  6E01               	movwf	DELAY_us@us_count,c
  2352  006B7A  EC8C  F034         	call	_DELAY_us	;wreg free
  2353                           
  2354                           ;lcd.c: 1008: GPIO_PinWrite(LCDConfig.EN,0);
  2355  006B7E  0E00               	movlw	0
  2356  006B80  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2357  006B82  5051               	movf	_LCDConfig+5,w,c
  2358  006B84  EC1B  F03A         	call	_GPIO_PinWrite
  2359  006B88  0012               	return		;funcret
  2360  006B8A                     __end_of_lcd_SendDataSignals:
  2361                           	opt stack 0
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           prodh	equ	0xFF4
  2367                           prodl	equ	0xFF3
  2368                           postinc0	equ	0xFEE
  2369                           wreg	equ	0xFE8
  2370                           postdec1	equ	0xFE5
  2371                           fsr1l	equ	0xFE1
  2372                           indf2	equ	0xFDF
  2373                           fsr2h	equ	0xFDA
  2374                           fsr2l	equ	0xFD9
  2375                           status	equ	0xFD8
  2376                           
  2377 ;; *************** function _LCD_GoToNextLine *****************
  2378 ;; Defined at:
  2379 ;;		line 292 in file "../00-libfiles/lcd.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;		None
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2393 ;;      Params:         0       0       0       0       0       0       0
  2394 ;;      Locals:         0       0       0       0       0       0       0
  2395 ;;      Temps:          0       0       0       0       0       0       0
  2396 ;;      Totals:         0       0       0       0       0       0       0
  2397 ;;Total ram usage:        0 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    4
  2400 ;; This function calls:
  2401 ;;		_LCD_CmdWrite
  2402 ;; This function is called by:
  2403 ;;		_LCD_DisplayChar
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text13
  2408  0069DA                     __ptext13:
  2409                           	opt stack 0
  2410  0069DA                     _LCD_GoToNextLine:
  2411                           	opt stack 23
  2412                           
  2413                           ;lcd.c: 296: v_LcdTrackLineNum_U8++;
  2414                           
  2415                           ;incstack = 0
  2416  0069DA  2A63               	incf	_v_LcdTrackLineNum_U8,f,c
  2417                           
  2418                           ;lcd.c: 297: v_LcdTrackCursorPos_U8 = 0x00;
  2419  0069DC  0E00               	movlw	0
  2420  0069DE  6E62               	movwf	_v_LcdTrackCursorPos_U8,c
  2421                           
  2422                           ;lcd.c: 298: if(v_LcdTrackLineNum_U8 >= LCDConfig.v_MaxSupportedLines_U8)
  2423  0069E0  504C               	movf	_LCDConfig,w,c
  2424  0069E2  5C63               	subwf	_v_LcdTrackLineNum_U8,w,c
  2425  0069E4  A0D8               	btfss	status,0,c
  2426  0069E6  D002               	goto	l2252
  2427                           
  2428                           ;lcd.c: 299: v_LcdTrackLineNum_U8 = 0x00;
  2429  0069E8  0E00               	movlw	0
  2430  0069EA  6E63               	movwf	_v_LcdTrackLineNum_U8,c
  2431  0069EC                     l2252:
  2432                           
  2433                           ;lcd.c: 300: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_LcdTrackLineNum_U8]);
  2434  0069EC  5063               	movf	_v_LcdTrackLineNum_U8,w,c
  2435  0069EE  0D01               	mullw	1
  2436  0069F0  0E64               	movlw	low _ARR_LcdLineNumAddress_U8
  2437  0069F2  24F3               	addwf	prodl,w,c
  2438  0069F4  6ED9               	movwf	fsr2l,c
  2439  0069F6  0E00               	movlw	high _ARR_LcdLineNumAddress_U8
  2440  0069F8  20F4               	addwfc	prodh,w,c
  2441  0069FA  6EDA               	movwf	fsr2h,c
  2442  0069FC  50DF               	movf	indf2,w,c
  2443  0069FE  EC5D  F035         	call	_LCD_CmdWrite
  2444  006A02  0012               	return		;funcret
  2445  006A04                     __end_of_LCD_GoToNextLine:
  2446                           	opt stack 0
  2447                           tblptru	equ	0xFF8
  2448                           tblptrh	equ	0xFF7
  2449                           tblptrl	equ	0xFF6
  2450                           tablat	equ	0xFF5
  2451                           prodh	equ	0xFF4
  2452                           prodl	equ	0xFF3
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           postdec1	equ	0xFE5
  2456                           fsr1l	equ	0xFE1
  2457                           indf2	equ	0xFDF
  2458                           fsr2h	equ	0xFDA
  2459                           fsr2l	equ	0xFD9
  2460                           status	equ	0xFD8
  2461                           
  2462 ;; *************** function _LCD_CmdWrite *****************
  2463 ;; Defined at:
  2464 ;;		line 358 in file "../00-libfiles/lcd.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  v_lcdCmd_u8     1    wreg     unsigned char 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  v_lcdCmd_u8     1   11[COMRAM] unsigned char 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2, status,0, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2478 ;;      Params:         0       0       0       0       0       0       0
  2479 ;;      Locals:         1       0       0       0       0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0
  2481 ;;      Totals:         1       0       0       0       0       0       0
  2482 ;;Total ram usage:        1 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    3
  2485 ;; This function calls:
  2486 ;;		_lcd_BusyCheck
  2487 ;;		_lcd_SendCmdSignals
  2488 ;;		_lcd_SendHigherNibble
  2489 ;;		_lcd_SendLowerNibble
  2490 ;; This function is called by:
  2491 ;;		_LCD_Init
  2492 ;;		_LCD_Clear
  2493 ;;		_LCD_GoToLine
  2494 ;;		_LCD_GoToNextLine
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           	psect	text14
  2499  006ABA                     __ptext14:
  2500                           	opt stack 0
  2501  006ABA                     _LCD_CmdWrite:
  2502                           	opt stack 25
  2503                           
  2504                           ;incstack = 0
  2505                           ;LCD_CmdWrite@v_lcdCmd_u8 stored from wreg
  2506  006ABA  6E0C               	movwf	LCD_CmdWrite@v_lcdCmd_u8,c
  2507                           
  2508                           ;lcd.c: 360: lcd_BusyCheck();
  2509  006ABC  ECD7  F037         	call	_lcd_BusyCheck	;wreg free
  2510                           
  2511                           ;lcd.c: 361: if(LCDConfig.v_LcdMode_U8 == 8u)
  2512  006AC0  0E08               	movlw	8
  2513  006AC2  184E               	xorwf	_LCDConfig+2,w,c
  2514  006AC4  A4D8               	btfss	status,2,c
  2515  006AC6  D004               	goto	l2226
  2516                           
  2517                           ;lcd.c: 362: {
  2518                           ;lcd.c: 363: lcd_SendLowerNibble(v_lcdCmd_u8);
  2519  006AC8  500C               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2520  006ACA  EC29  F036         	call	_lcd_SendLowerNibble
  2521                           
  2522                           ;lcd.c: 364: }
  2523  006ACE  D008               	goto	l2230
  2524  006AD0                     l2226:
  2525                           
  2526                           ;lcd.c: 365: else
  2527                           ;lcd.c: 366: {
  2528                           ;lcd.c: 367: lcd_SendHigherNibble(v_lcdCmd_u8);
  2529  006AD0  500C               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2530  006AD2  EC03  F036         	call	_lcd_SendHigherNibble
  2531                           
  2532                           ;lcd.c: 368: lcd_SendCmdSignals();
  2533  006AD6  EC8F  F035         	call	_lcd_SendCmdSignals	;wreg free
  2534                           
  2535                           ;lcd.c: 369: v_lcdCmd_u8 = v_lcdCmd_u8 << 4;
  2536  006ADA  380C               	swapf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2537  006ADC  0BF0               	andlw	240
  2538  006ADE  6E0C               	movwf	LCD_CmdWrite@v_lcdCmd_u8,c
  2539  006AE0                     l2230:
  2540                           
  2541                           ;lcd.c: 370: }
  2542                           ;lcd.c: 372: lcd_SendHigherNibble(v_lcdCmd_u8);
  2543  006AE0  500C               	movf	LCD_CmdWrite@v_lcdCmd_u8,w,c
  2544  006AE2  EC03  F036         	call	_lcd_SendHigherNibble
  2545                           
  2546                           ;lcd.c: 373: lcd_SendCmdSignals();
  2547  006AE6  EC8F  F035         	call	_lcd_SendCmdSignals	;wreg free
  2548  006AEA  0012               	return		;funcret
  2549  006AEC                     __end_of_LCD_CmdWrite:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           tblptrh	equ	0xFF7
  2553                           tblptrl	equ	0xFF6
  2554                           tablat	equ	0xFF5
  2555                           prodh	equ	0xFF4
  2556                           prodl	equ	0xFF3
  2557                           postinc0	equ	0xFEE
  2558                           wreg	equ	0xFE8
  2559                           postdec1	equ	0xFE5
  2560                           fsr1l	equ	0xFE1
  2561                           indf2	equ	0xFDF
  2562                           fsr2h	equ	0xFDA
  2563                           fsr2l	equ	0xFD9
  2564                           status	equ	0xFD8
  2565                           
  2566 ;; *************** function _lcd_SendLowerNibble *****************
  2567 ;; Defined at:
  2568 ;;		line 962 in file "../00-libfiles/lcd.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  dataByte        1    wreg     unsigned char 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  dataByte        1   10[COMRAM] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0, cstack
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2582 ;;      Params:         0       0       0       0       0       0       0
  2583 ;;      Locals:         1       0       0       0       0       0       0
  2584 ;;      Temps:          0       0       0       0       0       0       0
  2585 ;;      Totals:         1       0       0       0       0       0       0
  2586 ;;Total ram usage:        1 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    1
  2589 ;; This function calls:
  2590 ;;		_GPIO_PinWrite
  2591 ;; This function is called by:
  2592 ;;		_LCD_CmdWrite
  2593 ;;		_lcd_DataWrite
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text15
  2598  006C52                     __ptext15:
  2599                           	opt stack 0
  2600  006C52                     _lcd_SendLowerNibble:
  2601                           	opt stack 26
  2602                           
  2603                           ;incstack = 0
  2604                           ;lcd_SendLowerNibble@dataByte stored from wreg
  2605  006C52  6E0B               	movwf	lcd_SendLowerNibble@dataByte,c
  2606                           
  2607                           ;lcd.c: 964: GPIO_PinWrite(LCDConfig.D0,(((dataByte)&(((uint8_t)1<<(0))))!=0u));
  2608  006C54  A00B               	btfss	lcd_SendLowerNibble@dataByte,0,c
  2609  006C56  D002               	goto	u2050
  2610  006C58  0E01               	movlw	1
  2611  006C5A  D001               	goto	u2060
  2612  006C5C                     u2050:
  2613  006C5C  0E00               	movlw	0
  2614  006C5E                     u2060:
  2615  006C5E  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2616  006C60  5052               	movf	_LCDConfig+6,w,c
  2617  006C62  EC1B  F03A         	call	_GPIO_PinWrite
  2618                           
  2619                           ;lcd.c: 965: GPIO_PinWrite(LCDConfig.D1,(((dataByte)&(((uint8_t)1<<(1))))!=0u));
  2620  006C66  A20B               	btfss	lcd_SendLowerNibble@dataByte,1,c
  2621  006C68  D002               	goto	u2070
  2622  006C6A  0E01               	movlw	1
  2623  006C6C  D001               	goto	u2080
  2624  006C6E                     u2070:
  2625  006C6E  0E00               	movlw	0
  2626  006C70                     u2080:
  2627  006C70  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2628  006C72  5053               	movf	_LCDConfig+7,w,c
  2629  006C74  EC1B  F03A         	call	_GPIO_PinWrite
  2630                           
  2631                           ;lcd.c: 966: GPIO_PinWrite(LCDConfig.D2,(((dataByte)&(((uint8_t)1<<(2))))!=0u));
  2632  006C78  A40B               	btfss	lcd_SendLowerNibble@dataByte,2,c
  2633  006C7A  D002               	goto	u2090
  2634  006C7C  0E01               	movlw	1
  2635  006C7E  D001               	goto	u2100
  2636  006C80                     u2090:
  2637  006C80  0E00               	movlw	0
  2638  006C82                     u2100:
  2639  006C82  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2640  006C84  5054               	movf	_LCDConfig+8,w,c
  2641  006C86  EC1B  F03A         	call	_GPIO_PinWrite
  2642                           
  2643                           ;lcd.c: 967: GPIO_PinWrite(LCDConfig.D3,(((dataByte)&(((uint8_t)1<<(3))))!=0u));
  2644  006C8A  A60B               	btfss	lcd_SendLowerNibble@dataByte,3,c
  2645  006C8C  D002               	goto	u2110
  2646  006C8E  0E01               	movlw	1
  2647  006C90  D001               	goto	u2120
  2648  006C92                     u2110:
  2649  006C92  0E00               	movlw	0
  2650  006C94                     u2120:
  2651  006C94  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2652  006C96  5055               	movf	_LCDConfig+9,w,c
  2653  006C98  EC1B  F03A         	call	_GPIO_PinWrite
  2654  006C9C  0012               	return		;funcret
  2655  006C9E                     __end_of_lcd_SendLowerNibble:
  2656                           	opt stack 0
  2657                           tblptru	equ	0xFF8
  2658                           tblptrh	equ	0xFF7
  2659                           tblptrl	equ	0xFF6
  2660                           tablat	equ	0xFF5
  2661                           prodh	equ	0xFF4
  2662                           prodl	equ	0xFF3
  2663                           postinc0	equ	0xFEE
  2664                           wreg	equ	0xFE8
  2665                           postdec1	equ	0xFE5
  2666                           fsr1l	equ	0xFE1
  2667                           indf2	equ	0xFDF
  2668                           fsr2h	equ	0xFDA
  2669                           fsr2l	equ	0xFD9
  2670                           status	equ	0xFD8
  2671                           
  2672 ;; *************** function _lcd_SendHigherNibble *****************
  2673 ;; Defined at:
  2674 ;;		line 943 in file "../00-libfiles/lcd.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  dataByte        1    wreg     unsigned char 
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  dataByte        1   10[COMRAM] unsigned char 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2, status,0, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2688 ;;      Params:         0       0       0       0       0       0       0
  2689 ;;      Locals:         1       0       0       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0
  2691 ;;      Totals:         1       0       0       0       0       0       0
  2692 ;;Total ram usage:        1 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    1
  2695 ;; This function calls:
  2696 ;;		_GPIO_PinWrite
  2697 ;; This function is called by:
  2698 ;;		_LCD_CmdWrite
  2699 ;;		_lcd_DataWrite
  2700 ;;		_lcd_Reset
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text16
  2705  006C06                     __ptext16:
  2706                           	opt stack 0
  2707  006C06                     _lcd_SendHigherNibble:
  2708                           	opt stack 26
  2709                           
  2710                           ;incstack = 0
  2711                           ;lcd_SendHigherNibble@dataByte stored from wreg
  2712  006C06  6E0B               	movwf	lcd_SendHigherNibble@dataByte,c
  2713                           
  2714                           ;lcd.c: 945: GPIO_PinWrite(LCDConfig.D4,(((dataByte)&(((uint8_t)1<<(4))))!=0u));
  2715  006C08  A80B               	btfss	lcd_SendHigherNibble@dataByte,4,c
  2716  006C0A  D002               	goto	u2130
  2717  006C0C  0E01               	movlw	1
  2718  006C0E  D001               	goto	u2140
  2719  006C10                     u2130:
  2720  006C10  0E00               	movlw	0
  2721  006C12                     u2140:
  2722  006C12  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2723  006C14  5056               	movf	_LCDConfig+10,w,c
  2724  006C16  EC1B  F03A         	call	_GPIO_PinWrite
  2725                           
  2726                           ;lcd.c: 946: GPIO_PinWrite(LCDConfig.D5,(((dataByte)&(((uint8_t)1<<(5))))!=0u));
  2727  006C1A  AA0B               	btfss	lcd_SendHigherNibble@dataByte,5,c
  2728  006C1C  D002               	goto	u2150
  2729  006C1E  0E01               	movlw	1
  2730  006C20  D001               	goto	u2160
  2731  006C22                     u2150:
  2732  006C22  0E00               	movlw	0
  2733  006C24                     u2160:
  2734  006C24  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2735  006C26  5057               	movf	_LCDConfig+11,w,c
  2736  006C28  EC1B  F03A         	call	_GPIO_PinWrite
  2737                           
  2738                           ;lcd.c: 947: GPIO_PinWrite(LCDConfig.D6,(((dataByte)&(((uint8_t)1<<(6))))!=0u));
  2739  006C2C  AC0B               	btfss	lcd_SendHigherNibble@dataByte,6,c
  2740  006C2E  D002               	goto	u2170
  2741  006C30  0E01               	movlw	1
  2742  006C32  D001               	goto	u2180
  2743  006C34                     u2170:
  2744  006C34  0E00               	movlw	0
  2745  006C36                     u2180:
  2746  006C36  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2747  006C38  5058               	movf	_LCDConfig+12,w,c
  2748  006C3A  EC1B  F03A         	call	_GPIO_PinWrite
  2749                           
  2750                           ;lcd.c: 948: GPIO_PinWrite(LCDConfig.D7,(((dataByte)&(((uint8_t)1<<(7))))!=0u));
  2751  006C3E  AE0B               	btfss	lcd_SendHigherNibble@dataByte,7,c
  2752  006C40  D002               	goto	u2190
  2753  006C42  0E01               	movlw	1
  2754  006C44  D001               	goto	u2200
  2755  006C46                     u2190:
  2756  006C46  0E00               	movlw	0
  2757  006C48                     u2200:
  2758  006C48  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2759  006C4A  5059               	movf	_LCDConfig+13,w,c
  2760  006C4C  EC1B  F03A         	call	_GPIO_PinWrite
  2761  006C50  0012               	return		;funcret
  2762  006C52                     __end_of_lcd_SendHigherNibble:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           prodh	equ	0xFF4
  2769                           prodl	equ	0xFF3
  2770                           postinc0	equ	0xFEE
  2771                           wreg	equ	0xFE8
  2772                           postdec1	equ	0xFE5
  2773                           fsr1l	equ	0xFE1
  2774                           indf2	equ	0xFDF
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _lcd_SendCmdSignals *****************
  2780 ;; Defined at:
  2781 ;;		line 981 in file "../00-libfiles/lcd.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2795 ;;      Params:         0       0       0       0       0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0
  2797 ;;      Temps:          0       0       0       0       0       0       0
  2798 ;;      Totals:         0       0       0       0       0       0       0
  2799 ;;Total ram usage:        0 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    1
  2802 ;; This function calls:
  2803 ;;		_DELAY_us
  2804 ;;		_GPIO_PinWrite
  2805 ;; This function is called by:
  2806 ;;		_LCD_CmdWrite
  2807 ;;		_lcd_Reset
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text17
  2812  006B1E                     __ptext17:
  2813                           	opt stack 0
  2814  006B1E                     _lcd_SendCmdSignals:
  2815                           	opt stack 26
  2816                           
  2817                           ;lcd.c: 983: GPIO_PinWrite(LCDConfig.RS,0);
  2818                           
  2819                           ;incstack = 0
  2820  006B1E  0E00               	movlw	0
  2821  006B20  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2822  006B22  504F               	movf	_LCDConfig+3,w,c
  2823  006B24  EC1B  F03A         	call	_GPIO_PinWrite
  2824                           
  2825                           ;lcd.c: 984: GPIO_PinWrite(LCDConfig.RW,0);
  2826  006B28  0E00               	movlw	0
  2827  006B2A  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2828  006B2C  5050               	movf	_LCDConfig+4,w,c
  2829  006B2E  EC1B  F03A         	call	_GPIO_PinWrite
  2830                           
  2831                           ;lcd.c: 985: GPIO_PinWrite(LCDConfig.EN,1);
  2832  006B32  0E01               	movlw	1
  2833  006B34  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2834  006B36  5051               	movf	_LCDConfig+5,w,c
  2835  006B38  EC1B  F03A         	call	_GPIO_PinWrite
  2836                           
  2837                           ;lcd.c: 986: DELAY_us(10);
  2838  006B3C  0E00               	movlw	0
  2839  006B3E  6E02               	movwf	DELAY_us@us_count+1,c
  2840  006B40  0E0A               	movlw	10
  2841  006B42  6E01               	movwf	DELAY_us@us_count,c
  2842  006B44  EC8C  F034         	call	_DELAY_us	;wreg free
  2843                           
  2844                           ;lcd.c: 987: GPIO_PinWrite(LCDConfig.EN,0);
  2845  006B48  0E00               	movlw	0
  2846  006B4A  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2847  006B4C  5051               	movf	_LCDConfig+5,w,c
  2848  006B4E  EC1B  F03A         	call	_GPIO_PinWrite
  2849  006B52  0012               	return		;funcret
  2850  006B54                     __end_of_lcd_SendCmdSignals:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postdec1	equ	0xFE5
  2861                           fsr1l	equ	0xFE1
  2862                           indf2	equ	0xFDF
  2863                           fsr2h	equ	0xFDA
  2864                           fsr2l	equ	0xFD9
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function _lcd_BusyCheck *****************
  2868 ;; Defined at:
  2869 ;;		line 860 in file "../00-libfiles/lcd.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;		None
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  busyflag        1   10[COMRAM] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2883 ;;      Params:         0       0       0       0       0       0       0
  2884 ;;      Locals:         1       0       0       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0       0       0
  2886 ;;      Totals:         1       0       0       0       0       0       0
  2887 ;;Total ram usage:        1 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    2
  2890 ;; This function calls:
  2891 ;;		_DELAY_ms
  2892 ;;		_DELAY_us
  2893 ;;		_GPIO_PinDirection
  2894 ;;		_GPIO_PinRead
  2895 ;;		_GPIO_PinWrite
  2896 ;; This function is called by:
  2897 ;;		_LCD_CmdWrite
  2898 ;;		_lcd_DataWrite
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text18
  2903  006FAE                     __ptext18:
  2904                           	opt stack 0
  2905  006FAE                     _lcd_BusyCheck:
  2906                           	opt stack 25
  2907                           
  2908                           ;lcd.c: 862: uint8_t busyflag;
  2909                           ;lcd.c: 864: if(LCDConfig.RW != P_NC)
  2910                           
  2911                           ;incstack = 0
  2912  006FAE  2850               	incf	_LCDConfig+4,w,c
  2913  006FB0  B4D8               	btfsc	status,2,c
  2914  006FB2  D04C               	goto	l2212
  2915                           
  2916                           ;lcd.c: 865: {
  2917                           ;lcd.c: 866: GPIO_PinDirection(LCDConfig.D7,0x01u);
  2918  006FB4  0E01               	movlw	1
  2919  006FB6  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  2920  006FB8  5059               	movf	_LCDConfig+13,w,c
  2921  006FBA  EC6B  F039         	call	_GPIO_PinDirection
  2922                           
  2923                           ;lcd.c: 867: GPIO_PinWrite(LCDConfig.RS,0);
  2924  006FBE  0E00               	movlw	0
  2925  006FC0  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2926  006FC2  504F               	movf	_LCDConfig+3,w,c
  2927  006FC4  EC1B  F03A         	call	_GPIO_PinWrite
  2928                           
  2929                           ;lcd.c: 868: GPIO_PinWrite(LCDConfig.RW,1);
  2930  006FC8  0E01               	movlw	1
  2931  006FCA  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2932  006FCC  5050               	movf	_LCDConfig+4,w,c
  2933  006FCE  EC1B  F03A         	call	_GPIO_PinWrite
  2934  006FD2                     l455:
  2935                           
  2936                           ;lcd.c: 870: {
  2937                           ;lcd.c: 872: GPIO_PinWrite(LCDConfig.EN,0);
  2938  006FD2  0E00               	movlw	0
  2939  006FD4  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2940  006FD6  5051               	movf	_LCDConfig+5,w,c
  2941  006FD8  EC1B  F03A         	call	_GPIO_PinWrite
  2942                           
  2943                           ;lcd.c: 873: DELAY_us(10);
  2944  006FDC  0E00               	movlw	0
  2945  006FDE  6E02               	movwf	DELAY_us@us_count+1,c
  2946  006FE0  0E0A               	movlw	10
  2947  006FE2  6E01               	movwf	DELAY_us@us_count,c
  2948  006FE4  EC8C  F034         	call	_DELAY_us	;wreg free
  2949                           
  2950                           ;lcd.c: 874: GPIO_PinWrite(LCDConfig.EN,1);
  2951  006FE8  0E01               	movlw	1
  2952  006FEA  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2953  006FEC  5051               	movf	_LCDConfig+5,w,c
  2954  006FEE  EC1B  F03A         	call	_GPIO_PinWrite
  2955                           
  2956                           ;lcd.c: 875: DELAY_us(10);
  2957  006FF2  0E00               	movlw	0
  2958  006FF4  6E02               	movwf	DELAY_us@us_count+1,c
  2959  006FF6  0E0A               	movlw	10
  2960  006FF8  6E01               	movwf	DELAY_us@us_count,c
  2961  006FFA  EC8C  F034         	call	_DELAY_us	;wreg free
  2962                           
  2963                           ;lcd.c: 876: busyflag = GPIO_PinRead(LCDConfig.D7);
  2964  006FFE  5059               	movf	_LCDConfig+13,w,c
  2965  007000  EC8D  F038         	call	_GPIO_PinRead
  2966  007004  6E0B               	movwf	lcd_BusyCheck@busyflag,c
  2967                           
  2968                           ;lcd.c: 879: if(LCDConfig.v_LcdMode_U8 == 4)
  2969  007006  0E04               	movlw	4
  2970  007008  184E               	xorwf	_LCDConfig+2,w,c
  2971  00700A  A4D8               	btfss	status,2,c
  2972  00700C  D016               	goto	l2208
  2973                           
  2974                           ;lcd.c: 880: {
  2975                           ;lcd.c: 882: GPIO_PinWrite(LCDConfig.EN,0);
  2976  00700E  0E00               	movlw	0
  2977  007010  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2978  007012  5051               	movf	_LCDConfig+5,w,c
  2979  007014  EC1B  F03A         	call	_GPIO_PinWrite
  2980                           
  2981                           ;lcd.c: 883: DELAY_us(10);
  2982  007018  0E00               	movlw	0
  2983  00701A  6E02               	movwf	DELAY_us@us_count+1,c
  2984  00701C  0E0A               	movlw	10
  2985  00701E  6E01               	movwf	DELAY_us@us_count,c
  2986  007020  EC8C  F034         	call	_DELAY_us	;wreg free
  2987                           
  2988                           ;lcd.c: 884: GPIO_PinWrite(LCDConfig.EN,1);
  2989  007024  0E01               	movlw	1
  2990  007026  6E06               	movwf	GPIO_PinWrite@var_pinValue_u8,c
  2991  007028  5051               	movf	_LCDConfig+5,w,c
  2992  00702A  EC1B  F03A         	call	_GPIO_PinWrite
  2993                           
  2994                           ;lcd.c: 885: DELAY_us(10);
  2995  00702E  0E00               	movlw	0
  2996  007030  6E02               	movwf	DELAY_us@us_count+1,c
  2997  007032  0E0A               	movlw	10
  2998  007034  6E01               	movwf	DELAY_us@us_count,c
  2999  007036  EC8C  F034         	call	_DELAY_us	;wreg free
  3000  00703A                     l2208:
  3001                           
  3002                           ;lcd.c: 886: }
  3003                           ;lcd.c: 887: }while(busyflag!=0);
  3004  00703A  500B               	movf	lcd_BusyCheck@busyflag,w,c
  3005  00703C  A4D8               	btfss	status,2,c
  3006  00703E  D7C9               	goto	l455
  3007                           
  3008                           ;lcd.c: 889: GPIO_PinDirection(LCDConfig.D7,0x00u);
  3009  007040  0E00               	movlw	0
  3010  007042  6E01               	movwf	GPIO_PinDirection@var_pinDirn_u8,c
  3011  007044  5059               	movf	_LCDConfig+13,w,c
  3012  007046  EC6B  F039         	call	_GPIO_PinDirection
  3013                           
  3014                           ;lcd.c: 890: }
  3015  00704A  0012               	return	
  3016  00704C                     l2212:
  3017                           
  3018                           ;lcd.c: 891: else
  3019                           ;lcd.c: 892: {
  3020                           ;lcd.c: 895: DELAY_ms(1);
  3021  00704C  0E00               	movlw	0
  3022  00704E  6E04               	movwf	DELAY_ms@ms_count+1,c
  3023  007050  0E01               	movlw	1
  3024  007052  6E03               	movwf	DELAY_ms@ms_count,c
  3025  007054  EC95  F034         	call	_DELAY_ms	;wreg free
  3026  007058  0012               	return	
  3027  00705A                     __end_of_lcd_BusyCheck:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           postinc0	equ	0xFEE
  3036                           wreg	equ	0xFE8
  3037                           postdec1	equ	0xFE5
  3038                           fsr1l	equ	0xFE1
  3039                           indf2	equ	0xFDF
  3040                           fsr2h	equ	0xFDA
  3041                           fsr2l	equ	0xFD9
  3042                           status	equ	0xFD8
  3043                           
  3044 ;; *************** function _GPIO_PinWrite *****************
  3045 ;; Defined at:
  3046 ;;		line 127 in file "../00-libfiles/gpio.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  enm_pinNumbe    1    wreg     enum E3211
  3049 ;;  var_pinValue    1    5[COMRAM] unsigned char 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  enm_pinNumbe    1    9[COMRAM] enum E3211
  3052 ;;  var_portNumb    1    8[COMRAM] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3062 ;;      Params:         1       0       0       0       0       0       0
  3063 ;;      Locals:         2       0       0       0       0       0       0
  3064 ;;      Temps:          2       0       0       0       0       0       0
  3065 ;;      Totals:         5       0       0       0       0       0       0
  3066 ;;Total ram usage:        5 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_main
  3072 ;;		_switch_Test
  3073 ;;		_lcd_BusyCheck
  3074 ;;		_lcd_SendHigherNibble
  3075 ;;		_lcd_SendLowerNibble
  3076 ;;		_lcd_SendCmdSignals
  3077 ;;		_lcd_SendDataSignals
  3078 ;;		_keypad_WaitForKeyRelease
  3079 ;;		_keypad_WaitForKeyPress
  3080 ;;		_KEYPAD_GetKey
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text19
  3085  007436                     __ptext19:
  3086                           	opt stack 0
  3087  007436                     _GPIO_PinWrite:
  3088                           	opt stack 29
  3089                           
  3090                           ;incstack = 0
  3091                           ;GPIO_PinWrite@enm_pinNumber stored from wreg
  3092  007436  6E0A               	movwf	GPIO_PinWrite@enm_pinNumber,c
  3093                           
  3094                           ;gpio.c: 130: uint8_t var_portNumber_u8;
  3095                           ;gpio.c: 133: var_portNumber_u8 = (enm_pinNumber>>3);
  3096  007438  380A               	swapf	GPIO_PinWrite@enm_pinNumber,w,c
  3097  00743A  46E8               	rlncf	wreg,f,c
  3098  00743C  0B1F               	andlw	31
  3099  00743E  6E09               	movwf	GPIO_PinWrite@var_portNumber_u8,c
  3100                           
  3101                           ;gpio.c: 134: enm_pinNumber = enm_pinNumber & 0x07;
  3102  007440  500A               	movf	GPIO_PinWrite@enm_pinNumber,w,c
  3103  007442  0B07               	andlw	7
  3104  007444  6E0A               	movwf	GPIO_PinWrite@enm_pinNumber,c
  3105                           
  3106                           ;gpio.c: 138: switch(var_portNumber_u8)
  3107  007446  D096               	goto	l2190
  3108  007448                     l2158:
  3109                           
  3110                           ;gpio.c: 142: ((var_pinValue_u8)? ((LATA) |= ((uint8_t)1<<(enm_pinNumber))): ((LATA) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3111  007448  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3112  00744A  B4D8               	btfsc	status,2,c
  3113  00744C  D00D               	goto	l2162
  3114  00744E  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3115  007452  0E01               	movlw	1
  3116  007454  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3117  007456  2A07               	incf	??_GPIO_PinWrite,f,c
  3118  007458  D002               	goto	u1874
  3119  00745A                     u1875:
  3120  00745A  90D8               	bcf	status,0,c
  3121  00745C  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3122  00745E                     u1874:
  3123  00745E  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3124  007460  D7FC               	goto	u1875
  3125  007462  5008               	movf	??_GPIO_PinWrite+1,w,c
  3126  007464  1289               	iorwf	3977,f,c	;volatile
  3127  007466  0012               	return	
  3128  007468                     l2162:
  3129  007468  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3130  00746C  0E01               	movlw	1
  3131  00746E  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3132  007470  2A07               	incf	??_GPIO_PinWrite,f,c
  3133  007472  D002               	goto	u1884
  3134  007474                     u1885:
  3135  007474  90D8               	bcf	status,0,c
  3136  007476  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3137  007478                     u1884:
  3138  007478  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3139  00747A  D7FC               	goto	u1885
  3140  00747C  5008               	movf	??_GPIO_PinWrite+1,w,c
  3141  00747E  0AFF               	xorlw	255
  3142  007480  1689               	andwf	3977,f,c	;volatile
  3143                           
  3144                           ;gpio.c: 143: break;
  3145  007482  0012               	return	
  3146  007484                     l2164:
  3147                           
  3148                           ;gpio.c: 148: ((var_pinValue_u8)? ((LATB) |= ((uint8_t)1<<(enm_pinNumber))): ((LATB) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3149  007484  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3150  007486  B4D8               	btfsc	status,2,c
  3151  007488  D00D               	goto	l2168
  3152  00748A  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3153  00748E  0E01               	movlw	1
  3154  007490  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3155  007492  2A07               	incf	??_GPIO_PinWrite,f,c
  3156  007494  D002               	goto	u1904
  3157  007496                     u1905:
  3158  007496  90D8               	bcf	status,0,c
  3159  007498  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3160  00749A                     u1904:
  3161  00749A  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3162  00749C  D7FC               	goto	u1905
  3163  00749E  5008               	movf	??_GPIO_PinWrite+1,w,c
  3164  0074A0  128A               	iorwf	3978,f,c	;volatile
  3165  0074A2  0012               	return	
  3166  0074A4                     l2168:
  3167  0074A4  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3168  0074A8  0E01               	movlw	1
  3169  0074AA  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3170  0074AC  2A07               	incf	??_GPIO_PinWrite,f,c
  3171  0074AE  D002               	goto	u1914
  3172  0074B0                     u1915:
  3173  0074B0  90D8               	bcf	status,0,c
  3174  0074B2  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3175  0074B4                     u1914:
  3176  0074B4  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3177  0074B6  D7FC               	goto	u1915
  3178  0074B8  5008               	movf	??_GPIO_PinWrite+1,w,c
  3179  0074BA  0AFF               	xorlw	255
  3180  0074BC  168A               	andwf	3978,f,c	;volatile
  3181                           
  3182                           ;gpio.c: 149: break;
  3183  0074BE  0012               	return	
  3184  0074C0                     l2170:
  3185                           
  3186                           ;gpio.c: 154: ((var_pinValue_u8)? ((LATC) |= ((uint8_t)1<<(enm_pinNumber))): ((LATC) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3187  0074C0  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3188  0074C2  B4D8               	btfsc	status,2,c
  3189  0074C4  D00D               	goto	l2174
  3190  0074C6  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3191  0074CA  0E01               	movlw	1
  3192  0074CC  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3193  0074CE  2A07               	incf	??_GPIO_PinWrite,f,c
  3194  0074D0  D002               	goto	u1934
  3195  0074D2                     u1935:
  3196  0074D2  90D8               	bcf	status,0,c
  3197  0074D4  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3198  0074D6                     u1934:
  3199  0074D6  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3200  0074D8  D7FC               	goto	u1935
  3201  0074DA  5008               	movf	??_GPIO_PinWrite+1,w,c
  3202  0074DC  128B               	iorwf	3979,f,c	;volatile
  3203  0074DE  0012               	return	
  3204  0074E0                     l2174:
  3205  0074E0  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3206  0074E4  0E01               	movlw	1
  3207  0074E6  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3208  0074E8  2A07               	incf	??_GPIO_PinWrite,f,c
  3209  0074EA  D002               	goto	u1944
  3210  0074EC                     u1945:
  3211  0074EC  90D8               	bcf	status,0,c
  3212  0074EE  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3213  0074F0                     u1944:
  3214  0074F0  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3215  0074F2  D7FC               	goto	u1945
  3216  0074F4  5008               	movf	??_GPIO_PinWrite+1,w,c
  3217  0074F6  0AFF               	xorlw	255
  3218  0074F8  168B               	andwf	3979,f,c	;volatile
  3219                           
  3220                           ;gpio.c: 155: break;
  3221  0074FA  0012               	return	
  3222  0074FC                     l2176:
  3223                           
  3224                           ;gpio.c: 160: ((var_pinValue_u8)? ((LATD) |= ((uint8_t)1<<(enm_pinNumber))): ((LATD) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3225  0074FC  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3226  0074FE  B4D8               	btfsc	status,2,c
  3227  007500  D00D               	goto	l2180
  3228  007502  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3229  007506  0E01               	movlw	1
  3230  007508  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3231  00750A  2A07               	incf	??_GPIO_PinWrite,f,c
  3232  00750C  D002               	goto	u1964
  3233  00750E                     u1965:
  3234  00750E  90D8               	bcf	status,0,c
  3235  007510  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3236  007512                     u1964:
  3237  007512  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3238  007514  D7FC               	goto	u1965
  3239  007516  5008               	movf	??_GPIO_PinWrite+1,w,c
  3240  007518  128C               	iorwf	3980,f,c	;volatile
  3241  00751A  0012               	return	
  3242  00751C                     l2180:
  3243  00751C  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3244  007520  0E01               	movlw	1
  3245  007522  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3246  007524  2A07               	incf	??_GPIO_PinWrite,f,c
  3247  007526  D002               	goto	u1974
  3248  007528                     u1975:
  3249  007528  90D8               	bcf	status,0,c
  3250  00752A  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3251  00752C                     u1974:
  3252  00752C  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3253  00752E  D7FC               	goto	u1975
  3254  007530  5008               	movf	??_GPIO_PinWrite+1,w,c
  3255  007532  0AFF               	xorlw	255
  3256  007534  168C               	andwf	3980,f,c	;volatile
  3257                           
  3258                           ;gpio.c: 161: break;
  3259  007536  0012               	return	
  3260  007538                     l2182:
  3261                           
  3262                           ;gpio.c: 166: ((var_pinValue_u8)? ((LATE) |= ((uint8_t)1<<(enm_pinNumber))): ((LATE) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3263  007538  5006               	movf	GPIO_PinWrite@var_pinValue_u8,w,c
  3264  00753A  B4D8               	btfsc	status,2,c
  3265  00753C  D00D               	goto	l2186
  3266  00753E  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3267  007542  0E01               	movlw	1
  3268  007544  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3269  007546  2A07               	incf	??_GPIO_PinWrite,f,c
  3270  007548  D002               	goto	u1994
  3271  00754A                     u1995:
  3272  00754A  90D8               	bcf	status,0,c
  3273  00754C  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3274  00754E                     u1994:
  3275  00754E  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3276  007550  D7FC               	goto	u1995
  3277  007552  5008               	movf	??_GPIO_PinWrite+1,w,c
  3278  007554  128D               	iorwf	3981,f,c	;volatile
  3279  007556  0012               	return	
  3280  007558                     l2186:
  3281  007558  C00A  F007         	movff	GPIO_PinWrite@enm_pinNumber,??_GPIO_PinWrite
  3282  00755C  0E01               	movlw	1
  3283  00755E  6E08               	movwf	(??_GPIO_PinWrite+1)& (0+255),c
  3284  007560  2A07               	incf	??_GPIO_PinWrite,f,c
  3285  007562  D002               	goto	u2004
  3286  007564                     u2005:
  3287  007564  90D8               	bcf	status,0,c
  3288  007566  3608               	rlcf	??_GPIO_PinWrite+1,f,c
  3289  007568                     u2004:
  3290  007568  2E07               	decfsz	??_GPIO_PinWrite,f,c
  3291  00756A  D7FC               	goto	u2005
  3292  00756C  5008               	movf	??_GPIO_PinWrite+1,w,c
  3293  00756E  0AFF               	xorlw	255
  3294  007570  168D               	andwf	3981,f,c	;volatile
  3295                           
  3296                           ;gpio.c: 169: }
  3297                           
  3298                           ;gpio.c: 167: break;
  3299  007572  0012               	return	
  3300  007574                     l2190:
  3301  007574  5009               	movf	GPIO_PinWrite@var_portNumber_u8,w,c
  3302                           
  3303                           ; Switch size 1, requested type "space"
  3304                           ; Number of cases is 5, Range of values is 0 to 4
  3305                           ; switch strategies available:
  3306                           ; Name         Instructions Cycles
  3307                           ; simple_byte           16     9 (average)
  3308                           ;	Chosen strategy is simple_byte
  3309  007576  0A00               	xorlw	0	; case 0
  3310  007578  B4D8               	btfsc	status,2,c
  3311  00757A  D766               	goto	l2158
  3312  00757C  0A01               	xorlw	1	; case 1
  3313  00757E  B4D8               	btfsc	status,2,c
  3314  007580  D781               	goto	l2164
  3315  007582  0A03               	xorlw	3	; case 2
  3316  007584  B4D8               	btfsc	status,2,c
  3317  007586  D79C               	goto	l2170
  3318  007588  0A01               	xorlw	1	; case 3
  3319  00758A  B4D8               	btfsc	status,2,c
  3320  00758C  D7B7               	goto	l2176
  3321  00758E  0A07               	xorlw	7	; case 4
  3322  007590  A4D8               	btfss	status,2,c
  3323  007592  0012               	return	
  3324  007594  D7D1               	goto	l2182
  3325  007596                     __end_of_GPIO_PinWrite:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           postinc0	equ	0xFEE
  3334                           wreg	equ	0xFE8
  3335                           postdec1	equ	0xFE5
  3336                           fsr1l	equ	0xFE1
  3337                           indf2	equ	0xFDF
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function _GPIO_PinRead *****************
  3343 ;; Defined at:
  3344 ;;		line 192 in file "../00-libfiles/gpio.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  enm_pinNumbe    1    wreg     enum E3211
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  3349 ;;  returnStatus    1    3[COMRAM] unsigned char 
  3350 ;;  var_portNumb    1    2[COMRAM] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      unsigned char 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3360 ;;      Params:         0       0       0       0       0       0       0
  3361 ;;      Locals:         3       0       0       0       0       0       0
  3362 ;;      Temps:          2       0       0       0       0       0       0
  3363 ;;      Totals:         5       0       0       0       0       0       0
  3364 ;;Total ram usage:        5 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; This function calls:
  3367 ;;		Nothing
  3368 ;; This function is called by:
  3369 ;;		_main
  3370 ;;		_switch_Test
  3371 ;;		_lcd_BusyCheck
  3372 ;;		_keypad_WaitForKeyRelease
  3373 ;;		_keypad_WaitForKeyPress
  3374 ;;		_KEYPAD_GetKey
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text20
  3379  00711A                     __ptext20:
  3380                           	opt stack 0
  3381  00711A                     _GPIO_PinRead:
  3382                           	opt stack 29
  3383                           
  3384                           ;incstack = 0
  3385                           ;GPIO_PinRead@enm_pinNumber stored from wreg
  3386  00711A  6E05               	movwf	GPIO_PinRead@enm_pinNumber,c
  3387                           
  3388                           ;gpio.c: 194: uint8_t var_portNumber_u8;
  3389                           ;gpio.c: 195: uint8_t returnStatus = 0;
  3390  00711C  0E00               	movlw	0
  3391  00711E  6E04               	movwf	GPIO_PinRead@returnStatus,c
  3392                           
  3393                           ;gpio.c: 197: var_portNumber_u8 = (enm_pinNumber>>3);
  3394  007120  3805               	swapf	GPIO_PinRead@enm_pinNumber,w,c
  3395  007122  46E8               	rlncf	wreg,f,c
  3396  007124  0B1F               	andlw	31
  3397  007126  6E03               	movwf	GPIO_PinRead@var_portNumber_u8,c
  3398                           
  3399                           ;gpio.c: 198: enm_pinNumber = enm_pinNumber & 0x07;
  3400  007128  5005               	movf	GPIO_PinRead@enm_pinNumber,w,c
  3401  00712A  0B07               	andlw	7
  3402  00712C  6E05               	movwf	GPIO_PinRead@enm_pinNumber,c
  3403                           
  3404                           ;gpio.c: 201: switch(var_portNumber_u8)
  3405  00712E  D04C               	goto	l1270
  3406  007130                     l1258:
  3407                           
  3408                           ;gpio.c: 205: returnStatus = (((PORTA)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3409  007130  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3410  007134  0E01               	movlw	1
  3411  007136  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3412  007138  2A01               	incf	??_GPIO_PinRead,f,c
  3413  00713A  D002               	goto	u174
  3414  00713C                     u175:
  3415  00713C  90D8               	bcf	status,0,c
  3416  00713E  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3417  007140                     u174:
  3418  007140  2E01               	decfsz	??_GPIO_PinRead,f,c
  3419  007142  D7FC               	goto	u175
  3420  007144  5002               	movf	??_GPIO_PinRead+1,w,c
  3421  007146  1480               	andwf	3968,w,c	;volatile
  3422  007148  0900               	iorlw	0
  3423  00714A  B4D8               	btfsc	status,2,c
  3424  00714C  D03B               	goto	u300
  3425  00714E  D029               	goto	u271
  3426  007150                     u190:
  3427  007150  6E04               	movwf	GPIO_PinRead@returnStatus,c
  3428                           
  3429                           ;gpio.c: 206: break;
  3430  007152  D04A               	goto	l1272
  3431  007154                     l1260:
  3432                           
  3433                           ;gpio.c: 210: returnStatus = (((PORTB)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3434  007154  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3435  007158  0E01               	movlw	1
  3436  00715A  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3437  00715C  2A01               	incf	??_GPIO_PinRead,f,c
  3438  00715E  D002               	goto	u204
  3439  007160                     u205:
  3440  007160  90D8               	bcf	status,0,c
  3441  007162  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3442  007164                     u204:
  3443  007164  2E01               	decfsz	??_GPIO_PinRead,f,c
  3444  007166  D7FC               	goto	u205
  3445  007168  5002               	movf	??_GPIO_PinRead+1,w,c
  3446  00716A  1481               	andwf	3969,w,c	;volatile
  3447  00716C  D028               	goto	L3
  3448  00716E                     l1262:
  3449                           
  3450                           ;gpio.c: 215: returnStatus = (((PORTC)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3451  00716E  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3452  007172  0E01               	movlw	1
  3453  007174  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3454  007176  2A01               	incf	??_GPIO_PinRead,f,c
  3455  007178  D002               	goto	u234
  3456  00717A                     u235:
  3457  00717A  90D8               	bcf	status,0,c
  3458  00717C  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3459  00717E                     u234:
  3460  00717E  2E01               	decfsz	??_GPIO_PinRead,f,c
  3461  007180  D7FC               	goto	u235
  3462  007182  5002               	movf	??_GPIO_PinRead+1,w,c
  3463  007184  1482               	andwf	3970,w,c	;volatile
  3464  007186  D01B               	goto	L3
  3465  007188                     l1264:
  3466                           
  3467                           ;gpio.c: 221: returnStatus = (((PORTD)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3468  007188  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3469  00718C  0E01               	movlw	1
  3470  00718E  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3471  007190  2A01               	incf	??_GPIO_PinRead,f,c
  3472  007192  D002               	goto	u264
  3473  007194                     u265:
  3474  007194  90D8               	bcf	status,0,c
  3475  007196  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3476  007198                     u264:
  3477  007198  2E01               	decfsz	??_GPIO_PinRead,f,c
  3478  00719A  D7FC               	goto	u265
  3479  00719C  5002               	movf	??_GPIO_PinRead+1,w,c
  3480  00719E  1483               	andwf	3971,w,c	;volatile
  3481  0071A0  D00E               	goto	L3
  3482  0071A2                     u271:
  3483  0071A2  0E01               	movlw	1
  3484  0071A4  D7D5               	goto	u190
  3485  0071A6                     l1266:
  3486                           
  3487                           ;gpio.c: 227: returnStatus = (((PORTE)&(((uint8_t)1<<(enm_pinNumber))))!=0u);
  3488  0071A6  C005  F001         	movff	GPIO_PinRead@enm_pinNumber,??_GPIO_PinRead
  3489  0071AA  0E01               	movlw	1
  3490  0071AC  6E02               	movwf	(??_GPIO_PinRead+1)& (0+255),c
  3491  0071AE  2A01               	incf	??_GPIO_PinRead,f,c
  3492  0071B0  D002               	goto	u294
  3493  0071B2                     u295:
  3494  0071B2  90D8               	bcf	status,0,c
  3495  0071B4  3602               	rlcf	??_GPIO_PinRead+1,f,c
  3496  0071B6                     u294:
  3497  0071B6  2E01               	decfsz	??_GPIO_PinRead,f,c
  3498  0071B8  D7FC               	goto	u295
  3499  0071BA  5002               	movf	??_GPIO_PinRead+1,w,c
  3500  0071BC  1484               	andwf	3972,w,c	;volatile
  3501  0071BE                     L3:
  3502  0071BE  0900               	iorlw	0
  3503  0071C0  A4D8               	btfss	status,2,c
  3504  0071C2  D7EF               	goto	u271
  3505  0071C4                     u300:
  3506  0071C4  0E00               	movlw	0
  3507  0071C6  D7C4               	goto	u190
  3508  0071C8                     l1270:
  3509  0071C8  5003               	movf	GPIO_PinRead@var_portNumber_u8,w,c
  3510                           
  3511                           ; Switch size 1, requested type "space"
  3512                           ; Number of cases is 5, Range of values is 0 to 4
  3513                           ; switch strategies available:
  3514                           ; Name         Instructions Cycles
  3515                           ; simple_byte           16     9 (average)
  3516                           ;	Chosen strategy is simple_byte
  3517  0071CA  0A00               	xorlw	0	; case 0
  3518  0071CC  B4D8               	btfsc	status,2,c
  3519  0071CE  D7B0               	goto	l1258
  3520  0071D0  0A01               	xorlw	1	; case 1
  3521  0071D2  B4D8               	btfsc	status,2,c
  3522  0071D4  D7BF               	goto	l1260
  3523  0071D6  0A03               	xorlw	3	; case 2
  3524  0071D8  B4D8               	btfsc	status,2,c
  3525  0071DA  D7C9               	goto	l1262
  3526  0071DC  0A01               	xorlw	1	; case 3
  3527  0071DE  B4D8               	btfsc	status,2,c
  3528  0071E0  D7D3               	goto	l1264
  3529  0071E2  0A07               	xorlw	7	; case 4
  3530  0071E4  B4D8               	btfsc	status,2,c
  3531  0071E6  D7DF               	goto	l1266
  3532  0071E8                     l1272:
  3533                           
  3534                           ;gpio.c: 230: return returnStatus;
  3535  0071E8  5004               	movf	GPIO_PinRead@returnStatus,w,c
  3536  0071EA  0012               	return	
  3537  0071EC                     __end_of_GPIO_PinRead:
  3538                           	opt stack 0
  3539                           tblptru	equ	0xFF8
  3540                           tblptrh	equ	0xFF7
  3541                           tblptrl	equ	0xFF6
  3542                           tablat	equ	0xFF5
  3543                           prodh	equ	0xFF4
  3544                           prodl	equ	0xFF3
  3545                           postinc0	equ	0xFEE
  3546                           wreg	equ	0xFE8
  3547                           postdec1	equ	0xFE5
  3548                           fsr1l	equ	0xFE1
  3549                           indf2	equ	0xFDF
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _GPIO_PinDirection *****************
  3555 ;; Defined at:
  3556 ;;		line 60 in file "../00-libfiles/gpio.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  enm_pinNumbe    1    wreg     enum E3211
  3559 ;;  var_pinDirn_    1    0[COMRAM] unsigned char 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  enm_pinNumbe    1    4[COMRAM] enum E3211
  3562 ;;  var_portNumb    1    3[COMRAM] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         1       0       0       0       0       0       0
  3573 ;;      Locals:         2       0       0       0       0       0       0
  3574 ;;      Temps:          2       0       0       0       0       0       0
  3575 ;;      Totals:         5       0       0       0       0       0       0
  3576 ;;Total ram usage:        5 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_main
  3582 ;;		_switch_Test
  3583 ;;		_LCD_SetUp
  3584 ;;		_lcd_BusyCheck
  3585 ;;		_KEYPAD_Init
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text21
  3590  0072D6                     __ptext21:
  3591                           	opt stack 0
  3592  0072D6                     _GPIO_PinDirection:
  3593                           	opt stack 29
  3594                           
  3595                           ;incstack = 0
  3596                           ;GPIO_PinDirection@enm_pinNumber stored from wreg
  3597  0072D6  6E05               	movwf	GPIO_PinDirection@enm_pinNumber,c
  3598                           
  3599                           ;gpio.c: 63: uint8_t var_portNumber_u8;
  3600                           ;gpio.c: 66: var_portNumber_u8 = (enm_pinNumber>>3);
  3601  0072D8  3805               	swapf	GPIO_PinDirection@enm_pinNumber,w,c
  3602  0072DA  46E8               	rlncf	wreg,f,c
  3603  0072DC  0B1F               	andlw	31
  3604  0072DE  6E04               	movwf	GPIO_PinDirection@var_portNumber_u8,c
  3605                           
  3606                           ;gpio.c: 67: enm_pinNumber = enm_pinNumber & 0x07;
  3607  0072E0  5005               	movf	GPIO_PinDirection@enm_pinNumber,w,c
  3608  0072E2  0B07               	andlw	7
  3609  0072E4  6E05               	movwf	GPIO_PinDirection@enm_pinNumber,c
  3610                           
  3611                           ;gpio.c: 71: switch(var_portNumber_u8)
  3612  0072E6  D096               	goto	l2154
  3613  0072E8                     l2122:
  3614                           
  3615                           ;gpio.c: 75: ((var_pinDirn_u8)? ((TRISA) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISA) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3616  0072E8  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3617  0072EA  B4D8               	btfsc	status,2,c
  3618  0072EC  D00D               	goto	l2126
  3619  0072EE  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3620  0072F2  0E01               	movlw	1
  3621  0072F4  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3622  0072F6  2A02               	incf	??_GPIO_PinDirection,f,c
  3623  0072F8  D002               	goto	u1724
  3624  0072FA                     u1725:
  3625  0072FA  90D8               	bcf	status,0,c
  3626  0072FC  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3627  0072FE                     u1724:
  3628  0072FE  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3629  007300  D7FC               	goto	u1725
  3630  007302  5003               	movf	??_GPIO_PinDirection+1,w,c
  3631  007304  1292               	iorwf	3986,f,c	;volatile
  3632  007306  0012               	return	
  3633  007308                     l2126:
  3634  007308  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3635  00730C  0E01               	movlw	1
  3636  00730E  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3637  007310  2A02               	incf	??_GPIO_PinDirection,f,c
  3638  007312  D002               	goto	u1734
  3639  007314                     u1735:
  3640  007314  90D8               	bcf	status,0,c
  3641  007316  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3642  007318                     u1734:
  3643  007318  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3644  00731A  D7FC               	goto	u1735
  3645  00731C  5003               	movf	??_GPIO_PinDirection+1,w,c
  3646  00731E  0AFF               	xorlw	255
  3647  007320  1692               	andwf	3986,f,c	;volatile
  3648                           
  3649                           ;gpio.c: 76: break;
  3650  007322  0012               	return	
  3651  007324                     l2128:
  3652                           
  3653                           ;gpio.c: 81: ((var_pinDirn_u8)? ((TRISB) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISB) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3654  007324  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3655  007326  B4D8               	btfsc	status,2,c
  3656  007328  D00D               	goto	l2132
  3657  00732A  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3658  00732E  0E01               	movlw	1
  3659  007330  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3660  007332  2A02               	incf	??_GPIO_PinDirection,f,c
  3661  007334  D002               	goto	u1754
  3662  007336                     u1755:
  3663  007336  90D8               	bcf	status,0,c
  3664  007338  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3665  00733A                     u1754:
  3666  00733A  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3667  00733C  D7FC               	goto	u1755
  3668  00733E  5003               	movf	??_GPIO_PinDirection+1,w,c
  3669  007340  1293               	iorwf	3987,f,c	;volatile
  3670  007342  0012               	return	
  3671  007344                     l2132:
  3672  007344  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3673  007348  0E01               	movlw	1
  3674  00734A  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3675  00734C  2A02               	incf	??_GPIO_PinDirection,f,c
  3676  00734E  D002               	goto	u1764
  3677  007350                     u1765:
  3678  007350  90D8               	bcf	status,0,c
  3679  007352  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3680  007354                     u1764:
  3681  007354  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3682  007356  D7FC               	goto	u1765
  3683  007358  5003               	movf	??_GPIO_PinDirection+1,w,c
  3684  00735A  0AFF               	xorlw	255
  3685  00735C  1693               	andwf	3987,f,c	;volatile
  3686                           
  3687                           ;gpio.c: 82: break;
  3688  00735E  0012               	return	
  3689  007360                     l2134:
  3690                           
  3691                           ;gpio.c: 87: ((var_pinDirn_u8)? ((TRISC) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISC) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3692  007360  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3693  007362  B4D8               	btfsc	status,2,c
  3694  007364  D00D               	goto	l2138
  3695  007366  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3696  00736A  0E01               	movlw	1
  3697  00736C  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3698  00736E  2A02               	incf	??_GPIO_PinDirection,f,c
  3699  007370  D002               	goto	u1784
  3700  007372                     u1785:
  3701  007372  90D8               	bcf	status,0,c
  3702  007374  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3703  007376                     u1784:
  3704  007376  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3705  007378  D7FC               	goto	u1785
  3706  00737A  5003               	movf	??_GPIO_PinDirection+1,w,c
  3707  00737C  1294               	iorwf	3988,f,c	;volatile
  3708  00737E  0012               	return	
  3709  007380                     l2138:
  3710  007380  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3711  007384  0E01               	movlw	1
  3712  007386  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3713  007388  2A02               	incf	??_GPIO_PinDirection,f,c
  3714  00738A  D002               	goto	u1794
  3715  00738C                     u1795:
  3716  00738C  90D8               	bcf	status,0,c
  3717  00738E  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3718  007390                     u1794:
  3719  007390  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3720  007392  D7FC               	goto	u1795
  3721  007394  5003               	movf	??_GPIO_PinDirection+1,w,c
  3722  007396  0AFF               	xorlw	255
  3723  007398  1694               	andwf	3988,f,c	;volatile
  3724                           
  3725                           ;gpio.c: 88: break;
  3726  00739A  0012               	return	
  3727  00739C                     l2140:
  3728                           
  3729                           ;gpio.c: 93: ((var_pinDirn_u8)? ((TRISD) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISD) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3730  00739C  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3731  00739E  B4D8               	btfsc	status,2,c
  3732  0073A0  D00D               	goto	l2144
  3733  0073A2  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3734  0073A6  0E01               	movlw	1
  3735  0073A8  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3736  0073AA  2A02               	incf	??_GPIO_PinDirection,f,c
  3737  0073AC  D002               	goto	u1814
  3738  0073AE                     u1815:
  3739  0073AE  90D8               	bcf	status,0,c
  3740  0073B0  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3741  0073B2                     u1814:
  3742  0073B2  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3743  0073B4  D7FC               	goto	u1815
  3744  0073B6  5003               	movf	??_GPIO_PinDirection+1,w,c
  3745  0073B8  1295               	iorwf	3989,f,c	;volatile
  3746  0073BA  0012               	return	
  3747  0073BC                     l2144:
  3748  0073BC  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3749  0073C0  0E01               	movlw	1
  3750  0073C2  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3751  0073C4  2A02               	incf	??_GPIO_PinDirection,f,c
  3752  0073C6  D002               	goto	u1824
  3753  0073C8                     u1825:
  3754  0073C8  90D8               	bcf	status,0,c
  3755  0073CA  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3756  0073CC                     u1824:
  3757  0073CC  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3758  0073CE  D7FC               	goto	u1825
  3759  0073D0  5003               	movf	??_GPIO_PinDirection+1,w,c
  3760  0073D2  0AFF               	xorlw	255
  3761  0073D4  1695               	andwf	3989,f,c	;volatile
  3762                           
  3763                           ;gpio.c: 94: break;
  3764  0073D6  0012               	return	
  3765  0073D8                     l2146:
  3766                           
  3767                           ;gpio.c: 98: ((var_pinDirn_u8)? ((TRISE) |= ((uint8_t)1<<(enm_pinNumber))): ((TRISE) &= 
      +                          ~((uint8_t)1<<(enm_pinNumber))));
  3768  0073D8  5001               	movf	GPIO_PinDirection@var_pinDirn_u8,w,c
  3769  0073DA  B4D8               	btfsc	status,2,c
  3770  0073DC  D00D               	goto	l2150
  3771  0073DE  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3772  0073E2  0E01               	movlw	1
  3773  0073E4  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3774  0073E6  2A02               	incf	??_GPIO_PinDirection,f,c
  3775  0073E8  D002               	goto	u1844
  3776  0073EA                     u1845:
  3777  0073EA  90D8               	bcf	status,0,c
  3778  0073EC  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3779  0073EE                     u1844:
  3780  0073EE  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3781  0073F0  D7FC               	goto	u1845
  3782  0073F2  5003               	movf	??_GPIO_PinDirection+1,w,c
  3783  0073F4  1296               	iorwf	3990,f,c	;volatile
  3784  0073F6  0012               	return	
  3785  0073F8                     l2150:
  3786  0073F8  C005  F002         	movff	GPIO_PinDirection@enm_pinNumber,??_GPIO_PinDirection
  3787  0073FC  0E01               	movlw	1
  3788  0073FE  6E03               	movwf	(??_GPIO_PinDirection+1)& (0+255),c
  3789  007400  2A02               	incf	??_GPIO_PinDirection,f,c
  3790  007402  D002               	goto	u1854
  3791  007404                     u1855:
  3792  007404  90D8               	bcf	status,0,c
  3793  007406  3603               	rlcf	??_GPIO_PinDirection+1,f,c
  3794  007408                     u1854:
  3795  007408  2E02               	decfsz	??_GPIO_PinDirection,f,c
  3796  00740A  D7FC               	goto	u1855
  3797  00740C  5003               	movf	??_GPIO_PinDirection+1,w,c
  3798  00740E  0AFF               	xorlw	255
  3799  007410  1696               	andwf	3990,f,c	;volatile
  3800                           
  3801                           ;gpio.c: 101: }
  3802                           
  3803                           ;gpio.c: 99: break;
  3804  007412  0012               	return	
  3805  007414                     l2154:
  3806  007414  5004               	movf	GPIO_PinDirection@var_portNumber_u8,w,c
  3807                           
  3808                           ; Switch size 1, requested type "space"
  3809                           ; Number of cases is 5, Range of values is 0 to 4
  3810                           ; switch strategies available:
  3811                           ; Name         Instructions Cycles
  3812                           ; simple_byte           16     9 (average)
  3813                           ;	Chosen strategy is simple_byte
  3814  007416  0A00               	xorlw	0	; case 0
  3815  007418  B4D8               	btfsc	status,2,c
  3816  00741A  D766               	goto	l2122
  3817  00741C  0A01               	xorlw	1	; case 1
  3818  00741E  B4D8               	btfsc	status,2,c
  3819  007420  D781               	goto	l2128
  3820  007422  0A03               	xorlw	3	; case 2
  3821  007424  B4D8               	btfsc	status,2,c
  3822  007426  D79C               	goto	l2134
  3823  007428  0A01               	xorlw	1	; case 3
  3824  00742A  B4D8               	btfsc	status,2,c
  3825  00742C  D7B7               	goto	l2140
  3826  00742E  0A07               	xorlw	7	; case 4
  3827  007430  A4D8               	btfss	status,2,c
  3828  007432  0012               	return	
  3829  007434  D7D1               	goto	l2146
  3830  007436                     __end_of_GPIO_PinDirection:
  3831                           	opt stack 0
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           postdec1	equ	0xFE5
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _DELAY_ms *****************
  3848 ;; Defined at:
  3849 ;;		line 75 in file "../00-libfiles/delay.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  ms_count        2    2[COMRAM] unsigned int 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3863 ;;      Params:         2       0       0       0       0       0       0
  3864 ;;      Locals:         0       0       0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0
  3866 ;;      Totals:         2       0       0       0       0       0       0
  3867 ;;Total ram usage:        2 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    1
  3870 ;; This function calls:
  3871 ;;		_DELAY_us
  3872 ;; This function is called by:
  3873 ;;		_main
  3874 ;;		_led_Test
  3875 ;;		_LCD_Init
  3876 ;;		_lcd_BusyCheck
  3877 ;;		_lcd_Reset
  3878 ;;		_DELAY_sec
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text22
  3883  00692A                     __ptext22:
  3884                           	opt stack 0
  3885  00692A                     _DELAY_ms:
  3886                           	opt stack 28
  3887                           
  3888                           ;delay.c: 77: while (ms_count != 0)
  3889                           
  3890                           ;incstack = 0
  3891  00692A  D009               	goto	l2198
  3892  00692C                     l2194:
  3893                           
  3894                           ;delay.c: 78: {
  3895                           ;delay.c: 79: DELAY_us(350u);
  3896  00692C  0E01               	movlw	1
  3897  00692E  6E02               	movwf	DELAY_us@us_count+1,c
  3898  006930  0E5E               	movlw	94
  3899  006932  6E01               	movwf	DELAY_us@us_count,c
  3900  006934  EC8C  F034         	call	_DELAY_us	;wreg free
  3901                           
  3902                           ;delay.c: 80: ms_count--;
  3903  006938  0603               	decf	DELAY_ms@ms_count,f,c
  3904  00693A  A0D8               	btfss	status,0,c
  3905  00693C  0604               	decf	DELAY_ms@ms_count+1,f,c
  3906  00693E                     l2198:
  3907  00693E  5003               	movf	DELAY_ms@ms_count,w,c
  3908  006940  1004               	iorwf	DELAY_ms@ms_count+1,w,c
  3909  006942  B4D8               	btfsc	status,2,c
  3910  006944  0012               	return	
  3911  006946  D7F2               	goto	l2194
  3912  006948                     __end_of_DELAY_ms:
  3913                           	opt stack 0
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           postinc0	equ	0xFEE
  3921                           wreg	equ	0xFE8
  3922                           postdec1	equ	0xFE5
  3923                           fsr1l	equ	0xFE1
  3924                           indf2	equ	0xFDF
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _eeprom_Test *****************
  3930 ;; Defined at:
  3931 ;;		line 205 in file "main.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;		None
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;  write_char      2   72[COMRAM] unsigned int 
  3936 ;;  eeprom_addre    2   70[COMRAM] unsigned int 
  3937 ;;  read_char       2   68[COMRAM] unsigned int 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      void 
  3940 ;; Registers used:
  3941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3947 ;;      Params:         0       0       0       0       0       0       0
  3948 ;;      Locals:         6       0       0       0       0       0       0
  3949 ;;      Temps:          1       0       0       0       0       0       0
  3950 ;;      Totals:         7       0       0       0       0       0       0
  3951 ;;Total ram usage:        7 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    3
  3954 ;; This function calls:
  3955 ;;		_EEPROM_ReadByte
  3956 ;;		_EEPROM_WriteByte
  3957 ;;		_UART_Printf
  3958 ;; This function is called by:
  3959 ;;		_main
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text23
  3964  006E1A                     __ptext23:
  3965                           	opt stack 0
  3966  006E1A                     _eeprom_Test:
  3967                           	opt stack 27
  3968                           
  3969                           ;main.c: 206: unsigned int eeprom_address = 0, write_char = 'A', read_char;
  3970                           
  3971                           ;incstack = 0
  3972  006E1A  0E00               	movlw	0
  3973  006E1C  6E48               	movwf	eeprom_Test@eeprom_address+1,c
  3974  006E1E  0E00               	movlw	0
  3975  006E20  6E47               	movwf	eeprom_Test@eeprom_address,c
  3976  006E22  0E00               	movlw	0
  3977  006E24  6E4A               	movwf	eeprom_Test@write_char+1,c
  3978  006E26  0E41               	movlw	65
  3979  006E28  6E49               	movwf	eeprom_Test@write_char,c
  3980                           
  3981                           ;main.c: 207: UART_Printf("\n\r\n\rInbuilt Eeprom Test. Writing and reading A-Z to and f
      +                          rom Eeprom.");
  3982  006E2A  0E32               	movlw	low STR_5
  3983  006E2C  6E2C               	movwf	UART_Printf@argList,c
  3984  006E2E  0E7B               	movlw	high STR_5
  3985  006E30  6E2D               	movwf	UART_Printf@argList+1,c
  3986  006E32  ECB3  F03B         	call	_UART_Printf	;wreg free
  3987  006E36                     l2686:
  3988                           
  3989                           ;main.c: 210: UART_Printf("\n\rEeprom Write: %c    ", write_char);
  3990  006E36  0EC5               	movlw	low STR_6
  3991  006E38  6E2C               	movwf	UART_Printf@argList,c
  3992  006E3A  0E7B               	movlw	high STR_6
  3993  006E3C  6E2D               	movwf	UART_Printf@argList+1,c
  3994  006E3E  C049  F02E         	movff	eeprom_Test@write_char,?_UART_Printf+2
  3995  006E42  C04A  F02F         	movff	eeprom_Test@write_char+1,?_UART_Printf+3
  3996  006E46  ECB3  F03B         	call	_UART_Printf	;wreg free
  3997                           
  3998                           ;main.c: 211: EEPROM_WriteByte(eeprom_address, write_char);
  3999  006E4A  C047  F001         	movff	eeprom_Test@eeprom_address,EEPROM_WriteByte@v_eepromAddress_u16
  4000  006E4E  C048  F002         	movff	eeprom_Test@eeprom_address+1,EEPROM_WriteByte@v_eepromAddress_u16+1
  4001  006E52  C049  F003         	movff	eeprom_Test@write_char,EEPROM_WriteByte@v_eepromData_u8
  4002  006E56  EC2C  F035         	call	_EEPROM_WriteByte	;wreg free
  4003                           
  4004                           ;main.c: 214: read_char = EEPROM_ReadByte(eeprom_address);
  4005  006E5A  C047  F001         	movff	eeprom_Test@eeprom_address,EEPROM_ReadByte@v_eepromAddress_u16
  4006  006E5E  C048  F002         	movff	eeprom_Test@eeprom_address+1,EEPROM_ReadByte@v_eepromAddress_u16+1
  4007  006E62  EC84  F034         	call	_EEPROM_ReadByte	;wreg free
  4008  006E66  6E44               	movwf	??_eeprom_Test& (0+255),c
  4009  006E68  5044               	movf	??_eeprom_Test,w,c
  4010  006E6A  6E45               	movwf	eeprom_Test@read_char,c
  4011  006E6C  6A46               	clrf	eeprom_Test@read_char+1,c
  4012                           
  4013                           ;main.c: 215: UART_Printf("Eeprom Read: %c", read_char);
  4014  006E6E  0EEE               	movlw	low STR_7
  4015  006E70  6E2C               	movwf	UART_Printf@argList,c
  4016  006E72  0E7B               	movlw	high STR_7
  4017  006E74  6E2D               	movwf	UART_Printf@argList+1,c
  4018  006E76  C045  F02E         	movff	eeprom_Test@read_char,?_UART_Printf+2
  4019  006E7A  C046  F02F         	movff	eeprom_Test@read_char+1,?_UART_Printf+3
  4020  006E7E  ECB3  F03B         	call	_UART_Printf	;wreg free
  4021                           
  4022                           ;main.c: 216: write_char++;
  4023  006E82  4A49               	infsnz	eeprom_Test@write_char,f,c
  4024  006E84  2A4A               	incf	eeprom_Test@write_char+1,f,c
  4025                           
  4026                           ;main.c: 217: } while (write_char <= 'Z');
  4027  006E86  504A               	movf	eeprom_Test@write_char+1,w,c
  4028  006E88  E104               	bnz	l109
  4029  006E8A  0E5B               	movlw	91
  4030  006E8C  5C49               	subwf	eeprom_Test@write_char,w,c
  4031  006E8E  A0D8               	btfss	status,0,c
  4032  006E90  D7D2               	goto	l2686
  4033  006E92                     l109:
  4034  006E92  D7FF               	goto	l109
  4035  006E94                     __end_of_eeprom_Test:
  4036                           	opt stack 0
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodh	equ	0xFF4
  4042                           prodl	equ	0xFF3
  4043                           postinc0	equ	0xFEE
  4044                           wreg	equ	0xFE8
  4045                           postdec1	equ	0xFE5
  4046                           fsr1l	equ	0xFE1
  4047                           indf2	equ	0xFDF
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           
  4052 ;; *************** function _EEPROM_WriteByte *****************
  4053 ;; Defined at:
  4054 ;;		line 63 in file "../00-libfiles/eeprom.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  v_eepromAddr    2    0[COMRAM] unsigned int 
  4057 ;;  v_eepromData    1    2[COMRAM] unsigned char 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  gie_value       1    3[COMRAM] unsigned char 
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg, status,2, status,0
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4069 ;;      Params:         3       0       0       0       0       0       0
  4070 ;;      Locals:         1       0       0       0       0       0       0
  4071 ;;      Temps:          0       0       0       0       0       0       0
  4072 ;;      Totals:         4       0       0       0       0       0       0
  4073 ;;Total ram usage:        4 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_eeprom_Test
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text24
  4083  006A58                     __ptext24:
  4084                           	opt stack 0
  4085  006A58                     _EEPROM_WriteByte:
  4086                           	opt stack 29
  4087  006A58                     l170:
  4088  006A58  B2A6               	btfsc	4006,1,c	;volatile
  4089  006A5A  D7FE               	goto	l170
  4090                           
  4091                           ;eeprom.c: 67: EEADR=v_eepromAddress_u16;
  4092  006A5C  C001  FFA9         	movff	EEPROM_WriteByte@v_eepromAddress_u16,4009	;volatile
  4093                           
  4094                           ;eeprom.c: 69: EEDATA=v_eepromData_u8;
  4095  006A60  C003  FFA8         	movff	EEPROM_WriteByte@v_eepromData_u8,4008	;volatile
  4096                           
  4097                           ;eeprom.c: 70: gie_value = GIE;
  4098  006A64  0E00               	movlw	0
  4099  006A66  BEF2               	btfsc	intcon,7,c	;volatile
  4100  006A68  0E01               	movlw	1
  4101  006A6A  6E04               	movwf	EEPROM_WriteByte@gie_value,c
  4102                           
  4103                           ;eeprom.c: 71: GIE = 0;
  4104  006A6C  9EF2               	bcf	intcon,7,c	;volatile
  4105                           
  4106                           ;eeprom.c: 72: ((EECON1) |= ((uint8_t)1<<(2)));
  4107  006A6E  84A6               	bsf	4006,2,c	;volatile
  4108                           
  4109                           ;eeprom.c: 73: EECON2=0x55;
  4110  006A70  0E55               	movlw	85
  4111  006A72  6EA7               	movwf	4007,c	;volatile
  4112                           
  4113                           ;eeprom.c: 74: EECON2=0xaa;
  4114  006A74  0EAA               	movlw	170
  4115  006A76  6EA7               	movwf	4007,c	;volatile
  4116                           
  4117                           ;eeprom.c: 75: ((EECON1) |= ((uint8_t)1<<(1)));
  4118  006A78  82A6               	bsf	4006,1,c	;volatile
  4119                           
  4120                           ;eeprom.c: 76: ((EECON1) &= ~((uint8_t)1<<(2)));
  4121  006A7A  94A6               	bcf	4006,2,c	;volatile
  4122                           
  4123                           ;eeprom.c: 77: GIE = gie_value;
  4124  006A7C  A004               	btfss	EEPROM_WriteByte@gie_value,0,c
  4125  006A7E  D002               	goto	u2650
  4126  006A80  8EF2               	bsf	intcon,7,c	;volatile
  4127  006A82  0012               	return	
  4128  006A84                     u2650:
  4129  006A84  9EF2               	bcf	intcon,7,c	;volatile
  4130  006A86  0012               	return		;funcret
  4131  006A88                     __end_of_EEPROM_WriteByte:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           intcon	equ	0xFF2
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postdec1	equ	0xFE5
  4143                           fsr1l	equ	0xFE1
  4144                           indf2	equ	0xFDF
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _EEPROM_ReadByte *****************
  4150 ;; Defined at:
  4151 ;;		line 93 in file "../00-libfiles/eeprom.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  v_eepromAddr    2    0[COMRAM] unsigned int 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4165 ;;      Params:         2       0       0       0       0       0       0
  4166 ;;      Locals:         0       0       0       0       0       0       0
  4167 ;;      Temps:          0       0       0       0       0       0       0
  4168 ;;      Totals:         2       0       0       0       0       0       0
  4169 ;;Total ram usage:        2 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_eeprom_Test
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text25
  4179  006908                     __ptext25:
  4180                           	opt stack 0
  4181  006908                     _EEPROM_ReadByte:
  4182                           	opt stack 29
  4183  006908                     l176:
  4184  006908  A2A6               	btfss	4006,1,c	;volatile
  4185  00690A  B0A6               	btfsc	4006,0,c	;volatile
  4186  00690C  D7FD               	goto	l176
  4187                           
  4188                           ;eeprom.c: 96: EEADR=v_eepromAddress_u16;
  4189  00690E  C001  FFA9         	movff	EEPROM_ReadByte@v_eepromAddress_u16,4009	;volatile
  4190                           
  4191                           ;eeprom.c: 98: ((EECON1) |= ((uint8_t)1<<(0)));
  4192  006912  80A6               	bsf	4006,0,c	;volatile
  4193                           
  4194                           ;eeprom.c: 100: return(EEDATA);
  4195  006914  50A8               	movf	4008,w,c	;volatile
  4196  006916  0012               	return	
  4197  006918                     __end_of_EEPROM_ReadByte:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           postinc0	equ	0xFEE
  4207                           wreg	equ	0xFE8
  4208                           postdec1	equ	0xFE5
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           fsr2h	equ	0xFDA
  4212                           fsr2l	equ	0xFD9
  4213                           status	equ	0xFD8
  4214                           
  4215 ;; *************** function _adc_Test *****************
  4216 ;; Defined at:
  4217 ;;		line 194 in file "main.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;		None
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;		None
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4231 ;;      Params:         0       0       0       0       0       0       0
  4232 ;;      Locals:         0       0       0       0       0       0       0
  4233 ;;      Temps:          0       0       0       0       0       0       0
  4234 ;;      Totals:         0       0       0       0       0       0       0
  4235 ;;Total ram usage:        0 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    3
  4238 ;; This function calls:
  4239 ;;		_ADC_GetAdcValue
  4240 ;;		_ADC_Init
  4241 ;;		_UART_Printf
  4242 ;; This function is called by:
  4243 ;;		_main
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text26
  4248  006948                     __ptext26:
  4249                           	opt stack 0
  4250  006948                     _adc_Test:
  4251                           	opt stack 27
  4252                           
  4253                           ;main.c: 196: ADC_Init();
  4254                           
  4255                           ;incstack = 0
  4256  006948  EC6F  F034         	call	_ADC_Init	;wreg free
  4257  00694C                     l2680:
  4258                           
  4259                           ;main.c: 199: {
  4260                           ;main.c: 200: UART_Printf("\n\rADC0 value= %4d",(uint16_t)ADC_GetAdcValue(0));
  4261  00694C  0EDC               	movlw	low STR_4
  4262  00694E  6E2C               	movwf	UART_Printf@argList,c
  4263  006950  0E7B               	movlw	high STR_4
  4264  006952  6E2D               	movwf	UART_Printf@argList+1,c
  4265  006954  0E00               	movlw	0
  4266  006956  EC44  F035         	call	_ADC_GetAdcValue
  4267  00695A  C003  F02E         	movff	?_ADC_GetAdcValue,?_UART_Printf+2
  4268  00695E  C004  F02F         	movff	?_ADC_GetAdcValue+1,?_UART_Printf+3
  4269  006962  ECB3  F03B         	call	_UART_Printf	;wreg free
  4270  006966  D7F2               	goto	l2680
  4271  006968                     __end_of_adc_Test:
  4272                           	opt stack 0
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           prodh	equ	0xFF4
  4278                           prodl	equ	0xFF3
  4279                           intcon	equ	0xFF2
  4280                           postinc0	equ	0xFEE
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           fsr1l	equ	0xFE1
  4284                           indf2	equ	0xFDF
  4285                           fsr2h	equ	0xFDA
  4286                           fsr2l	equ	0xFD9
  4287                           status	equ	0xFD8
  4288                           
  4289 ;; *************** function _UART_Printf *****************
  4290 ;; Defined at:
  4291 ;;		line 413 in file "../00-libfiles/uart.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  argList         2   43[COMRAM] PTR const unsigned char 
  4294 ;;		 -> STR_7(16), STR_6(23), STR_5(69), STR_4(18), 
  4295 ;;		 -> STR_1(131), 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  v_num_u32       4   55[COMRAM] unsigned long 
  4298 ;;  v_num_s32       4   49[COMRAM] long 
  4299 ;;  argp            2   65[COMRAM] PTR void [1]
  4300 ;;		 -> ?_UART_Printf(1), 
  4301 ;;  ptr             2   61[COMRAM] PTR const unsigned char 
  4302 ;;		 -> STR_7(16), STR_6(23), STR_5(69), STR_4(18), 
  4303 ;;		 -> STR_1(131), 
  4304 ;;  v_num_u16       2   59[COMRAM] unsigned int 
  4305 ;;  v_num_s16       2   53[COMRAM] int 
  4306 ;;  str             2   47[COMRAM] PTR unsigned char 
  4307 ;;  v_numOfDigit    1   64[COMRAM] unsigned char 
  4308 ;;  ch              1   63[COMRAM] unsigned char 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      void 
  4311 ;; Registers used:
  4312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4318 ;;      Params:         4       0       0       0       0       0       0
  4319 ;;      Locals:        20       0       0       0       0       0       0
  4320 ;;      Temps:          0       0       0       0       0       0       0
  4321 ;;      Totals:        24       0       0       0       0       0       0
  4322 ;;Total ram usage:       24 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    2
  4325 ;; This function calls:
  4326 ;;		_UART_TxChar
  4327 ;;		_UART_TxNumber
  4328 ;;		_UART_TxString
  4329 ;; This function is called by:
  4330 ;;		_main
  4331 ;;		_adc_Test
  4332 ;;		_eeprom_Test
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text27
  4337  007766                     __ptext27:
  4338                           	opt stack 0
  4339  007766                     _UART_Printf:
  4340                           	opt stack 27
  4341                           
  4342                           ;uart.c: 415: const char *ptr;
  4343                           ;uart.c: 416: va_list argp;
  4344                           ;uart.c: 417: sint16_t v_num_s16;
  4345                           ;uart.c: 418: sint32_t v_num_s32;
  4346                           ;uart.c: 419: uint16_t v_num_u16;
  4347                           ;uart.c: 420: uint32_t v_num_u32;
  4348                           ;uart.c: 421: char *str;
  4349                           ;uart.c: 422: char ch;
  4350                           ;uart.c: 423: uint8_t v_numOfDigitsToTransmit_u8;
  4351                           ;uart.c: 429: *argp = __va_start();
  4352                           
  4353                           ;incstack = 0
  4354  007766  0E2E               	movlw	low (?_UART_Printf+2)
  4355  007768  6E42               	movwf	UART_Printf@argp,c
  4356  00776A  0E00               	movlw	high (?_UART_Printf+2)
  4357  00776C  6E43               	movwf	UART_Printf@argp+1,c
  4358                           
  4359                           ;uart.c: 432: for(ptr = argList; *ptr != '\0'; ptr++)
  4360  00776E  C02C  F03E         	movff	UART_Printf@argList,UART_Printf@ptr
  4361  007772  C02D  F03F         	movff	UART_Printf@argList+1,UART_Printf@ptr+1
  4362  007776  D189               	goto	l2486
  4363  007778                     l2372:
  4364                           
  4365                           ;uart.c: 433: {
  4366                           ;uart.c: 435: ch= *ptr;
  4367  007778  C03E  FFF6         	movff	UART_Printf@ptr,tblptrl
  4368  00777C  C03F  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  4369  007780                     	if	0	;tblptru may be non-zero
  4370  007780                     	endif
  4371  007780                     	if	0	;tblptru may be non-zero
  4372  007780                     	endif
  4373  007780  0008               	tblrd		*
  4374  007782  CFF5 F040          	movff	tablat,UART_Printf@ch
  4375                           
  4376                           ;uart.c: 436: if(ch == '%')
  4377  007786  0E25               	movlw	37
  4378  007788  1840               	xorwf	UART_Printf@ch,w,c
  4379  00778A  A4D8               	btfss	status,2,c
  4380  00778C  D179               	goto	l2482
  4381                           
  4382                           ;uart.c: 437: {
  4383                           ;uart.c: 438: ptr++;
  4384  00778E  4A3E               	infsnz	UART_Printf@ptr,f,c
  4385  007790  2A3F               	incf	UART_Printf@ptr+1,f,c
  4386                           
  4387                           ;uart.c: 439: ch = *ptr;
  4388  007792  C03E  FFF6         	movff	UART_Printf@ptr,tblptrl
  4389  007796  C03F  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  4390  00779A                     	if	0	;tblptru may be non-zero
  4391  00779A                     	endif
  4392  00779A                     	if	0	;tblptru may be non-zero
  4393  00779A                     	endif
  4394  00779A  0008               	tblrd		*
  4395  00779C  CFF5 F040          	movff	tablat,UART_Printf@ch
  4396                           
  4397                           ;uart.c: 440: if((ch>=0x30) && (ch<=0x39))
  4398  0077A0  0E2F               	movlw	47
  4399  0077A2  6440               	cpfsgt	UART_Printf@ch,c
  4400  0077A4  D01C               	goto	l566
  4401  0077A6  0E3A               	movlw	58
  4402  0077A8  6040               	cpfslt	UART_Printf@ch,c
  4403  0077AA  D019               	goto	l566
  4404                           
  4405                           ;uart.c: 441: {
  4406                           ;uart.c: 442: v_numOfDigitsToTransmit_u8 = 0;
  4407  0077AC  0E00               	movlw	0
  4408  0077AE  6E41               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4409                           
  4410                           ;uart.c: 443: while((ch>=0x30) && (ch<=0x39))
  4411  0077B0  D00F               	goto	l2392
  4412  0077B2                     l2386:
  4413                           
  4414                           ;uart.c: 444: {
  4415                           ;uart.c: 445: v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30)
      +                          ;
  4416  0077B2  5041               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  4417  0077B4  0D0A               	mullw	10
  4418  0077B6  50F3               	movf	prodl,w,c
  4419  0077B8  2440               	addwf	UART_Printf@ch,w,c
  4420  0077BA  0FD0               	addlw	208
  4421  0077BC  6E41               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4422                           
  4423                           ;uart.c: 446: ptr++;
  4424  0077BE  4A3E               	infsnz	UART_Printf@ptr,f,c
  4425  0077C0  2A3F               	incf	UART_Printf@ptr+1,f,c
  4426                           
  4427                           ;uart.c: 447: ch = *ptr;
  4428  0077C2  C03E  FFF6         	movff	UART_Printf@ptr,tblptrl
  4429  0077C6  C03F  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  4430  0077CA                     	if	0	;tblptru may be non-zero
  4431  0077CA                     	endif
  4432  0077CA                     	if	0	;tblptru may be non-zero
  4433  0077CA                     	endif
  4434  0077CA  0008               	tblrd		*
  4435  0077CC  CFF5 F040          	movff	tablat,UART_Printf@ch
  4436  0077D0                     l2392:
  4437  0077D0  0E2F               	movlw	47
  4438  0077D2  6440               	cpfsgt	UART_Printf@ch,c
  4439  0077D4  D126               	goto	l2480
  4440  0077D6  0E39               	movlw	57
  4441  0077D8  6440               	cpfsgt	UART_Printf@ch,c
  4442  0077DA  D7EB               	goto	l2386
  4443  0077DC  D122               	goto	l2480
  4444  0077DE                     l566:
  4445                           
  4446                           ;uart.c: 450: else
  4447                           ;uart.c: 451: {
  4448                           ;uart.c: 452: v_numOfDigitsToTransmit_u8 = 0xffu;
  4449  0077DE  6841               	setf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4450                           
  4451                           ;uart.c: 453: }
  4452                           ;uart.c: 456: switch(ch)
  4453  0077E0  D120               	goto	l2480
  4454  0077E2                     l2396:
  4455                           
  4456                           ;uart.c: 459: case 'c':
  4457                           ;uart.c: 460: ch = (*(uint8_t *)__va_arg((*(uint8_t **)argp), (uint8_t)0));
  4458  0077E2  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4459  0077E6  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4460  0077EA  50DF               	movf	indf2,w,c
  4461  0077EC  6E40               	movwf	UART_Printf@ch,c
  4462  0077EE  0E02               	movlw	2
  4463  0077F0  2642               	addwf	UART_Printf@argp,f,c
  4464  0077F2  0E00               	movlw	0
  4465  0077F4  2243               	addwfc	UART_Printf@argp+1,f,c
  4466                           
  4467                           ;uart.c: 461: UART_TxChar(ch);
  4468  0077F6  5040               	movf	UART_Printf@ch,w,c
  4469  0077F8  EC76  F034         	call	_UART_TxChar
  4470                           
  4471                           ;uart.c: 462: break;
  4472  0077FC  D144               	goto	l2484
  4473  0077FE                     l2402:
  4474                           
  4475                           ;uart.c: 465: v_num_s16 = (*(sint16_t *)__va_arg((*(sint16_t **)argp), (sint16_t)0));
  4476  0077FE  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4477  007802  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4478  007806  CFDE F036          	movff	postinc2,UART_Printf@v_num_s16
  4479  00780A  CFDD F037          	movff	postdec2,UART_Printf@v_num_s16+1
  4480  00780E  0E02               	movlw	2
  4481  007810  2642               	addwf	UART_Printf@argp,f,c
  4482  007812  0E00               	movlw	0
  4483  007814  2243               	addwfc	UART_Printf@argp+1,f,c
  4484                           
  4485                           ;uart.c: 466: if(v_num_s16<0)
  4486  007816  AE37               	btfss	UART_Printf@v_num_s16+1,7,c
  4487  007818  D007               	goto	l2412
  4488                           
  4489                           ;uart.c: 467: {
  4490                           ;uart.c: 468: v_num_s16 = -v_num_s16;
  4491  00781A  6C36               	negf	UART_Printf@v_num_s16,c
  4492  00781C  1E37               	comf	UART_Printf@v_num_s16+1,f,c
  4493  00781E  B0D8               	btfsc	status,0,c
  4494  007820  2A37               	incf	UART_Printf@v_num_s16+1,f,c
  4495                           
  4496                           ;uart.c: 469: UART_TxChar('-');
  4497  007822  0E2D               	movlw	45
  4498  007824  EC76  F034         	call	_UART_TxChar
  4499  007828                     l2412:
  4500                           
  4501                           ;uart.c: 470: }
  4502                           ;uart.c: 471: UART_TxNumber(10u,v_num_s16,v_numOfDigitsToTransmit_u8);
  4503  007828  C036  F00E         	movff	UART_Printf@v_num_s16,UART_TxNumber@v_number_u32
  4504  00782C  C037  F00F         	movff	UART_Printf@v_num_s16+1,UART_TxNumber@v_number_u32+1
  4505  007830  0E00               	movlw	0
  4506  007832  BE0F               	btfsc	UART_TxNumber@v_number_u32+1,7,c
  4507  007834  0EFF               	movlw	-1
  4508  007836  6E10               	movwf	UART_TxNumber@v_number_u32+2,c
  4509  007838  6E11               	movwf	UART_TxNumber@v_number_u32+3,c
  4510  00783A  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4511  00783E  0E0A               	movlw	10
  4512  007840  ECCB  F03A         	call	_UART_TxNumber
  4513                           
  4514                           ;uart.c: 472: break;
  4515  007844  D120               	goto	l2484
  4516  007846                     l2414:
  4517                           
  4518                           ;uart.c: 475: v_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  4519  007846  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4520  00784A  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4521  00784E  CFDE F032          	movff	postinc2,UART_Printf@v_num_s32
  4522  007852  CFDE F033          	movff	postinc2,UART_Printf@v_num_s32+1
  4523  007856  CFDE F034          	movff	postinc2,UART_Printf@v_num_s32+2
  4524  00785A  CFDE F035          	movff	postinc2,UART_Printf@v_num_s32+3
  4525  00785E  0E04               	movlw	4
  4526  007860  2642               	addwf	UART_Printf@argp,f,c
  4527  007862  0E00               	movlw	0
  4528  007864  2243               	addwfc	UART_Printf@argp+1,f,c
  4529                           
  4530                           ;uart.c: 476: if(v_num_s32<0)
  4531  007866  AE35               	btfss	UART_Printf@v_num_s32+3,7,c
  4532  007868  D00B               	goto	l2424
  4533                           
  4534                           ;uart.c: 477: {
  4535                           ;uart.c: 478: v_num_s32 = -v_num_s32;
  4536  00786A  1E35               	comf	UART_Printf@v_num_s32+3,f,c
  4537  00786C  1E34               	comf	UART_Printf@v_num_s32+2,f,c
  4538  00786E  1E33               	comf	UART_Printf@v_num_s32+1,f,c
  4539  007870  6C32               	negf	UART_Printf@v_num_s32,c
  4540  007872  0E00               	movlw	0
  4541  007874  2233               	addwfc	UART_Printf@v_num_s32+1,f,c
  4542  007876  2234               	addwfc	UART_Printf@v_num_s32+2,f,c
  4543  007878  2235               	addwfc	UART_Printf@v_num_s32+3,f,c
  4544                           
  4545                           ;uart.c: 479: UART_TxChar('-');
  4546  00787A  0E2D               	movlw	45
  4547  00787C  EC76  F034         	call	_UART_TxChar
  4548  007880                     l2424:
  4549                           
  4550                           ;uart.c: 480: }
  4551                           ;uart.c: 481: UART_TxNumber(10u,v_num_s32,v_numOfDigitsToTransmit_u8);
  4552  007880  C032  F00E         	movff	UART_Printf@v_num_s32,UART_TxNumber@v_number_u32
  4553  007884  C033  F00F         	movff	UART_Printf@v_num_s32+1,UART_TxNumber@v_number_u32+1
  4554  007888  C034  F010         	movff	UART_Printf@v_num_s32+2,UART_TxNumber@v_number_u32+2
  4555  00788C  C035  F011         	movff	UART_Printf@v_num_s32+3,UART_TxNumber@v_number_u32+3
  4556  007890  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4557  007894  0E0A               	movlw	10
  4558  007896  ECCB  F03A         	call	_UART_TxNumber
  4559                           
  4560                           ;uart.c: 482: break;
  4561  00789A  D0F5               	goto	l2484
  4562  00789C                     l2426:
  4563                           
  4564                           ;uart.c: 485: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  4565  00789C  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4566  0078A0  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4567  0078A4  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u16
  4568  0078A8  CFDD F03D          	movff	postdec2,UART_Printf@v_num_u16+1
  4569  0078AC  0E02               	movlw	2
  4570  0078AE  2642               	addwf	UART_Printf@argp,f,c
  4571  0078B0  0E00               	movlw	0
  4572  0078B2  2243               	addwfc	UART_Printf@argp+1,f,c
  4573                           
  4574                           ;uart.c: 486: UART_TxNumber(10u,v_num_u16,v_numOfDigitsToTransmit_u8);
  4575  0078B4  C03C  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  4576  0078B8  C03D  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  4577  0078BC  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  4578  0078BE  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  4579  0078C0  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4580  0078C4  0E0A               	movlw	10
  4581  0078C6  ECCB  F03A         	call	_UART_TxNumber
  4582                           
  4583                           ;uart.c: 487: break;
  4584  0078CA  D0DD               	goto	l2484
  4585  0078CC                     l2432:
  4586                           
  4587                           ;uart.c: 490: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  4588  0078CC  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4589  0078D0  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4590  0078D4  CFDE F038          	movff	postinc2,UART_Printf@v_num_u32
  4591  0078D8  CFDE F039          	movff	postinc2,UART_Printf@v_num_u32+1
  4592  0078DC  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32+2
  4593  0078E0  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+3
  4594  0078E4  0E04               	movlw	4
  4595  0078E6  2642               	addwf	UART_Printf@argp,f,c
  4596  0078E8  0E00               	movlw	0
  4597  0078EA  2243               	addwfc	UART_Printf@argp+1,f,c
  4598                           
  4599                           ;uart.c: 491: UART_TxNumber(10u,v_num_u32,v_numOfDigitsToTransmit_u8);
  4600  0078EC  C038  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  4601  0078F0  C039  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  4602  0078F4  C03A  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  4603  0078F8  C03B  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  4604  0078FC  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4605  007900  0E0A               	movlw	10
  4606  007902  ECCB  F03A         	call	_UART_TxNumber
  4607                           
  4608                           ;uart.c: 492: break;
  4609  007906  D0BF               	goto	l2484
  4610  007908                     l2438:
  4611                           
  4612                           ;uart.c: 495: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  4613  007908  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4614  00790C  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4615  007910  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u16
  4616  007914  CFDD F03D          	movff	postdec2,UART_Printf@v_num_u16+1
  4617  007918  0E02               	movlw	2
  4618  00791A  2642               	addwf	UART_Printf@argp,f,c
  4619  00791C  0E00               	movlw	0
  4620  00791E  2243               	addwfc	UART_Printf@argp+1,f,c
  4621                           
  4622                           ;uart.c: 496: UART_TxNumber(16u,v_num_u16,v_numOfDigitsToTransmit_u8);
  4623  007920  C03C  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  4624  007924  C03D  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  4625  007928  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  4626  00792A  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  4627  00792C  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4628  007930  0E10               	movlw	16
  4629  007932  ECCB  F03A         	call	_UART_TxNumber
  4630                           
  4631                           ;uart.c: 497: break;
  4632  007936  D0A7               	goto	l2484
  4633  007938                     l2444:
  4634                           
  4635                           ;uart.c: 500: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  4636  007938  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4637  00793C  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4638  007940  CFDE F038          	movff	postinc2,UART_Printf@v_num_u32
  4639  007944  CFDE F039          	movff	postinc2,UART_Printf@v_num_u32+1
  4640  007948  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32+2
  4641  00794C  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+3
  4642  007950  0E04               	movlw	4
  4643  007952  2642               	addwf	UART_Printf@argp,f,c
  4644  007954  0E00               	movlw	0
  4645  007956  2243               	addwfc	UART_Printf@argp+1,f,c
  4646                           
  4647                           ;uart.c: 501: UART_TxNumber(16u,v_num_u32,v_numOfDigitsToTransmit_u8);
  4648  007958  C038  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  4649  00795C  C039  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  4650  007960  C03A  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  4651  007964  C03B  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  4652  007968  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4653  00796C  0E10               	movlw	16
  4654  00796E  ECCB  F03A         	call	_UART_TxNumber
  4655                           
  4656                           ;uart.c: 502: break;
  4657  007972  D089               	goto	l2484
  4658  007974                     l2450:
  4659                           
  4660                           ;uart.c: 506: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  4661  007974  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4662  007978  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4663  00797C  CFDE F03C          	movff	postinc2,UART_Printf@v_num_u16
  4664  007980  CFDD F03D          	movff	postdec2,UART_Printf@v_num_u16+1
  4665  007984  0E02               	movlw	2
  4666  007986  2642               	addwf	UART_Printf@argp,f,c
  4667  007988  0E00               	movlw	0
  4668  00798A  2243               	addwfc	UART_Printf@argp+1,f,c
  4669                           
  4670                           ;uart.c: 508: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  4671  00798C  2841               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  4672  00798E  A4D8               	btfss	status,2,c
  4673  007990  D002               	goto	l2458
  4674                           
  4675                           ;uart.c: 509: v_numOfDigitsToTransmit_u8 = 16;
  4676  007992  0E10               	movlw	16
  4677  007994  6E41               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4678  007996                     l2458:
  4679                           
  4680                           ;uart.c: 511: UART_TxNumber(2u,v_num_u16,v_numOfDigitsToTransmit_u8);
  4681  007996  C03C  F00E         	movff	UART_Printf@v_num_u16,UART_TxNumber@v_number_u32
  4682  00799A  C03D  F00F         	movff	UART_Printf@v_num_u16+1,UART_TxNumber@v_number_u32+1
  4683  00799E  6A10               	clrf	UART_TxNumber@v_number_u32+2,c
  4684  0079A0  6A11               	clrf	UART_TxNumber@v_number_u32+3,c
  4685  0079A2  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4686  0079A6  0E02               	movlw	2
  4687  0079A8  ECCB  F03A         	call	_UART_TxNumber
  4688                           
  4689                           ;uart.c: 512: break;
  4690  0079AC  D06C               	goto	l2484
  4691  0079AE                     l2460:
  4692                           
  4693                           ;uart.c: 515: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  4694  0079AE  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4695  0079B2  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4696  0079B6  CFDE F038          	movff	postinc2,UART_Printf@v_num_u32
  4697  0079BA  CFDE F039          	movff	postinc2,UART_Printf@v_num_u32+1
  4698  0079BE  CFDE F03A          	movff	postinc2,UART_Printf@v_num_u32+2
  4699  0079C2  CFDE F03B          	movff	postinc2,UART_Printf@v_num_u32+3
  4700  0079C6  0E04               	movlw	4
  4701  0079C8  2642               	addwf	UART_Printf@argp,f,c
  4702  0079CA  0E00               	movlw	0
  4703  0079CC  2243               	addwfc	UART_Printf@argp+1,f,c
  4704                           
  4705                           ;uart.c: 517: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  4706  0079CE  2841               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w,c
  4707  0079D0  A4D8               	btfss	status,2,c
  4708  0079D2  D002               	goto	l2468
  4709                           
  4710                           ;uart.c: 518: v_numOfDigitsToTransmit_u8 = 32;
  4711  0079D4  0E20               	movlw	32
  4712  0079D6  6E41               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8,c
  4713  0079D8                     l2468:
  4714                           
  4715                           ;uart.c: 520: UART_TxNumber(2u,v_num_u32,v_numOfDigitsToTransmit_u8);
  4716  0079D8  C038  F00E         	movff	UART_Printf@v_num_u32,UART_TxNumber@v_number_u32
  4717  0079DC  C039  F00F         	movff	UART_Printf@v_num_u32+1,UART_TxNumber@v_number_u32+1
  4718  0079E0  C03A  F010         	movff	UART_Printf@v_num_u32+2,UART_TxNumber@v_number_u32+2
  4719  0079E4  C03B  F011         	movff	UART_Printf@v_num_u32+3,UART_TxNumber@v_number_u32+3
  4720  0079E8  C041  F012         	movff	UART_Printf@v_numOfDigitsToTransmit_u8,UART_TxNumber@v_numOfDigitsToTransmit_u8
  4721  0079EC  0E02               	movlw	2
  4722  0079EE  ECCB  F03A         	call	_UART_TxNumber
  4723                           
  4724                           ;uart.c: 525: case 'f':
  4725                           ;uart.c: 530: break;
  4726                           
  4727                           ;uart.c: 524: case 'F':
  4728                           
  4729                           ;uart.c: 521: break;
  4730  0079F2  D049               	goto	l2484
  4731  0079F4                     l2470:
  4732                           
  4733                           ;uart.c: 534: case 's':
  4734                           ;uart.c: 535: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  4735  0079F4  C042  FFD9         	movff	UART_Printf@argp,fsr2l
  4736  0079F8  C043  FFDA         	movff	UART_Printf@argp+1,fsr2h
  4737  0079FC  CFDE F030          	movff	postinc2,UART_Printf@str
  4738  007A00  CFDD F031          	movff	postdec2,UART_Printf@str+1
  4739  007A04  0E02               	movlw	2
  4740  007A06  2642               	addwf	UART_Printf@argp,f,c
  4741  007A08  0E00               	movlw	0
  4742  007A0A  2243               	addwfc	UART_Printf@argp+1,f,c
  4743                           
  4744                           ;uart.c: 536: UART_TxString(str);
  4745  007A0C  C030  F002         	movff	UART_Printf@str,UART_TxString@ptr_string
  4746  007A10  C031  F003         	movff	UART_Printf@str+1,UART_TxString@ptr_string+1
  4747  007A14  ECD8  F034         	call	_UART_TxString	;wreg free
  4748                           
  4749                           ;uart.c: 537: break;
  4750  007A18  D036               	goto	l2484
  4751  007A1A                     l2476:
  4752                           
  4753                           ;uart.c: 540: UART_TxChar('%');
  4754  007A1A  0E25               	movlw	37
  4755  007A1C  EC76  F034         	call	_UART_TxChar
  4756                           
  4757                           ;uart.c: 542: }
  4758                           
  4759                           ;uart.c: 541: break;
  4760  007A20  D032               	goto	l2484
  4761  007A22                     l2480:
  4762  007A22  5040               	movf	UART_Printf@ch,w,c
  4763                           
  4764                           ; Switch size 1, requested type "space"
  4765                           ; Number of cases is 15, Range of values is 37 to 120
  4766                           ; switch strategies available:
  4767                           ; Name         Instructions Cycles
  4768                           ; simple_byte           46    24 (average)
  4769                           ;	Chosen strategy is simple_byte
  4770  007A24  0A25               	xorlw	37	; case 37
  4771  007A26  B4D8               	btfsc	status,2,c
  4772  007A28  D7F8               	goto	l2476
  4773  007A2A  0A67               	xorlw	103	; case 66
  4774  007A2C  B4D8               	btfsc	status,2,c
  4775  007A2E  D7BF               	goto	l2460
  4776  007A30  0A01               	xorlw	1	; case 67
  4777  007A32  B4D8               	btfsc	status,2,c
  4778  007A34  D6D6               	goto	l2396
  4779  007A36  0A07               	xorlw	7	; case 68
  4780  007A38  B4D8               	btfsc	status,2,c
  4781  007A3A  D705               	goto	l2414
  4782  007A3C  0A02               	xorlw	2	; case 70
  4783  007A3E  B4D8               	btfsc	status,2,c
  4784  007A40  D022               	goto	l2484
  4785  007A42  0A15               	xorlw	21	; case 83
  4786  007A44  B4D8               	btfsc	status,2,c
  4787  007A46  D7D6               	goto	l2470
  4788  007A48  0A06               	xorlw	6	; case 85
  4789  007A4A  B4D8               	btfsc	status,2,c
  4790  007A4C  D73F               	goto	l2432
  4791  007A4E  0A0D               	xorlw	13	; case 88
  4792  007A50  B4D8               	btfsc	status,2,c
  4793  007A52  D772               	goto	l2444
  4794  007A54  0A3A               	xorlw	58	; case 98
  4795  007A56  B4D8               	btfsc	status,2,c
  4796  007A58  D78D               	goto	l2450
  4797  007A5A  0A01               	xorlw	1	; case 99
  4798  007A5C  B4D8               	btfsc	status,2,c
  4799  007A5E  D6C1               	goto	l2396
  4800  007A60  0A07               	xorlw	7	; case 100
  4801  007A62  B4D8               	btfsc	status,2,c
  4802  007A64  D6CC               	goto	l2402
  4803  007A66  0A02               	xorlw	2	; case 102
  4804  007A68  B4D8               	btfsc	status,2,c
  4805  007A6A  D00D               	goto	l2484
  4806  007A6C  0A15               	xorlw	21	; case 115
  4807  007A6E  B4D8               	btfsc	status,2,c
  4808  007A70  D7C1               	goto	l2470
  4809  007A72  0A06               	xorlw	6	; case 117
  4810  007A74  B4D8               	btfsc	status,2,c
  4811  007A76  D712               	goto	l2426
  4812  007A78  0A0D               	xorlw	13	; case 120
  4813  007A7A  B4D8               	btfsc	status,2,c
  4814  007A7C  D745               	goto	l2438
  4815                           
  4816                           ;uart.c: 543: }
  4817  007A7E  D003               	goto	l2484
  4818  007A80                     l2482:
  4819                           
  4820                           ;uart.c: 544: else
  4821                           ;uart.c: 545: {
  4822                           ;uart.c: 547: UART_TxChar(ch);
  4823  007A80  5040               	movf	UART_Printf@ch,w,c
  4824  007A82  EC76  F034         	call	_UART_TxChar
  4825  007A86                     l2484:
  4826  007A86  4A3E               	infsnz	UART_Printf@ptr,f,c
  4827  007A88  2A3F               	incf	UART_Printf@ptr+1,f,c
  4828  007A8A                     l2486:
  4829  007A8A  C03E  FFF6         	movff	UART_Printf@ptr,tblptrl
  4830  007A8E  C03F  FFF7         	movff	UART_Printf@ptr+1,tblptrh
  4831  007A92                     	if	0	;tblptru may be non-zero
  4832  007A92                     	endif
  4833  007A92                     	if	0	;tblptru may be non-zero
  4834  007A92                     	endif
  4835  007A92  0008               	tblrd		*
  4836  007A94  50F5               	movf	tablat,w,c
  4837  007A96  0900               	iorlw	0
  4838  007A98  B4D8               	btfsc	status,2,c
  4839  007A9A  0012               	return	
  4840  007A9C  D66D               	goto	l2372
  4841  007A9E                     __end_of_UART_Printf:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           postdec1	equ	0xFE5
  4853                           fsr1l	equ	0xFE1
  4854                           indf2	equ	0xFDF
  4855                           postinc2	equ	0xFDE
  4856                           postdec2	equ	0xFDD
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function _UART_TxString *****************
  4862 ;; Defined at:
  4863 ;;		line 169 in file "../00-libfiles/uart.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  ptr_string      2    1[COMRAM] PTR const unsigned char 
  4866 ;;		 -> STR_3(54), 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4878 ;;      Params:         2       0       0       0       0       0       0
  4879 ;;      Locals:         0       0       0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0
  4881 ;;      Totals:         2       0       0       0       0       0       0
  4882 ;;Total ram usage:        2 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    1
  4885 ;; This function calls:
  4886 ;;		_UART_TxChar
  4887 ;; This function is called by:
  4888 ;;		_switch_Test
  4889 ;;		_UART_Printf
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text28
  4894  0069B0                     __ptext28:
  4895                           	opt stack 0
  4896  0069B0                     _UART_TxString:
  4897                           	opt stack 28
  4898                           
  4899                           ;uart.c: 171: while(*ptr_string)
  4900                           
  4901                           ;incstack = 0
  4902  0069B0  D00A               	goto	l2300
  4903  0069B2                     l2296:
  4904                           
  4905                           ;uart.c: 172: UART_TxChar(*ptr_string++);
  4906  0069B2  C002  FFF6         	movff	UART_TxString@ptr_string,tblptrl
  4907  0069B6  C003  FFF7         	movff	UART_TxString@ptr_string+1,tblptrh
  4908  0069BA                     	if	0	;tblptru may be non-zero
  4909  0069BA                     	endif
  4910  0069BA                     	if	0	;tblptru may be non-zero
  4911  0069BA                     	endif
  4912  0069BA  0008               	tblrd		*
  4913  0069BC  50F5               	movf	tablat,w,c
  4914  0069BE  EC76  F034         	call	_UART_TxChar
  4915  0069C2  4A02               	infsnz	UART_TxString@ptr_string,f,c
  4916  0069C4  2A03               	incf	UART_TxString@ptr_string+1,f,c
  4917  0069C6                     l2300:
  4918  0069C6  C002  FFF6         	movff	UART_TxString@ptr_string,tblptrl
  4919  0069CA  C003  FFF7         	movff	UART_TxString@ptr_string+1,tblptrh
  4920  0069CE                     	if	0	;tblptru may be non-zero
  4921  0069CE                     	endif
  4922  0069CE                     	if	0	;tblptru may be non-zero
  4923  0069CE                     	endif
  4924  0069CE  0008               	tblrd		*
  4925  0069D0  50F5               	movf	tablat,w,c
  4926  0069D2  0900               	iorlw	0
  4927  0069D4  B4D8               	btfsc	status,2,c
  4928  0069D6  0012               	return	
  4929  0069D8  D7EC               	goto	l2296
  4930  0069DA                     __end_of_UART_TxString:
  4931                           	opt stack 0
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           prodh	equ	0xFF4
  4937                           prodl	equ	0xFF3
  4938                           intcon	equ	0xFF2
  4939                           postinc0	equ	0xFEE
  4940                           wreg	equ	0xFE8
  4941                           postdec1	equ	0xFE5
  4942                           fsr1l	equ	0xFE1
  4943                           indf2	equ	0xFDF
  4944                           postinc2	equ	0xFDE
  4945                           postdec2	equ	0xFDD
  4946                           fsr2h	equ	0xFDA
  4947                           fsr2l	equ	0xFD9
  4948                           status	equ	0xFD8
  4949                           
  4950 ;; *************** function _UART_TxNumber *****************
  4951 ;; Defined at:
  4952 ;;		line 260 in file "../00-libfiles/uart.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  v_numericSys    1    wreg     unsigned char 
  4955 ;;  v_number_u32    4   13[COMRAM] unsigned long 
  4956 ;;  v_numOfDigit    1   17[COMRAM] unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  v_numericSys    1   41[COMRAM] unsigned char 
  4959 ;;  a              10   29[COMRAM] unsigned char [10]
  4960 ;;  i               1   42[COMRAM] unsigned char 
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      void 
  4963 ;; Registers used:
  4964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4970 ;;      Params:         5       0       0       0       0       0       0
  4971 ;;      Locals:        14       0       0       0       0       0       0
  4972 ;;      Temps:         11       0       0       0       0       0       0
  4973 ;;      Totals:        30       0       0       0       0       0       0
  4974 ;;Total ram usage:       30 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    1
  4977 ;; This function calls:
  4978 ;;		_UART_TxChar
  4979 ;;		___lldiv
  4980 ;; This function is called by:
  4981 ;;		_UART_Printf
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text29
  4986  007596                     __ptext29:
  4987                           	opt stack 0
  4988  007596                     _UART_TxNumber:
  4989                           	opt stack 27
  4990                           
  4991                           ;incstack = 0
  4992                           ;UART_TxNumber@v_numericSystem_u8 stored from wreg
  4993  007596  6E2A               	movwf	UART_TxNumber@v_numericSystem_u8,c
  4994                           
  4995                           ;uart.c: 262: uint8_t i=0,a[10];
  4996  007598  0E00               	movlw	0
  4997  00759A  6E2B               	movwf	UART_TxNumber@i,c
  4998                           
  4999                           ;uart.c: 264: if(2u == v_numericSystem_u8)
  5000  00759C  0E02               	movlw	2
  5001  00759E  182A               	xorwf	UART_TxNumber@v_numericSystem_u8,w,c
  5002  0075A0  B4D8               	btfsc	status,2,c
  5003  0075A2  D034               	goto	l2332
  5004  0075A4  D037               	goto	l2334
  5005  0075A6                     l2326:
  5006                           
  5007                           ;uart.c: 267: {
  5008                           ;uart.c: 270: i = (((v_number_u32)&(((uint8_t)1<<((v_numOfDigitsToTransmit_u8-1)))))!=0u
      +                          );
  5009  0075A6  C012  F013         	movff	UART_TxNumber@v_numOfDigitsToTransmit_u8,??_UART_TxNumber
  5010  0075AA  0EFF               	movlw	-1
  5011  0075AC  2613               	addwf	??_UART_TxNumber,f,c
  5012  0075AE  0E01               	movlw	1
  5013  0075B0  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  5014  0075B2  0E00               	movlw	0
  5015  0075B4  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  5016  0075B6  2A13               	incf	??_UART_TxNumber,f,c
  5017  0075B8  D003               	goto	u2344
  5018  0075BA                     u2345:
  5019  0075BA  90D8               	bcf	status,0,c
  5020  0075BC  3614               	rlcf	??_UART_TxNumber+1,f,c
  5021  0075BE  3615               	rlcf	??_UART_TxNumber+2,f,c
  5022  0075C0                     u2344:
  5023  0075C0  2E13               	decfsz	??_UART_TxNumber,f,c
  5024  0075C2  D7FB               	goto	u2345
  5025  0075C4  C014  F016         	movff	??_UART_TxNumber+1,??_UART_TxNumber+3
  5026  0075C8  C015  F017         	movff	??_UART_TxNumber+2,??_UART_TxNumber+4
  5027  0075CC  0E00               	movlw	0
  5028  0075CE  BE17               	btfsc	(??_UART_TxNumber+4)& (0+255),7,c
  5029  0075D0  0EFF               	movlw	255
  5030  0075D2  6E18               	movwf	(??_UART_TxNumber+5)& (0+255),c
  5031  0075D4  6E19               	movwf	(??_UART_TxNumber+6)& (0+255),c
  5032  0075D6  500E               	movf	UART_TxNumber@v_number_u32,w,c
  5033  0075D8  1416               	andwf	??_UART_TxNumber+3,w,c
  5034  0075DA  6E1A               	movwf	(??_UART_TxNumber+7)& (0+255),c
  5035  0075DC  500F               	movf	UART_TxNumber@v_number_u32+1,w,c
  5036  0075DE  1417               	andwf	??_UART_TxNumber+4,w,c
  5037  0075E0  6E1B               	movwf	(??_UART_TxNumber+8)& (0+255),c
  5038  0075E2  5010               	movf	UART_TxNumber@v_number_u32+2,w,c
  5039  0075E4  1418               	andwf	??_UART_TxNumber+5,w,c
  5040  0075E6  6E1C               	movwf	(??_UART_TxNumber+9)& (0+255),c
  5041  0075E8  5011               	movf	UART_TxNumber@v_number_u32+3,w,c
  5042  0075EA  1419               	andwf	??_UART_TxNumber+6,w,c
  5043  0075EC  6E1D               	movwf	(??_UART_TxNumber+10)& (0+255),c
  5044  0075EE  501A               	movf	??_UART_TxNumber+7,w,c
  5045  0075F0  101B               	iorwf	??_UART_TxNumber+8,w,c
  5046  0075F2  101C               	iorwf	??_UART_TxNumber+9,w,c
  5047  0075F4  101D               	iorwf	??_UART_TxNumber+10,w,c
  5048  0075F6  B4D8               	btfsc	status,2,c
  5049  0075F8  D002               	goto	u2350
  5050  0075FA  0E01               	movlw	1
  5051  0075FC  D001               	goto	u2360
  5052  0075FE                     u2350:
  5053  0075FE  0E00               	movlw	0
  5054  007600                     u2360:
  5055  007600  6E2B               	movwf	UART_TxNumber@i,c
  5056                           
  5057                           ;uart.c: 271: UART_TxChar(((i)+0x30));
  5058  007602  502B               	movf	UART_TxNumber@i,w,c
  5059  007604  0F30               	addlw	48
  5060  007606  EC76  F034         	call	_UART_TxChar
  5061                           
  5062                           ;uart.c: 272: v_numOfDigitsToTransmit_u8--;
  5063  00760A  0612               	decf	UART_TxNumber@v_numOfDigitsToTransmit_u8,f,c
  5064  00760C                     l2332:
  5065  00760C  5012               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  5066  00760E  B4D8               	btfsc	status,2,c
  5067  007610  0012               	return	
  5068  007612  D7C9               	goto	l2326
  5069  007614                     l2334:
  5070                           
  5071                           ;uart.c: 275: else if(v_number_u32==0)
  5072  007614  500E               	movf	UART_TxNumber@v_number_u32,w,c
  5073  007616  100F               	iorwf	UART_TxNumber@v_number_u32+1,w,c
  5074  007618  1010               	iorwf	UART_TxNumber@v_number_u32+2,w,c
  5075  00761A  1011               	iorwf	UART_TxNumber@v_number_u32+3,w,c
  5076  00761C  A4D8               	btfss	status,2,c
  5077  00761E  D004               	goto	l2338
  5078                           
  5079                           ;uart.c: 276: {
  5080                           ;uart.c: 280: UART_TxChar('0');
  5081  007620  0E30               	movlw	48
  5082  007622  EC76  F034         	call	_UART_TxChar
  5083                           
  5084                           ;uart.c: 281: }
  5085  007626  0012               	return	
  5086  007628                     l2338:
  5087                           
  5088                           ;uart.c: 282: else
  5089                           ;uart.c: 283: {
  5090                           ;uart.c: 284: for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
  5091  007628  0E00               	movlw	0
  5092  00762A  6E2B               	movwf	UART_TxNumber@i,c
  5093  00762C  D04D               	goto	l2356
  5094  00762E                     l2340:
  5095                           
  5096                           ;uart.c: 285: {
  5097                           ;uart.c: 288: if(v_number_u32!=0)
  5098  00762E  500E               	movf	UART_TxNumber@v_number_u32,w,c
  5099  007630  100F               	iorwf	UART_TxNumber@v_number_u32+1,w,c
  5100  007632  1010               	iorwf	UART_TxNumber@v_number_u32+2,w,c
  5101  007634  1011               	iorwf	UART_TxNumber@v_number_u32+3,w,c
  5102  007636  B4D8               	btfsc	status,2,c
  5103  007638  D035               	goto	l2346
  5104                           
  5105                           ;uart.c: 289: {
  5106                           ;uart.c: 296: a[i]=(uint32_t)(v_number_u32 - (v_numericSystem_u8 * (uint32_t)(v_number_u
      +                          32/v_numericSystem_u8)));
  5107  00763A  502B               	movf	UART_TxNumber@i,w,c
  5108  00763C  0D01               	mullw	1
  5109  00763E  0E1E               	movlw	low UART_TxNumber@a
  5110  007640  24F3               	addwf	prodl,w,c
  5111  007642  6ED9               	movwf	fsr2l,c
  5112  007644  0E00               	movlw	high UART_TxNumber@a
  5113  007646  20F4               	addwfc	prodh,w,c
  5114  007648  6EDA               	movwf	fsr2h,c
  5115  00764A  C00E  F001         	movff	UART_TxNumber@v_number_u32,___lldiv@dividend
  5116  00764E  C00F  F002         	movff	UART_TxNumber@v_number_u32+1,___lldiv@dividend+1
  5117  007652  C010  F003         	movff	UART_TxNumber@v_number_u32+2,___lldiv@dividend+2
  5118  007656  C011  F004         	movff	UART_TxNumber@v_number_u32+3,___lldiv@dividend+3
  5119  00765A  502A               	movf	UART_TxNumber@v_numericSystem_u8,w,c
  5120  00765C  6E05               	movwf	___lldiv@divisor,c
  5121  00765E  6A06               	clrf	___lldiv@divisor+1,c
  5122  007660  6A07               	clrf	___lldiv@divisor+2,c
  5123  007662  6A08               	clrf	___lldiv@divisor+3,c
  5124  007664  EC4A  F037         	call	___lldiv	;wreg free
  5125  007668  5001               	movf	?___lldiv,w,c
  5126  00766A  022A               	mulwf	UART_TxNumber@v_numericSystem_u8,c
  5127  00766C  50F3               	movf	prodl,w,c
  5128  00766E  0800               	sublw	0
  5129  007670  240E               	addwf	UART_TxNumber@v_number_u32,w,c
  5130  007672  6EDF               	movwf	indf2,c
  5131                           
  5132                           ;uart.c: 297: v_number_u32=v_number_u32/v_numericSystem_u8;
  5133  007674  C00E  F001         	movff	UART_TxNumber@v_number_u32,___lldiv@dividend
  5134  007678  C00F  F002         	movff	UART_TxNumber@v_number_u32+1,___lldiv@dividend+1
  5135  00767C  C010  F003         	movff	UART_TxNumber@v_number_u32+2,___lldiv@dividend+2
  5136  007680  C011  F004         	movff	UART_TxNumber@v_number_u32+3,___lldiv@dividend+3
  5137  007684  502A               	movf	UART_TxNumber@v_numericSystem_u8,w,c
  5138  007686  6E05               	movwf	___lldiv@divisor,c
  5139  007688  6A06               	clrf	___lldiv@divisor+1,c
  5140  00768A  6A07               	clrf	___lldiv@divisor+2,c
  5141  00768C  6A08               	clrf	___lldiv@divisor+3,c
  5142  00768E  EC4A  F037         	call	___lldiv	;wreg free
  5143  007692  C001  F00E         	movff	?___lldiv,UART_TxNumber@v_number_u32
  5144  007696  C002  F00F         	movff	?___lldiv+1,UART_TxNumber@v_number_u32+1
  5145  00769A  C003  F010         	movff	?___lldiv+2,UART_TxNumber@v_number_u32+2
  5146  00769E  C004  F011         	movff	?___lldiv+3,UART_TxNumber@v_number_u32+3
  5147                           
  5148                           ;uart.c: 298: }
  5149  0076A2  D011               	goto	l2354
  5150  0076A4                     l2346:
  5151                           
  5152                           ;uart.c: 299: else if( (v_numOfDigitsToTransmit_u8 == 0xffu) ||
  5153                           ;uart.c: 300: (v_numOfDigitsToTransmit_u8 > 10u))
  5154  0076A4  2812               	incf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  5155  0076A6  B4D8               	btfsc	status,2,c
  5156  0076A8  D05A               	goto	l2368
  5157  0076AA  0E0A               	movlw	10
  5158  0076AC  6412               	cpfsgt	UART_TxNumber@v_numOfDigitsToTransmit_u8,c
  5159  0076AE  D001               	goto	l2352
  5160  0076B0  D056               	goto	l2368
  5161  0076B2                     l2352:
  5162                           
  5163                           ;uart.c: 306: else
  5164                           ;uart.c: 307: {
  5165                           ;uart.c: 311: a[i]=0;
  5166  0076B2  502B               	movf	UART_TxNumber@i,w,c
  5167  0076B4  0D01               	mullw	1
  5168  0076B6  0E1E               	movlw	low UART_TxNumber@a
  5169  0076B8  24F3               	addwf	prodl,w,c
  5170  0076BA  6ED9               	movwf	fsr2l,c
  5171  0076BC  0E00               	movlw	high UART_TxNumber@a
  5172  0076BE  20F4               	addwfc	prodh,w,c
  5173  0076C0  6EDA               	movwf	fsr2h,c
  5174  0076C2  0E00               	movlw	0
  5175  0076C4  6EDF               	movwf	indf2,c
  5176  0076C6                     l2354:
  5177  0076C6  2A2B               	incf	UART_TxNumber@i,f,c
  5178  0076C8                     l2356:
  5179  0076C8  5012               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w,c
  5180  0076CA  5C2B               	subwf	UART_TxNumber@i,w,c
  5181  0076CC  B0D8               	btfsc	status,0,c
  5182  0076CE  D047               	goto	l2368
  5183  0076D0  D7AE               	goto	l2340
  5184  0076D2                     l2358:
  5185                           
  5186                           ;uart.c: 316: {
  5187                           ;uart.c: 318: UART_TxChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  5188  0076D2  0EFF               	movlw	255
  5189  0076D4  6E13               	movwf	??_UART_TxNumber& (0+255),c
  5190  0076D6  0EFF               	movlw	255
  5191  0076D8  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  5192  0076DA  502B               	movf	UART_TxNumber@i,w,c
  5193  0076DC  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  5194  0076DE  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  5195  0076E0  5013               	movf	??_UART_TxNumber,w,c
  5196  0076E2  2615               	addwf	??_UART_TxNumber+2,f,c
  5197  0076E4  5014               	movf	??_UART_TxNumber+1,w,c
  5198  0076E6  2216               	addwfc	??_UART_TxNumber+3,f,c
  5199  0076E8  0E1E               	movlw	low UART_TxNumber@a
  5200  0076EA  2415               	addwf	??_UART_TxNumber+2,w,c
  5201  0076EC  6ED9               	movwf	fsr2l,c
  5202  0076EE  0E00               	movlw	high UART_TxNumber@a
  5203  0076F0  2016               	addwfc	??_UART_TxNumber+3,w,c
  5204  0076F2  6EDA               	movwf	fsr2h,c
  5205  0076F4  0E0A               	movlw	10
  5206  0076F6  60DF               	cpfslt	indf2,c
  5207  0076F8  D015               	goto	l2362
  5208  0076FA  0EFF               	movlw	255
  5209  0076FC  6E13               	movwf	??_UART_TxNumber& (0+255),c
  5210  0076FE  0EFF               	movlw	255
  5211  007700  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  5212  007702  502B               	movf	UART_TxNumber@i,w,c
  5213  007704  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  5214  007706  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  5215  007708  5013               	movf	??_UART_TxNumber,w,c
  5216  00770A  2615               	addwf	??_UART_TxNumber+2,f,c
  5217  00770C  5014               	movf	??_UART_TxNumber+1,w,c
  5218  00770E  2216               	addwfc	??_UART_TxNumber+3,f,c
  5219  007710  0E1E               	movlw	low UART_TxNumber@a
  5220  007712  2415               	addwf	??_UART_TxNumber+2,w,c
  5221  007714  6ED9               	movwf	fsr2l,c
  5222  007716  0E00               	movlw	high UART_TxNumber@a
  5223  007718  2016               	addwfc	??_UART_TxNumber+3,w,c
  5224  00771A  6EDA               	movwf	fsr2h,c
  5225  00771C  50DF               	movf	indf2,w,c
  5226  00771E  6E17               	movwf	(??_UART_TxNumber+4)& (0+255),c
  5227  007720  0E30               	movlw	48
  5228  007722  D014               	goto	L4
  5229  007724                     l2362:
  5230  007724  0EFF               	movlw	255
  5231  007726  6E13               	movwf	??_UART_TxNumber& (0+255),c
  5232  007728  0EFF               	movlw	255
  5233  00772A  6E14               	movwf	(??_UART_TxNumber+1)& (0+255),c
  5234  00772C  502B               	movf	UART_TxNumber@i,w,c
  5235  00772E  6E15               	movwf	(??_UART_TxNumber+2)& (0+255),c
  5236  007730  6A16               	clrf	(??_UART_TxNumber+3)& (0+255),c
  5237  007732  5013               	movf	??_UART_TxNumber,w,c
  5238  007734  2615               	addwf	??_UART_TxNumber+2,f,c
  5239  007736  5014               	movf	??_UART_TxNumber+1,w,c
  5240  007738  2216               	addwfc	??_UART_TxNumber+3,f,c
  5241  00773A  0E1E               	movlw	low UART_TxNumber@a
  5242  00773C  2415               	addwf	??_UART_TxNumber+2,w,c
  5243  00773E  6ED9               	movwf	fsr2l,c
  5244  007740  0E00               	movlw	high UART_TxNumber@a
  5245  007742  2016               	addwfc	??_UART_TxNumber+3,w,c
  5246  007744  6EDA               	movwf	fsr2h,c
  5247  007746  50DF               	movf	indf2,w,c
  5248  007748  6E17               	movwf	(??_UART_TxNumber+4)& (0+255),c
  5249  00774A  0E37               	movlw	55
  5250  00774C                     L4:
  5251  00774C  2417               	addwf	??_UART_TxNumber+4,w,c
  5252  00774E  6E28               	movwf	_UART_TxNumber$586,c
  5253  007750  6A29               	clrf	_UART_TxNumber$586+1,c
  5254  007752  0E00               	movlw	0
  5255  007754  2229               	addwfc	_UART_TxNumber$586+1,f,c
  5256  007756  5028               	movf	_UART_TxNumber$586,w,c
  5257  007758  EC76  F034         	call	_UART_TxChar
  5258                           
  5259                           ;uart.c: 319: i--;
  5260  00775C  062B               	decf	UART_TxNumber@i,f,c
  5261  00775E                     l2368:
  5262  00775E  502B               	movf	UART_TxNumber@i,w,c
  5263  007760  B4D8               	btfsc	status,2,c
  5264  007762  0012               	return	
  5265  007764  D7B6               	goto	l2358
  5266  007766                     __end_of_UART_TxNumber:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           postinc0	equ	0xFEE
  5276                           wreg	equ	0xFE8
  5277                           postdec1	equ	0xFE5
  5278                           fsr1l	equ	0xFE1
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _UART_TxChar *****************
  5287 ;; Defined at:
  5288 ;;		line 145 in file "../00-libfiles/uart.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  v_uartData_u    1    wreg     unsigned char 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  v_uartData_u    1    0[COMRAM] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5302 ;;      Params:         0       0       0       0       0       0       0
  5303 ;;      Locals:         1       0       0       0       0       0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0
  5305 ;;      Totals:         1       0       0       0       0       0       0
  5306 ;;Total ram usage:        1 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; This function calls:
  5309 ;;		Nothing
  5310 ;; This function is called by:
  5311 ;;		_UART_TxString
  5312 ;;		_UART_TxNumber
  5313 ;;		_UART_Printf
  5314 ;;		_UART_RxString
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text30
  5319  0068EC                     __ptext30:
  5320                           	opt stack 0
  5321  0068EC                     _UART_TxChar:
  5322                           	opt stack 28
  5323                           
  5324                           ;incstack = 0
  5325                           ;UART_TxChar@v_uartData_u8 stored from wreg
  5326  0068EC  6E01               	movwf	UART_TxChar@v_uartData_u8,c
  5327  0068EE                     l513:
  5328  0068EE  A89E               	btfss	3998,4,c	;volatile
  5329  0068F0  D7FE               	goto	l513
  5330                           
  5331                           ;uart.c: 148: TXIF=0;
  5332  0068F2  989E               	bcf	3998,4,c	;volatile
  5333                           
  5334                           ;uart.c: 149: TXREG=v_uartData_u8;
  5335  0068F4  C001  FFAD         	movff	UART_TxChar@v_uartData_u8,4013	;volatile
  5336  0068F8  0012               	return		;funcret
  5337  0068FA                     __end_of_UART_TxChar:
  5338                           	opt stack 0
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           intcon	equ	0xFF2
  5346                           postinc0	equ	0xFEE
  5347                           wreg	equ	0xFE8
  5348                           postdec1	equ	0xFE5
  5349                           fsr1l	equ	0xFE1
  5350                           indf2	equ	0xFDF
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _ADC_Init *****************
  5358 ;; Defined at:
  5359 ;;		line 54 in file "../00-libfiles/adc.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5373 ;;      Params:         0       0       0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0
  5376 ;;      Totals:         0       0       0       0       0       0       0
  5377 ;;Total ram usage:        0 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_adc_Test
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text31
  5387  0068DE                     __ptext31:
  5388                           	opt stack 0
  5389  0068DE                     _ADC_Init:
  5390                           	opt stack 29
  5391                           
  5392                           ;adc.c: 56: ADCON0 = 0x00;
  5393                           
  5394                           ;incstack = 0
  5395  0068DE  0E00               	movlw	0
  5396  0068E0  6EC2               	movwf	4034,c	;volatile
  5397                           
  5398                           ;adc.c: 57: ADCON1 = 0x00;
  5399  0068E2  0E00               	movlw	0
  5400  0068E4  6EC1               	movwf	4033,c	;volatile
  5401                           
  5402                           ;adc.c: 58: ADCON2 = 0x82;
  5403  0068E6  0E82               	movlw	130
  5404  0068E8  6EC0               	movwf	4032,c	;volatile
  5405  0068EA  0012               	return		;funcret
  5406  0068EC                     __end_of_ADC_Init:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           intcon	equ	0xFF2
  5415                           postinc0	equ	0xFEE
  5416                           wreg	equ	0xFE8
  5417                           postdec1	equ	0xFE5
  5418                           fsr1l	equ	0xFE1
  5419                           indf2	equ	0xFDF
  5420                           postinc2	equ	0xFDE
  5421                           postdec2	equ	0xFDD
  5422                           fsr2h	equ	0xFDA
  5423                           fsr2l	equ	0xFD9
  5424                           status	equ	0xFD8
  5425                           
  5426 ;; *************** function _ADC_GetAdcValue *****************
  5427 ;; Defined at:
  5428 ;;		line 76 in file "../00-libfiles/adc.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;  var_adcChann    1    wreg     unsigned char 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  var_adcChann    1    6[COMRAM] unsigned char 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  2    2[COMRAM] unsigned int 
  5435 ;; Registers used:
  5436 ;;		wreg, status,2, status,0, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5442 ;;      Params:         2       0       0       0       0       0       0
  5443 ;;      Locals:         1       0       0       0       0       0       0
  5444 ;;      Temps:          2       0       0       0       0       0       0
  5445 ;;      Totals:         5       0       0       0       0       0       0
  5446 ;;Total ram usage:        5 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    1
  5449 ;; This function calls:
  5450 ;;		_DELAY_us
  5451 ;; This function is called by:
  5452 ;;		_adc_Test
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           	psect	text32
  5457  006A88                     __ptext32:
  5458                           	opt stack 0
  5459  006A88                     _ADC_GetAdcValue:
  5460                           	opt stack 28
  5461                           
  5462                           ;incstack = 0
  5463                           ;ADC_GetAdcValue@var_adcChannel_u8 stored from wreg
  5464  006A88  6E07               	movwf	ADC_GetAdcValue@var_adcChannel_u8,c
  5465                           
  5466                           ;adc.c: 79: ADCON0= (var_adcChannel_u8<<2);
  5467  006A8A  4407               	rlncf	ADC_GetAdcValue@var_adcChannel_u8,w,c
  5468  006A8C  46E8               	rlncf	wreg,f,c
  5469  006A8E  0BFC               	andlw	252
  5470  006A90  6EC2               	movwf	4034,c	;volatile
  5471                           
  5472                           ;adc.c: 80: ADON = 1;
  5473  006A92  80C2               	bsf	4034,0,c	;volatile
  5474                           
  5475                           ;adc.c: 81: DELAY_us(10);
  5476  006A94  0E00               	movlw	0
  5477  006A96  6E02               	movwf	DELAY_us@us_count+1,c
  5478  006A98  0E0A               	movlw	10
  5479  006A9A  6E01               	movwf	DELAY_us@us_count,c
  5480  006A9C  EC8C  F034         	call	_DELAY_us	;wreg free
  5481                           
  5482                           ;adc.c: 83: GO=1;
  5483  006AA0  82C2               	bsf	4034,1,c	;volatile
  5484  006AA2                     l136:
  5485  006AA2  B2C2               	btfsc	4034,1,c	;volatile
  5486  006AA4  D7FE               	goto	l136
  5487                           
  5488                           ;adc.c: 87: return((ADRESH<<8) + ADRESL);
  5489  006AA6  50C4               	movf	4036,w,c	;volatile
  5490  006AA8  6E06               	movwf	(??_ADC_GetAdcValue+1)& (0+255),c
  5491  006AAA  6A05               	clrf	??_ADC_GetAdcValue& (0+255),c
  5492  006AAC  50C3               	movf	4035,w,c	;volatile
  5493  006AAE  2405               	addwf	??_ADC_GetAdcValue,w,c
  5494  006AB0  6E03               	movwf	?_ADC_GetAdcValue,c
  5495  006AB2  0E00               	movlw	0
  5496  006AB4  2006               	addwfc	??_ADC_GetAdcValue+1,w,c
  5497  006AB6  6E04               	movwf	?_ADC_GetAdcValue+1,c
  5498  006AB8  0012               	return	
  5499  006ABA                     __end_of_ADC_GetAdcValue:
  5500                           	opt stack 0
  5501                           tblptru	equ	0xFF8
  5502                           tblptrh	equ	0xFF7
  5503                           tblptrl	equ	0xFF6
  5504                           tablat	equ	0xFF5
  5505                           prodh	equ	0xFF4
  5506                           prodl	equ	0xFF3
  5507                           intcon	equ	0xFF2
  5508                           postinc0	equ	0xFEE
  5509                           wreg	equ	0xFE8
  5510                           postdec1	equ	0xFE5
  5511                           fsr1l	equ	0xFE1
  5512                           indf2	equ	0xFDF
  5513                           postinc2	equ	0xFDE
  5514                           postdec2	equ	0xFDD
  5515                           fsr2h	equ	0xFDA
  5516                           fsr2l	equ	0xFD9
  5517                           status	equ	0xFD8
  5518                           
  5519 ;; *************** function _DELAY_us *****************
  5520 ;; Defined at:
  5521 ;;		line 56 in file "../00-libfiles/delay.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;  us_count        2    0[COMRAM] unsigned int 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      void 
  5528 ;; Registers used:
  5529 ;;		wreg, status,2, status,0
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5535 ;;      Params:         2       0       0       0       0       0       0
  5536 ;;      Locals:         0       0       0       0       0       0       0
  5537 ;;      Temps:          0       0       0       0       0       0       0
  5538 ;;      Totals:         2       0       0       0       0       0       0
  5539 ;;Total ram usage:        2 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; This function calls:
  5542 ;;		Nothing
  5543 ;; This function is called by:
  5544 ;;		_ADC_GetAdcValue
  5545 ;;		_DELAY_ms
  5546 ;;		_lcd_BusyCheck
  5547 ;;		_lcd_Reset
  5548 ;;		_lcd_SendCmdSignals
  5549 ;;		_lcd_SendDataSignals
  5550 ;;		_keypad_WaitForKeyRelease
  5551 ;;		_keypad_WaitForKeyPress
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           	psect	text33
  5556  006918                     __ptext33:
  5557                           	opt stack 0
  5558  006918                     _DELAY_us:
  5559                           	opt stack 28
  5560                           
  5561                           ;delay.c: 58: while (us_count != 0)
  5562                           
  5563                           ;incstack = 0
  5564  006918  D003               	goto	l2118
  5565  00691A                     l2116:
  5566                           
  5567                           ;delay.c: 59: {
  5568                           ;delay.c: 60: us_count--;
  5569  00691A  0601               	decf	DELAY_us@us_count,f,c
  5570  00691C  A0D8               	btfss	status,0,c
  5571  00691E  0602               	decf	DELAY_us@us_count+1,f,c
  5572  006920                     l2118:
  5573  006920  5001               	movf	DELAY_us@us_count,w,c
  5574  006922  1002               	iorwf	DELAY_us@us_count+1,w,c
  5575  006924  B4D8               	btfsc	status,2,c
  5576  006926  0012               	return	
  5577  006928  D7F8               	goto	l2116
  5578  00692A                     __end_of_DELAY_us:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           postdec1	equ	0xFE5
  5590                           fsr1l	equ	0xFE1
  5591                           indf2	equ	0xFDF
  5592                           postinc2	equ	0xFDE
  5593                           postdec2	equ	0xFDD
  5594                           fsr2h	equ	0xFDA
  5595                           fsr2l	equ	0xFD9
  5596                           status	equ	0xFD8
  5597                           
  5598 ;; *************** function _UART_RxChar *****************
  5599 ;; Defined at:
  5600 ;;		line 123 in file "../00-libfiles/uart.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;		None
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;		None
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      unsigned char 
  5607 ;; Registers used:
  5608 ;;		wreg, status,2
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5614 ;;      Params:         0       0       0       0       0       0       0
  5615 ;;      Locals:         0       0       0       0       0       0       0
  5616 ;;      Temps:          0       0       0       0       0       0       0
  5617 ;;      Totals:         0       0       0       0       0       0       0
  5618 ;;Total ram usage:        0 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_main
  5624 ;;		_UART_RxString
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text34
  5629  0068D4                     __ptext34:
  5630                           	opt stack 0
  5631  0068D4                     _UART_RxChar:
  5632                           	opt stack 30
  5633  0068D4                     l507:
  5634  0068D4  AA9E               	btfss	3998,5,c	;volatile
  5635  0068D6  D7FE               	goto	l507
  5636                           
  5637                           ;uart.c: 126: RCIF=0;
  5638  0068D8  9A9E               	bcf	3998,5,c	;volatile
  5639                           
  5640                           ;uart.c: 127: return(RCREG);
  5641  0068DA  50AE               	movf	4014,w,c	;volatile
  5642  0068DC  0012               	return	
  5643  0068DE                     __end_of_UART_RxChar:
  5644                           	opt stack 0
  5645                           tblptru	equ	0xFF8
  5646                           tblptrh	equ	0xFF7
  5647                           tblptrl	equ	0xFF6
  5648                           tablat	equ	0xFF5
  5649                           prodh	equ	0xFF4
  5650                           prodl	equ	0xFF3
  5651                           intcon	equ	0xFF2
  5652                           postinc0	equ	0xFEE
  5653                           wreg	equ	0xFE8
  5654                           postdec1	equ	0xFE5
  5655                           fsr1l	equ	0xFE1
  5656                           indf2	equ	0xFDF
  5657                           postinc2	equ	0xFDE
  5658                           postdec2	equ	0xFDD
  5659                           fsr2h	equ	0xFDA
  5660                           fsr2l	equ	0xFD9
  5661                           status	equ	0xFD8
  5662                           
  5663 ;; *************** function _UART_Init *****************
  5664 ;; Defined at:
  5665 ;;		line 66 in file "../00-libfiles/uart.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  v_baudRate_u    4   22[COMRAM] unsigned long 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;		None
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      void 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5679 ;;      Params:         4       0       0       0       0       0       0
  5680 ;;      Locals:         0       0       0       0       0       0       0
  5681 ;;      Temps:          0       0       0       0       0       0       0
  5682 ;;      Totals:         4       0       0       0       0       0       0
  5683 ;;Total ram usage:        4 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    2
  5686 ;; This function calls:
  5687 ;;		_UART_SetBaudRate
  5688 ;; This function is called by:
  5689 ;;		_main
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text35
  5694  006968                     __ptext35:
  5695                           	opt stack 0
  5696  006968                     _UART_Init:
  5697                           	opt stack 28
  5698                           
  5699                           ;uart.c: 68: TRISC=0x80;
  5700                           
  5701                           ;incstack = 0
  5702  006968  0E80               	movlw	128
  5703  00696A  6E94               	movwf	3988,c	;volatile
  5704                           
  5705                           ;uart.c: 69: TXSTA=0x20;
  5706  00696C  0E20               	movlw	32
  5707  00696E  6EAC               	movwf	4012,c	;volatile
  5708                           
  5709                           ;uart.c: 70: RCSTA=0x90;
  5710  006970  0E90               	movlw	144
  5711  006972  6EAB               	movwf	4011,c	;volatile
  5712                           
  5713                           ;uart.c: 71: UART_SetBaudRate(v_baudRate_u32);
  5714  006974  C017  F00E         	movff	UART_Init@v_baudRate_u32,UART_SetBaudRate@v_baudRate_u32
  5715  006978  C018  F00F         	movff	UART_Init@v_baudRate_u32+1,UART_SetBaudRate@v_baudRate_u32+1
  5716  00697C  C019  F010         	movff	UART_Init@v_baudRate_u32+2,UART_SetBaudRate@v_baudRate_u32+2
  5717  006980  C01A  F011         	movff	UART_Init@v_baudRate_u32+3,UART_SetBaudRate@v_baudRate_u32+3
  5718  006984  ECD2  F036         	call	_UART_SetBaudRate	;wreg free
  5719  006988  0012               	return		;funcret
  5720  00698A                     __end_of_UART_Init:
  5721                           	opt stack 0
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           prodh	equ	0xFF4
  5727                           prodl	equ	0xFF3
  5728                           intcon	equ	0xFF2
  5729                           postinc0	equ	0xFEE
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           fsr1l	equ	0xFE1
  5733                           indf2	equ	0xFDF
  5734                           postinc2	equ	0xFDE
  5735                           postdec2	equ	0xFDD
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740 ;; *************** function _UART_SetBaudRate *****************
  5741 ;; Defined at:
  5742 ;;		line 91 in file "../00-libfiles/uart.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  v_baudRate_u    4   13[COMRAM] unsigned long 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;  RegValue        1   21[COMRAM] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      void 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2, status,0, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5756 ;;      Params:         4       0       0       0       0       0       0
  5757 ;;      Locals:         1       0       0       0       0       0       0
  5758 ;;      Temps:          4       0       0       0       0       0       0
  5759 ;;      Totals:         9       0       0       0       0       0       0
  5760 ;;Total ram usage:        9 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    1
  5763 ;; This function calls:
  5764 ;;		___lldiv
  5765 ;; This function is called by:
  5766 ;;		_UART_Init
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text36
  5771  006DA4                     __ptext36:
  5772                           	opt stack 0
  5773  006DA4                     _UART_SetBaudRate:
  5774                           	opt stack 28
  5775                           
  5776                           ;uart.c: 93: uint8_t RegValue;
  5777                           ;uart.c: 95: if((v_baudRate_u32 >= 2400) && (v_baudRate_u32<=115200UL))
  5778                           
  5779                           ;incstack = 0
  5780  006DA4  5011               	movf	UART_SetBaudRate@v_baudRate_u32+3,w,c
  5781  006DA6  1010               	iorwf	UART_SetBaudRate@v_baudRate_u32+2,w,c
  5782  006DA8  E106               	bnz	u2690
  5783  006DAA  0E60               	movlw	96
  5784  006DAC  5C0E               	subwf	UART_SetBaudRate@v_baudRate_u32,w,c
  5785  006DAE  0E09               	movlw	9
  5786  006DB0  580F               	subwfb	UART_SetBaudRate@v_baudRate_u32+1,w,c
  5787  006DB2  A0D8               	btfss	status,0,c
  5788  006DB4  D02D               	goto	l2618
  5789  006DB6                     u2690:
  5790  006DB6  5011               	movf	UART_SetBaudRate@v_baudRate_u32+3,w,c
  5791  006DB8  E12B               	bnz	l2618
  5792  006DBA  040E               	decf	UART_SetBaudRate@v_baudRate_u32,w,c
  5793  006DBC  0EC2               	movlw	194
  5794  006DBE  580F               	subwfb	UART_SetBaudRate@v_baudRate_u32+1,w,c
  5795  006DC0  0E01               	movlw	1
  5796  006DC2  5810               	subwfb	UART_SetBaudRate@v_baudRate_u32+2,w,c
  5797  006DC4  B0D8               	btfsc	status,0,c
  5798  006DC6  D024               	goto	l2618
  5799                           
  5800                           ;uart.c: 96: {
  5801                           ;uart.c: 99: RegValue = (uint8_t)(uint32_t)((20000000UL / (64*(uint32_t)v_baudRate_u32))
      +                           - 1);
  5802  006DC8  0E00               	movlw	0
  5803  006DCA  6E01               	movwf	___lldiv@dividend,c
  5804  006DCC  0E2D               	movlw	45
  5805  006DCE  6E02               	movwf	___lldiv@dividend+1,c
  5806  006DD0  0E31               	movlw	49
  5807  006DD2  6E03               	movwf	___lldiv@dividend+2,c
  5808  006DD4  0E01               	movlw	1
  5809  006DD6  6E04               	movwf	___lldiv@dividend+3,c
  5810  006DD8  C00E  F012         	movff	UART_SetBaudRate@v_baudRate_u32,??_UART_SetBaudRate
  5811  006DDC  C00F  F013         	movff	UART_SetBaudRate@v_baudRate_u32+1,??_UART_SetBaudRate+1
  5812  006DE0  C010  F014         	movff	UART_SetBaudRate@v_baudRate_u32+2,??_UART_SetBaudRate+2
  5813  006DE4  C011  F015         	movff	UART_SetBaudRate@v_baudRate_u32+3,??_UART_SetBaudRate+3
  5814  006DE8  0E06               	movlw	6
  5815  006DEA                     u2715:
  5816  006DEA  90D8               	bcf	status,0,c
  5817  006DEC  3612               	rlcf	??_UART_SetBaudRate,f,c
  5818  006DEE  3613               	rlcf	??_UART_SetBaudRate+1,f,c
  5819  006DF0  3614               	rlcf	??_UART_SetBaudRate+2,f,c
  5820  006DF2  3615               	rlcf	??_UART_SetBaudRate+3,f,c
  5821  006DF4  2EE8               	decfsz	wreg,f,c
  5822  006DF6  D7F9               	goto	u2715
  5823  006DF8  C012  F005         	movff	??_UART_SetBaudRate,___lldiv@divisor
  5824  006DFC  C013  F006         	movff	??_UART_SetBaudRate+1,___lldiv@divisor+1
  5825  006E00  C014  F007         	movff	??_UART_SetBaudRate+2,___lldiv@divisor+2
  5826  006E04  C015  F008         	movff	??_UART_SetBaudRate+3,___lldiv@divisor+3
  5827  006E08  EC4A  F037         	call	___lldiv	;wreg free
  5828  006E0C  0401               	decf	?___lldiv,w,c
  5829  006E0E  D001               	goto	L5
  5830  006E10                     l2618:
  5831                           
  5832                           ;uart.c: 101: else
  5833                           ;uart.c: 102: {
  5834                           ;uart.c: 104: RegValue = (uint8_t)(uint32_t)((20000000UL / (64*(uint32_t)9600)) - 1);
  5835  006E10  0E1F               	movlw	31
  5836  006E12                     L5:
  5837  006E12  6E16               	movwf	UART_SetBaudRate@RegValue,c
  5838                           
  5839                           ;uart.c: 105: }
  5840                           ;uart.c: 107: SPBRG = RegValue;
  5841  006E14  C016  FFAF         	movff	UART_SetBaudRate@RegValue,4015	;volatile
  5842  006E18  0012               	return		;funcret
  5843  006E1A                     __end_of_UART_SetBaudRate:
  5844                           	opt stack 0
  5845                           tblptru	equ	0xFF8
  5846                           tblptrh	equ	0xFF7
  5847                           tblptrl	equ	0xFF6
  5848                           tablat	equ	0xFF5
  5849                           prodh	equ	0xFF4
  5850                           prodl	equ	0xFF3
  5851                           intcon	equ	0xFF2
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           postdec1	equ	0xFE5
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           fsr2h	equ	0xFDA
  5860                           fsr2l	equ	0xFD9
  5861                           status	equ	0xFD8
  5862                           
  5863 ;; *************** function ___lldiv *****************
  5864 ;; Defined at:
  5865 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.36\sources\common\lldiv.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;  dividend        4    0[COMRAM] unsigned long 
  5868 ;;  divisor         4    4[COMRAM] unsigned long 
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;  quotient        4    8[COMRAM] unsigned long 
  5871 ;;  counter         1   12[COMRAM] unsigned char 
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  4    0[COMRAM] unsigned long 
  5874 ;; Registers used:
  5875 ;;		wreg, status,2, status,0
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5881 ;;      Params:         8       0       0       0       0       0       0
  5882 ;;      Locals:         5       0       0       0       0       0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0
  5884 ;;      Totals:        13       0       0       0       0       0       0
  5885 ;;Total ram usage:       13 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; This function calls:
  5888 ;;		Nothing
  5889 ;; This function is called by:
  5890 ;;		_UART_SetBaudRate
  5891 ;;		_UART_TxNumber
  5892 ;;		_LCD_DisplayNumber
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           	psect	text37
  5897  006E94                     __ptext37:
  5898                           	opt stack 0
  5899  006E94                     ___lldiv:
  5900                           	opt stack 27
  5901                           
  5902                           ;incstack = 0
  5903  006E94  0E00               	movlw	0
  5904  006E96  6E09               	movwf	___lldiv@quotient,c
  5905  006E98  0E00               	movlw	0
  5906  006E9A  6E0A               	movwf	___lldiv@quotient+1,c
  5907  006E9C  0E00               	movlw	0
  5908  006E9E  6E0B               	movwf	___lldiv@quotient+2,c
  5909  006EA0  0E00               	movlw	0
  5910  006EA2  6E0C               	movwf	___lldiv@quotient+3,c
  5911  006EA4  5005               	movf	___lldiv@divisor,w,c
  5912  006EA6  1006               	iorwf	___lldiv@divisor+1,w,c
  5913  006EA8  1007               	iorwf	___lldiv@divisor+2,w,c
  5914  006EAA  1008               	iorwf	___lldiv@divisor+3,w,c
  5915  006EAC  B4D8               	btfsc	status,2,c
  5916  006EAE  D02A               	goto	l946
  5917  006EB0  0E01               	movlw	1
  5918  006EB2  6E0D               	movwf	___lldiv@counter,c
  5919  006EB4  D006               	goto	l2280
  5920  006EB6                     l2278:
  5921  006EB6  90D8               	bcf	status,0,c
  5922  006EB8  3605               	rlcf	___lldiv@divisor,f,c
  5923  006EBA  3606               	rlcf	___lldiv@divisor+1,f,c
  5924  006EBC  3607               	rlcf	___lldiv@divisor+2,f,c
  5925  006EBE  3608               	rlcf	___lldiv@divisor+3,f,c
  5926  006EC0  2A0D               	incf	___lldiv@counter,f,c
  5927  006EC2                     l2280:
  5928  006EC2  AE08               	btfss	___lldiv@divisor+3,7,c
  5929  006EC4  D7F8               	goto	l2278
  5930  006EC6                     l2282:
  5931  006EC6  90D8               	bcf	status,0,c
  5932  006EC8  3609               	rlcf	___lldiv@quotient,f,c
  5933  006ECA  360A               	rlcf	___lldiv@quotient+1,f,c
  5934  006ECC  360B               	rlcf	___lldiv@quotient+2,f,c
  5935  006ECE  360C               	rlcf	___lldiv@quotient+3,f,c
  5936  006ED0  5005               	movf	___lldiv@divisor,w,c
  5937  006ED2  5C01               	subwf	___lldiv@dividend,w,c
  5938  006ED4  5006               	movf	___lldiv@divisor+1,w,c
  5939  006ED6  5802               	subwfb	___lldiv@dividend+1,w,c
  5940  006ED8  5007               	movf	___lldiv@divisor+2,w,c
  5941  006EDA  5803               	subwfb	___lldiv@dividend+2,w,c
  5942  006EDC  5008               	movf	___lldiv@divisor+3,w,c
  5943  006EDE  5804               	subwfb	___lldiv@dividend+3,w,c
  5944  006EE0  A0D8               	btfss	status,0,c
  5945  006EE2  D009               	goto	l2290
  5946  006EE4  5005               	movf	___lldiv@divisor,w,c
  5947  006EE6  5E01               	subwf	___lldiv@dividend,f,c
  5948  006EE8  5006               	movf	___lldiv@divisor+1,w,c
  5949  006EEA  5A02               	subwfb	___lldiv@dividend+1,f,c
  5950  006EEC  5007               	movf	___lldiv@divisor+2,w,c
  5951  006EEE  5A03               	subwfb	___lldiv@dividend+2,f,c
  5952  006EF0  5008               	movf	___lldiv@divisor+3,w,c
  5953  006EF2  5A04               	subwfb	___lldiv@dividend+3,f,c
  5954  006EF4  8009               	bsf	___lldiv@quotient,0,c
  5955  006EF6                     l2290:
  5956  006EF6  90D8               	bcf	status,0,c
  5957  006EF8  3208               	rrcf	___lldiv@divisor+3,f,c
  5958  006EFA  3207               	rrcf	___lldiv@divisor+2,f,c
  5959  006EFC  3206               	rrcf	___lldiv@divisor+1,f,c
  5960  006EFE  3205               	rrcf	___lldiv@divisor,f,c
  5961  006F00  2E0D               	decfsz	___lldiv@counter,f,c
  5962  006F02  D7E1               	goto	l2282
  5963  006F04                     l946:
  5964  006F04  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5965  006F08  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5966  006F0C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5967  006F10  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5968  006F14  0012               	return		;funcret
  5969  006F16                     __end_of___lldiv:
  5970                           	opt stack 0
  5971                           tblptru	equ	0xFF8
  5972                           tblptrh	equ	0xFF7
  5973                           tblptrl	equ	0xFF6
  5974                           tablat	equ	0xFF5
  5975                           prodh	equ	0xFF4
  5976                           prodl	equ	0xFF3
  5977                           intcon	equ	0xFF2
  5978                           postinc0	equ	0xFEE
  5979                           wreg	equ	0xFE8
  5980                           postdec1	equ	0xFE5
  5981                           fsr1l	equ	0xFE1
  5982                           indf2	equ	0xFDF
  5983                           postinc2	equ	0xFDE
  5984                           postdec2	equ	0xFDD
  5985                           fsr2h	equ	0xFDA
  5986                           fsr2l	equ	0xFD9
  5987                           status	equ	0xFD8
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           postinc0	equ	0xFEE
  5996                           wreg	equ	0xFE8
  5997                           postdec1	equ	0xFE5
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006                           	psect	rparam
  6007  0000                     tblptru	equ	0xFF8
  6008                           tblptrh	equ	0xFF7
  6009                           tblptrl	equ	0xFF6
  6010                           tablat	equ	0xFF5
  6011                           prodh	equ	0xFF4
  6012                           prodl	equ	0xFF3
  6013                           intcon	equ	0xFF2
  6014                           postinc0	equ	0xFEE
  6015                           wreg	equ	0xFE8
  6016                           postdec1	equ	0xFE5
  6017                           fsr1l	equ	0xFE1
  6018                           indf2	equ	0xFDF
  6019                           postinc2	equ	0xFDE
  6020                           postdec2	equ	0xFDD
  6021                           fsr2h	equ	0xFDA
  6022                           fsr2l	equ	0xFD9
  6023                           status	equ	0xFD8


Data Sizes:
    Strings     335
    Constant    16
    Data        4
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     75     103
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    UART_Printf@str	PTR unsigned char  size(2) Largest target is 0

    UART_Printf@argList	PTR const unsigned char  size(2) Largest target is 131
		 -> STR_7(CODE[16]), STR_6(CODE[23]), STR_5(CODE[69]), STR_4(CODE[18]), 
		 -> STR_1(CODE[131]), 

    UART_Printf@ptr	PTR const unsigned char  size(2) Largest target is 131
		 -> STR_7(CODE[16]), STR_6(CODE[23]), STR_5(CODE[69]), STR_4(CODE[18]), 
		 -> STR_1(CODE[131]), 

    UART_Printf@argp	PTR void [1] size(2) Largest target is 1
		 -> ?_UART_Printf(COMRAM[1]), 

    UART_TxString@ptr_string	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_3(CODE[54]), 

    LCD_DisplayString@ptr_stringPointer_u8	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_2(CODE[24]), 


Critical Paths under _main in COMRAM

    _main->_eeprom_Test
    _switch_Test->_GPIO_PinWrite
    _led_Test->_DELAY_ms
    _lcd_Test->_LCD_SetUp
    _LCD_SetUp->_GPIO_PinDirection
    _lcd_Reset->_lcd_SendHigherNibble
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_DisplayString->_LCD_DisplayChar
    _LCD_DisplayChar->_lcd_DataWrite
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_DataWrite->_lcd_SendHigherNibble
    _lcd_DataWrite->_lcd_SendLowerNibble
    _lcd_SendDataSignals->_GPIO_PinWrite
    _LCD_GoToNextLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _LCD_CmdWrite->_lcd_SendHigherNibble
    _LCD_CmdWrite->_lcd_SendLowerNibble
    _lcd_SendLowerNibble->_GPIO_PinWrite
    _lcd_SendHigherNibble->_GPIO_PinWrite
    _lcd_SendCmdSignals->_GPIO_PinWrite
    _lcd_BusyCheck->_GPIO_PinWrite
    _GPIO_PinWrite->_GPIO_PinRead
    _DELAY_ms->_DELAY_us
    _eeprom_Test->_UART_Printf
    _adc_Test->_UART_Printf
    _UART_Printf->_UART_TxNumber
    _UART_TxString->_UART_TxChar
    _UART_TxNumber->___lldiv
    _ADC_GetAdcValue->_DELAY_us
    _UART_Init->_UART_SetBaudRate
    _UART_SetBaudRate->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  117770
                                             74 COMRAM     1     1      0
                           _DELAY_ms
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
                          _UART_Init
                        _UART_Printf
                        _UART_RxChar
                           _adc_Test
                        _eeprom_Test
                           _lcd_Test
                           _led_Test
                        _switch_Test
 ---------------------------------------------------------------------------------
 (1) _switch_Test                                          0     0      0    4710
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (1) _led_Test                                             4     4      0    1634
                                              4 COMRAM     4     4      0
                           _DELAY_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_Test                                             0     0      0   90708
                  _LCD_DisplayString
                           _LCD_Init
                          _LCD_SetUp
 ---------------------------------------------------------------------------------
 (2) _LCD_SetUp                                           11     1     10    3082
                                              5 COMRAM    11     1     10
                  _GPIO_PinDirection
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             2     1      1   56457
                                             13 COMRAM     2     1      1
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (3) _lcd_Reset                                            0     0      0    8272
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
 ---------------------------------------------------------------------------------
 (3) _LCD_Clear                                            0     0      0   31060
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToLine                                         1     1      0   15563
                                             12 COMRAM     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayString                                    2     0      2   31169
                                             13 COMRAM     2     0      2
                    _LCD_DisplayChar
 ---------------------------------------------------------------------------------
 (3) _LCD_DisplayChar                                      1     1      0   31060
                                             12 COMRAM     1     1      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_DataWrite                                        1     1      0   15497
                                             11 COMRAM     1     1      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendDataSignals                                  0     0      0    3365
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToNextLine                                     0     0      0   15497
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (3) _LCD_CmdWrite                                         1     1      0   15497
                                             11 COMRAM     1     1      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (4) _lcd_SendLowerNibble                                  1     1      0    2598
                                             10 COMRAM     1     1      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_SendHigherNibble                                 1     1      0    2598
                                             10 COMRAM     1     1      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_SendCmdSignals                                   0     0      0    3365
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_BusyCheck                                        1     1      0    6847
                                             10 COMRAM     1     1      0
                           _DELAY_ms
                           _DELAY_us
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinWrite                                        5     4      1    2510
                                              5 COMRAM     5     4      1
                       _GPIO_PinRead (ARG)
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinRead                                         5     5      0     135
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinDirection                                    5     4      1    1870
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _DELAY_ms                                             2     0      2    1454
                                              2 COMRAM     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (1) _eeprom_Test                                          7     7      0    4547
                                             67 COMRAM     7     7      0
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
                        _UART_Printf
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteByte                                     4     1      3     195
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _EEPROM_ReadByte                                      2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_Test                                             0     0      0    5007
                    _ADC_GetAdcValue
                           _ADC_Init
                        _UART_Printf
 ---------------------------------------------------------------------------------
 (2) _UART_Printf                                         24    20      4    4130
                                             43 COMRAM    24    20      4
                    _ADC_GetAdcValue (ARG)
                        _UART_TxChar
                      _UART_TxNumber
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (2) _UART_TxString                                        2     0      2     195
                                              1 COMRAM     2     0      2
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (3) _UART_TxNumber                                       30    25      5    2502
                                             13 COMRAM    30    25      5
                        _UART_TxChar
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UART_TxChar                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetAdcValue                                      5     3      2     877
                                              2 COMRAM     5     3      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (3) _DELAY_us                                             2     0      2     855
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4    1042
                                             22 COMRAM     4     0      4
                   _UART_SetBaudRate
 ---------------------------------------------------------------------------------
 (2) _UART_SetBaudRate                                     9     5      4     956
                                             13 COMRAM     9     5      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     802
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DELAY_ms
     _DELAY_us
   _GPIO_PinDirection
   _GPIO_PinRead
   _GPIO_PinWrite
     _GPIO_PinRead (ARG)
   _UART_Init
     _UART_SetBaudRate
       ___lldiv
   _UART_Printf
     _ADC_GetAdcValue (ARG)
       _DELAY_us
     _UART_TxChar (ARG)
     _UART_TxNumber (ARG)
       _UART_TxChar
       ___lldiv
     _UART_TxString (ARG)
       _UART_TxChar
   _UART_RxChar
   _adc_Test
     _ADC_GetAdcValue
       _DELAY_us
     _ADC_Init
     _UART_Printf
       _ADC_GetAdcValue (ARG)
         _DELAY_us
       _UART_TxChar (ARG)
       _UART_TxNumber (ARG)
         _UART_TxChar
         ___lldiv
       _UART_TxString (ARG)
         _UART_TxChar
   _eeprom_Test
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _UART_Printf
       _ADC_GetAdcValue (ARG)
         _DELAY_us
       _UART_TxChar (ARG)
       _UART_TxNumber (ARG)
         _UART_TxChar
         ___lldiv
       _UART_TxString (ARG)
         _UART_TxChar
   _lcd_Test
     _LCD_DisplayString
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendHigherNibble
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendLowerNibble
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendHigherNibble
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendLowerNibble
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
     _LCD_Init
       _DELAY_ms
         _DELAY_us
       _LCD_Clear
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendHigherNibble
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
           _lcd_SendLowerNibble
             _GPIO_PinWrite
               _GPIO_PinRead (ARG)
         _LCD_GoToLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendHigherNibble
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
             _lcd_SendLowerNibble
               _GPIO_PinWrite
                 _GPIO_PinRead (ARG)
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
         _lcd_SendHigherNibble
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
         _lcd_SendLowerNibble
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
       _lcd_Reset
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
         _lcd_SendHigherNibble
           _GPIO_PinWrite
             _GPIO_PinRead (ARG)
     _LCD_SetUp
       _GPIO_PinDirection
   _led_Test
     _DELAY_ms
       _DELAY_us
   _switch_Test
     _GPIO_PinDirection
     _GPIO_PinRead
     _GPIO_PinWrite
       _GPIO_PinRead (ARG)
     _UART_TxString
       _UART_TxChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     4B      67       1       81.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      67      15        0.0%
DATA                 0      0      67       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Aug 13 19:13:42 2016

                          ?_LCD_CmdWrite 0001                                       l64 722C  
                                     l82 6F7E                                       l89 6C04  
                                     _GO 007E11                            ?_LCD_GoToLine 0001  
                            __CFG_BORV$2 000000                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                              __CFG_OSC$HS 000000  
                                    l109 6E92                                      l136 6AA2  
                                    l170 6A58                                      l176 6908  
                                    l513 68EE                                      l507 68D4  
                                    l455 6FD2                                      l389 6D98  
                                    l566 77DE                                      l946 6F04  
                                    _GIE 007F97                             __CFG_CPB$OFF 000000  
                                    u300 71C4                                      u204 7164  
                                    u205 7160                                      u234 717E  
                                    u235 717A                                      u190 7150  
                                    u174 7140                                      u271 71A2  
                                    u175 713C                                      u264 7198  
                                    u265 7194                             __CFG_CPD$OFF 000000  
                                    u294 71B6                                      u295 71B2  
        EEPROM_WriteByte@v_eepromData_u8 0003                                      prod 000FF3  
                                    wreg 000FE8                  __end_of_ADC_GetAdcValue 6ABA  
                __end_of_LCD_DisplayChar 69B0                             __CFG_LVP$OFF 000000  
                           __CFG_WDT$OFF 000000                                     l2122 72E8  
                                   l2116 691A                                     l2300 69C6  
                                   l2140 739C                                     l2132 7344  
                                   l1260 7154                                     l2212 704C  
                                   l2118 6920                                     l2150 73F8  
                                   l2134 7360                                     l2126 7308  
                                   l1262 716E                                     l1270 71C8  
                                   l2230 6AE0                                     l2144 73BC  
                                   l2128 7324                                     l1264 7188  
                                   l1272 71E8                                     l2208 703A  
                                   l2312 699A                                     l2402 77FE  
                                   l2146 73D8                                     l2138 7380  
                                   l2154 7414                                     l1266 71A6  
                                   l1258 7130                                     l2170 74C0  
                                   l2162 7468                                     l2226 6AD0  
                                   l2340 762E                                     l2332 760C  
                                   l2412 7828                                     l2180 751C  
                                   l2164 7484                                     l2252 69EC  
                                   l2260 6B02                                     l2326 75A6  
                                   l2334 7614                                     l2414 7846  
                                   l2182 7538                                     l2174 74E0  
                                   l2158 7448                                     l2190 7574  
                                   l2280 6EC2                                     l2352 76B2  
                                   l2432 78CC                                     l2424 7880  
                                   l2176 74FC                                     l2168 74A4  
                                   l2264 6B12                                     l2520 70A6  
                                   l2290 6EF6                                     l2282 6EC6  
                                   l2362 7724                                     l2354 76C6  
                                   l2346 76A4                                     l2338 7628  
                                   l2450 7974                                     l2426 789C  
                                   l2194 692C                                     l2186 7558  
                                   l2530 70D2                                     l2356 76C8  
                                   l2460 79AE                                     l2444 7938  
                                   l2372 7778                                     l2278 6EB6  
                                   l2358 76D2                                     l2470 79F4  
                                   l2438 7908                                     l2198 693E  
                                   l2518 70A0                                     l2368 775E  
                                   l2296 69B2                                     l2480 7A22  
                                   l2392 77D0                                     l2552 6D6A  
                                   l2800 729C                                     l2618 6E10  
                                   l2458 7996                                     l2386 77B2  
                                   l2482 7A80                                     l2570 6A1A  
                                   l2802 72A2                                     l2810 72B4  
                                   l2476 7A1A                                     l2468 79D8  
                                   l2484 7A86                                     l2396 77E2  
                                   l2652 6F6E                                     l2628 6F2A  
                                   l2804 72A8                                     l2486 7A8A  
                                   l2566 6A06                                     l2558 6D86  
                                   l2806 72AE                                     l2680 694C  
                                   l2674 6CD2                                     l2686 6E36  
                                   l2792 726E                                     l2796 728E  
                                   l2798 7296                                     _ADON 007E10  
                                   STR_1 7AAF                                     STR_2 7BAD  
            __end_of_A_KeyLookUptable_U8 7AAF                                     STR_3 7B77  
                                   STR_4 7BDC                                     STR_5 7B32  
                                   STR_6 7BC5                                     STR_7 7BEE  
                                   u2004 7568                                     u2100 6C82  
                                   u2005 7564                                     u2110 6C92  
                                   u2200 6C48                                     u2120 6C94  
                                   u2130 6C10                                     u2050 6C5C  
                                   u2140 6C12                                     u2060 6C5E  
                                   _LATA 000F89                                     u2150 6C22  
                                   u2070 6C6E                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u2160 6C24  
                                   u2080 6C70                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u2170 6C34  
                                   u2090 6C80                                     u2180 6C36  
                                   u2350 75FE                                     u2190 6C46  
                                   u2360 7600                                     u2344 75C0  
                                   u2345 75BA                                     u1724 72FE  
                                   u1725 72FA                                     u1814 73B2  
                                   u1734 7318                                     u1815 73AE  
                                   u1735 7314                                     u1824 73CC  
                                   u1904 749A                                     u1825 73C8  
                                   u1905 7496                                     u2650 6A84  
                                   u1754 733A                                     u1914 74B4  
                                   u2715 6DEA                                     u1755 7336  
                                   u1915 74B0                                     u1844 73EE  
                                   u1764 7354                                     u1845 73EA  
                                   u1765 7350                                     u1854 7408  
                                   u1934 74D6                                     u1855 7404  
                                   u1935 74D2                                     u1784 7376  
                                   u1944 74F0                                     u1785 7372  
                                   u1945 74EC                                     u2690 6DB6  
                                   u1794 7390                                     u1874 745E  
                                   u1795 738C                                     u1875 745A  
                                   u1964 7512                                     u1884 7478  
                                   u1965 750E                                     u1885 7474  
                                   u1974 752C                                     u1975 7528  
                                   u1994 754E                                     u1995 754A  
                                   _RCIF 007CF5                                     _TXIF 007CF4  
                                   _main 71EC                       __size_of_LCD_Clear 000E  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                       __end_of_ADC_Init 68EC                       __size_of_LCD_SetUp 00C0  
                                   prodl 000FF3                                     start 0000  
                          __CFG_IESO$OFF 000000                         __end_of_DELAY_ms 6948  
                       __end_of_DELAY_us 692A                 __size_of_EEPROM_ReadByte 0010  
                          __CFG_MCLRE$ON 000000                             ___param_bank 000010  
                          ?_GPIO_PinRead 0001                              _switch_Test 6C9E  
                         ??_LCD_CmdWrite 000C                              LCD_SetUp@D0 0008  
                            LCD_SetUp@D1 0009                              LCD_SetUp@D2 000A  
                            LCD_SetUp@D3 000B                              LCD_SetUp@D4 000C  
                            LCD_SetUp@D5 000D                              LCD_SetUp@D6 000E  
                            LCD_SetUp@D7 000F                              LCD_SetUp@EN 0007  
                            LCD_SetUp@RS 0010                              LCD_SetUp@RW 0006  
                         ??_LCD_GoToLine 000D                            _GPIO_PinWrite 7436  
                       __end_of_LCD_Init 6DA4                    eeprom_Test@write_char 0049  
                LCD_CmdWrite@v_lcdCmd_u8 000C                                    ?_main 0001  
                                  _EEADR 000FA9                          __end_of___lldiv 6F16  
                                  _RCREG 000FAE                                    _RCSTA 000FAB  
                                  _SPBRG 000FAF                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _PORTD 000F83                                    _PORTE 000F84  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _TXREG 000FAD  
                                  _TXSTA 000FAC                            __CFG_PWRT$OFF 000000  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                       __size_of_UART_Init 0022  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
  LCD_DisplayString@ptr_stringPointer_u8 000E                           __CFG_BOREN$OFF 000000  
                                  tablat 000FF5             __end_of_lcd_SendHigherNibble 6C52  
                                  status 000FD8                           ??_GPIO_PinRead 0001  
                        __initialization 6B8A               GPIO_PinWrite@enm_pinNumber 000A  
                           __end_of_main 72D6                           ?_GPIO_PinWrite 0006  
                      _GPIO_PinDirection 72D6                                   ??_main 004B  
            __size_of_lcd_SendCmdSignals 0036                        __end_of_LCD_Clear 6908  
                          __activetblptr 000002                       ?_GPIO_PinDirection 0001  
                      __end_of_LCD_SetUp 711A                         ?_ADC_GetAdcValue 0003  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                         ?_LCD_DisplayChar 0001  
            LCD_DisplayChar@v_lcdData_u8 000D                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                                 _EECON1 000FA6                                   _EECON2 000FA7  
                    ??_GPIO_PinDirection 0002                         __end_of_adc_Test 6968  
                      ?_UART_SetBaudRate 000E                    lcd_BusyCheck@busyflag 000B  
                     ??_UART_SetBaudRate 0012                             ?_UART_RxChar 0001  
                           ?_UART_TxChar 0001                     __size_of_eeprom_Test 007A  
                           ?_UART_Printf 002C                           __CFG_XINST$OFF 000000  
                       __end_of_lcd_Test 6C06                         __end_of_led_Test 6FAE  
              GPIO_PinRead@enm_pinNumber 0005                        __end_of_UART_Init 698A  
                              ??___lldiv 0009                __end_of_GPIO_PinDirection 7436  
                      ??_EEPROM_ReadByte 0003                          led_Test@pattern 0007  
                                 clear_0 6B90           GPIO_PinDirection@enm_pinNumber 0005  
               __end_of_EEPROM_WriteByte 6A88                         DELAY_ms@ms_count 0003  
UART_TxNumber@v_numOfDigitsToTransmit_u8 0012                             __pdataCOMRAM 0064  
                              ?_ADC_Init 0001                             __mediumconst 7A9E  
                      ?_LCD_GoToNextLine 0001                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                              ?_DELAY_ms 0003                                ?_DELAY_us 0001  
            __end_of_lcd_SendLowerNibble 6C9E                       ??_LCD_GoToNextLine 000D  
                   __end_of_LCD_CmdWrite 6AEC                     __end_of_LCD_GoToLine 6A58  
            lcd_SendLowerNibble@dataByte 000B                               __accesstop 0080  
                __end_of__initialization 6BB6                                ?_LCD_Init 000E  
                        __CFG_PBADEN$OFF 000000                    __end_of_UART_TxNumber 7766  
                          ___rparam_used 000001                    __end_of_UART_TxString 69DA  
                        ??_GPIO_PinWrite 0007                           __pcstackCOMRAM 0001  
                  __end_of_lcd_DataWrite 6B1E                     _lcd_SendHigherNibble 6C06  
                     __size_of_lcd_Reset 005A                               ??_ADC_Init 0001  
           __size_of_lcd_SendDataSignals 0036                               ??_DELAY_ms 0005  
                             ??_DELAY_us 0003                     __end_of_GPIO_PinRead 71EC  
         GPIO_PinWrite@var_portNumber_u8 0009                    __end_of_lcd_BusyCheck 705A  
           lcd_SendHigherNibble@dataByte 000B             GPIO_PinWrite@var_pinValue_u8 0006  
                             ??_LCD_Init 000F                             ?_switch_Test 0001  
    EEPROM_WriteByte@v_eepromAddress_u16 0001               __size_of_GPIO_PinDirection 0160  
                              ?_adc_Test 0001                    ?_lcd_SendHigherNibble 0001  
                                _GO_DONE 007E11                                ?_lcd_Test 0001  
                       DELAY_us@us_count 0001                                ?_led_Test 0001  
              EEPROM_WriteByte@gie_value 0004                                  __Hparam 0000  
                      __end_of_lcd_Reset 6D4A                                  __Lparam 0000  
                   __size_of_UART_RxChar 000A                     __size_of_UART_TxChar 000E  
                   __size_of_UART_Printf 0338                LCD_Init@v_lcdNoOfLines_u8 000F  
                                ___lldiv 6E94       EEPROM_ReadByte@v_eepromAddress_u16 0001  
                        __CFG_STVREN$OFF 000000                                  __pcinit 6B8A  
                             ??_adc_Test 0044                                  __ramtop 0600  
                                __ptext0 71EC                                  __ptext1 6C9E  
                                __ptext2 6F16                                  __ptext3 6BC0  
                                __ptext4 705A                                  __ptext5 6D4A  
                                __ptext6 6CF0                                  __ptext7 68FA  
                                __ptext8 6A2E                                  __ptext9 6A04  
                  __size_of_LCD_CmdWrite 0032                                _LCDConfig 004C  
                  __size_of_LCD_GoToLine 002A                                _LCD_Clear 68FA  
                         UART_Printf@ptr 003E                           UART_Printf@str 0030  
                             ??_lcd_Test 0011                                _LCD_SetUp 705A  
                             ??_led_Test 0005                     end_of_initialization 6BB6  
                         UART_TxNumber@a 001E                           UART_TxNumber@i 002B  
           LCD_Init@v_MaxCharsPerLine_u8 000E                            _A_ColsPins_U8 005A  
                          __Lmediumconst 7A9E                          _EEPROM_ReadByte 6908  
                        ___lldiv@divisor 0005                          ___lldiv@counter 000D  
         UART_SetBaudRate@v_baudRate_u32 000E                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                   ??_lcd_SendHigherNibble 000B  
             __end_of_lcd_SendCmdSignals 6B54                             _LCD_CmdWrite 6ABA  
                              _UART_Init 6968                __size_of_UART_SetBaudRate 0076  
                           _LCD_GoToLine 6A2E         ADC_GetAdcValue@var_adcChannel_u8 0007  
                  __size_of_GPIO_PinRead 00D2                        ?_EEPROM_WriteByte 0001  
                     ??_EEPROM_WriteByte 0004                               ?_LCD_Clear 0001  
                             ?_LCD_SetUp 0006                        __size_of_ADC_Init 000E  
                      __size_of_DELAY_ms 001E                        __size_of_DELAY_us 0012  
                          ??_eeprom_Test 0044                 __size_of_ADC_GetAdcValue 0032  
               __size_of_LCD_DisplayChar 0026                        __size_of_LCD_Init 005A  
                             main@option 004B                __size_of_LCD_GoToNextLine 002A  
                    _lcd_SendDataSignals 6B54          UART_TxNumber@v_numericSystem_u8 002A  
     GPIO_PinDirection@var_portNumber_u8 0004                             _GPIO_PinRead 711A  
                   __size_of_switch_Test 0052                               ?_UART_Init 0017  
                          __pidataCOMRAM 68D0                 _ARR_LcdLineNumAddress_U8 0064  
                    start_initialization 6B8A                     ?_lcd_SendDataSignals 0001  
                 _v_LcdTrackCursorPos_U8 0062                  __end_of_EEPROM_ReadByte 6918  
          GPIO_PinRead@var_portNumber_u8 0003             __size_of_lcd_SendLowerNibble 004C  
        GPIO_PinDirection@var_pinDirn_u8 0001                      __end_of_eeprom_Test 6E94  
                  __end_of_GPIO_PinWrite 7596                         __CFG_LPT1OSC$OFF 000000  
                      _UART_TxNumber$586 0028                        __size_of_adc_Test 0020  
                  ??_lcd_SendDataSignals 000B                     _v_LcdTrackLineNum_U8 0063  
                 __size_of_UART_TxNumber 01D0                              __pbssCOMRAM 004C  
                    _A_KeyLookUptable_U8 7A9F                    lcd_DataWrite@dataByte 000C  
                 __size_of_UART_TxString 002A                              ??_LCD_Clear 000E  
                            ??_LCD_SetUp 0010                   __size_of_lcd_DataWrite 0032  
                      __size_of_lcd_Test 0046                        __size_of_led_Test 0098  
            LCD_GoToLine@v_lineNumber_u8 000D                        __CFG_CCP2MX$PORTC 000000  
                          __pmediumconst 7A9E                                 ?___lldiv 0001  
                      ??_ADC_GetAdcValue 0005                                _lcd_Reset 6CF0  
                      ??_LCD_DisplayChar 000D                              ??_UART_Init 001B  
                       _UART_SetBaudRate 6DA4                   __size_of_lcd_BusyCheck 00AC  
                               _ADC_Init 68DE                        _LCD_DisplayString 6A04  
                               _DELAY_ms 692A                                 _DELAY_us 6918  
                     ?_LCD_DisplayString 000E                         ?_EEPROM_ReadByte 0001  
                          UART_Printf@ch 0040                                 _LCD_Init 6D4A  
                            _eeprom_Test 6E1A                      ??_LCD_DisplayString 0010  
                          ??_UART_RxChar 0001                            ??_UART_TxChar 0001  
                          _UART_TxNumber 7596                         _LCD_GoToNextLine 69DA  
                          ??_UART_Printf 0030                            _UART_TxString 69B0  
                       __CFG_WDTPS$32768 000000                  UART_Init@v_baudRate_u32 0017  
                             ?_lcd_Reset 0001                            _lcd_DataWrite 6AEC  
                UART_TxString@ptr_string 0002                 GPIO_PinRead@returnStatus 0004  
                          _A_RowsPins_U8 005E                                led_Test@i 0005  
              __end_of_LCD_DisplayString 6A2E                       _lcd_SendCmdSignals 6B1E  
                              copy_data0 6BAA                            _lcd_BusyCheck 6FAE  
              __size_of_EEPROM_WriteByte 0030                      ?_lcd_SendCmdSignals 0001  
              UART_TxNumber@v_number_u32 000E                           ?_UART_TxNumber 000E  
                         ?_UART_TxString 0002                                 __Hrparam 0000  
               UART_TxChar@v_uartData_u8 0001                                 __Lrparam 0000  
                         ?_lcd_DataWrite 0001                      __end_of_UART_RxChar 68DE  
                    __end_of_UART_TxChar 68FA                         __size_of___lldiv 0082  
                    __end_of_UART_Printf 7A9E                                 _adc_Test 6948  
                   ??_lcd_SendCmdSignals 000B            __size_of_lcd_SendHigherNibble 004C  
                    _lcd_SendLowerNibble 6C52                                 __ptext10 698A  
                               __ptext11 6AEC                                 __ptext20 711A  
                               __ptext12 6B54                                 __ptext21 72D6  
                               __ptext13 69DA                                 __ptext30 68EC  
                               __ptext22 692A                                 __ptext14 6ABA  
                               __ptext31 68DE                                 __ptext23 6E1A  
                               __ptext15 6C52                                 __ptext32 6A88  
                               __ptext24 6A58                                 __ptext16 6C06  
                               __ptext33 6918                                 __ptext25 6908  
                               __ptext17 6B1E                                 __ptext34 68D4  
                               __ptext26 6948                                 __ptext18 6FAE  
                               __ptext35 6968                                 __ptext27 7766  
                               __ptext19 7436                                 __ptext36 6DA4  
                               __ptext28 69B0                                 __ptext37 6E94  
                               __ptext29 7596                                 _lcd_Test 6BC0  
                               _led_Test 6F16                           ?_lcd_BusyCheck 0001  
                          __size_of_main 00EA                     ?_lcd_SendLowerNibble 0001  
                          ??_switch_Test 000B                          UART_Printf@argp 0042  
                            ??_lcd_Reset 000C                 UART_SetBaudRate@RegValue 0016  
             __size_of_LCD_DisplayString 002A                eeprom_Test@eeprom_address 0047  
                        ??_UART_TxNumber 0013                 __end_of_UART_SetBaudRate 6E1A  
                        _ADC_GetAdcValue 6A88                          ??_UART_TxString 0004  
                  ??_lcd_SendLowerNibble 000B                         ___lldiv@dividend 0001  
                        _LCD_DisplayChar 698A                              _UART_RxChar 68D4  
                            _UART_TxChar 68EC                              _UART_Printf 7766  
                        ??_lcd_DataWrite 000C              __end_of_lcd_SendDataSignals 6B8A  
                    __end_of_switch_Test 6CF0                         ___lldiv@quotient 0009  
               __end_of_LCD_GoToNextLine 6A04                          ??_lcd_BusyCheck 000B  
                   eeprom_Test@read_char 0045                   __size_of_GPIO_PinWrite 0160  
  UART_Printf@v_numOfDigitsToTransmit_u8 0041                       UART_Printf@argList 002C  
                       _EEPROM_WriteByte 6A58                             ?_eeprom_Test 0001  
                   UART_Printf@v_num_s16 0036                     UART_Printf@v_num_s32 0032  
                   UART_Printf@v_num_u16 003C                     UART_Printf@v_num_u32 0038  
